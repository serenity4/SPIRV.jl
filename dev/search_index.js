var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [SPIRV]\nPrivate = false","category":"page"},{"location":"api/#SPIRV.GenericInstruction","page":"API","title":"SPIRV.GenericInstruction","text":"SPIR-V instruction in human-readable format.\n\n\n\n\n\n","category":"type"},{"location":"api/#SPIRV.GenericInstruction-Tuple{InstructionChunk}","page":"API","title":"SPIRV.GenericInstruction","text":"GenericInstruction(inst)\n\nRetrieve arguments to an operation inside an InstructionChunk inst, based on its operands (which form a sequence of 4-bytes words). Converts raw integer values to their final types: enumeration, string, or integer.\n\n\n\n\n\n","category":"method"},{"location":"api/#SPIRV.InstructionChunk","page":"API","title":"SPIRV.InstructionChunk","text":"SPIR-V instruction, in binary format. Essentially, an instruction is an opcode referring to an operation followed by operands, 4-bytes words that form the payload. Be aware that an argument may be represented by one or several operands, as is the case for literal values (see the specification for more details). Therefore, the number of operands is not necessarily equal to the number of arguments.\n\n\n\n\n\n","category":"type"},{"location":"api/#SPIRV.SPIRModule","page":"API","title":"SPIRV.SPIRModule","text":"SPIR-V module, as a series of headers followed by a stream of instructions. The header embeds two magic numbers, one for the module itself and one for the tool that generated it (e.g. glslang). It also contains the version of the specification applicable to the module, the maximum ID number and an optional instruction schema.\n\n\n\n\n\n","category":"type"},{"location":"api/#SPIRV.disassemble-Tuple{IO, SPIRModule}","page":"API","title":"SPIRV.disassemble","text":"disassemble(io, spir_module)\n\nTransform the content of spir_module into a human-readable format and prints it to the provided IO.\n\n\n\n\n\n","category":"method"},{"location":"intro/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"#SPIRV.jl","page":"Home","title":"SPIRV.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tooling around the manipulation of the binary format SPIR-V defined by the Khronos Group.","category":"page"},{"location":"#Status","page":"Home","title":"Status","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is currently a work in progress. The source code and public API may change at any moment. Use at your own risk.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"intro.md\", \"api.md\"]","category":"page"}]
}
