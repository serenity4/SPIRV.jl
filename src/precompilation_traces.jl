precompile(Tuple{typeof(Base.hashindex), Tuple{Base.PkgId, Nothing}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{Base.PkgId, String}, Int64})
precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(SPIRV_Tools_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(Base.length), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.push!), Array{Test.AbstractTestSet, 1}, Test.DefaultTestSet})
precompile(Tuple{typeof(Base.copy), Random.TaskLocalRNG})
precompile(Tuple{typeof(Random.seed!), Array{UInt64, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, Test.var"#16#21", Tuple{}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Test.var"#15#20", Base.Iterators.Filter{Test.var"#16#21", Tuple{}}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.Iterators.Filter{Test.var"#16#21", Tuple{}}, Test.var"#15#20"}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Iterators.Filter{Test.var"#16#21", Tuple{}}, Symbol})
precompile(Tuple{typeof(Base._iterator_upper_bound), Base.Generator{Base.Iterators.Filter{Test.var"#16#21", Tuple{}}, Test.var"#15#20"}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{Test.var"#16#21", Tuple{}}, Test.var"#15#20"}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, Test.var"#18#23", Tuple{}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Test.var"#17#22", Base.Iterators.Filter{Test.var"#18#23", Tuple{}}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.Iterators.Filter{Test.var"#18#23", Tuple{}}, Test.var"#17#22"}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Iterators.Filter{Test.var"#18#23", Tuple{}}, Symbol})
precompile(Tuple{typeof(Base._iterator_upper_bound), Base.Generator{Base.Iterators.Filter{Test.var"#18#23", Tuple{}}, Test.var"#17#22"}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{Test.var"#18#23", Tuple{}}, Test.var"#17#22"}})
precompile(Tuple{typeof(Base.filter), Function, Tuple{}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Union{}, 1}, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Union{}, 1}, Symbol}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Union{}, 1}})
precompile(Tuple{typeof(Test.get_test_result), Any, Any})
precompile(Tuple{typeof(Base.:(!=)), Char, Char})
precompile(Tuple{typeof(Base.lastindex), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Test.AbstractTestSet, 1}, Int64})
precompile(Tuple{Type{SPIRV.DeltaGraph{T} where T}})
precompile(Tuple{typeof(Graphs.add_vertices!), SPIRV.DeltaGraph{Int64}, Int64})
precompile(Tuple{typeof(Graphs.vertices), SPIRV.DeltaGraph{Int64}})
precompile(Tuple{typeof(Base.collect), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{SPIRV.DeltaGraph{T} where T}, Int64})
precompile(Tuple{typeof(Base.:(==)), SPIRV.DeltaGraph{Int64}, SPIRV.DeltaGraph{Int64}})
precompile(Tuple{typeof(Graphs.SimpleGraphs.rem_vertex!), SPIRV.DeltaGraph{Int64}, Int64})
precompile(Tuple{typeof(Graphs.SimpleGraphs.add_vertex!), SPIRV.DeltaGraph{Int64}})
precompile(Tuple{typeof(Graphs.SimpleGraphs.add_edge!), SPIRV.DeltaGraph{Int64}, Int64, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, 1}}})
precompile(Tuple{typeof(Graphs.edges), SPIRV.DeltaGraph{Int64}})
precompile(Tuple{typeof(Base.typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, Vararg{Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{5, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{Type{Graphs.SimpleGraphs.SimpleEdge{T} where T<:Integer}, Int64, Int64})
precompile(Tuple{typeof(Base.vect), Graphs.SimpleGraphs.SimpleEdge{Int64}})
precompile(Tuple{typeof(Base.:(==)), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}})
precompile(Tuple{typeof(Graphs.SimpleGraphs.rem_edge!), SPIRV.DeltaGraph{Int64}, Graphs.SimpleGraphs.SimpleEdge{Int64}})
precompile(Tuple{typeof(Base.:(==)), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, Array{Any, 1}})
precompile(Tuple{Type{SPIRV.DeltaGraph{T} where T}, Int64, Pair{Int64, Int64}, Vararg{Pair{Int64, Int64}}})
precompile(Tuple{Type{Test.Returned}, Any, Any, LineNumberNode})
precompile(Tuple{typeof(Base.copy!), Random.TaskLocalRNG, Random.Xoshiro})
precompile(Tuple{typeof(Random.set_global_seed!), Array{UInt64, 1}})
precompile(Tuple{typeof(Base.pop!), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(SPIRV.compact), SPIRV.DeltaGraph{Int64}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{4, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.vect), Graphs.SimpleGraphs.SimpleEdge{Int64}, Vararg{Graphs.SimpleGraphs.SimpleEdge{Int64}}})
precompile(Tuple{typeof(Graphs.merge_vertices!), SPIRV.DeltaGraph{Int64}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Tuple{Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Graphs.merge_vertices!), SPIRV.DeltaGraph{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}})
precompile(Tuple{Type{SPIRV.ResultID}, Int64})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, SPIRV.ResultID, SPIRV.ResultID, SPIRV.ResultID, Vararg{SPIRV.ResultID}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{SPIRV.ResultID}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{SPIRV.ResultID}, Tuple{Array{Int64, 1}}}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, SPIRV.ResultID, SPIRV.ResultID, Array{SPIRV.ResultID, 1}})
precompile(Tuple{typeof(Base.:(==)), SPIRV.Instruction, SPIRV.Instruction})
precompile(Tuple{typeof(Base.isequal), SPIRV.ResultID, SPIRV.ResultID})
precompile(Tuple{typeof(Base.getindex), Type{SPIRV.Instruction}, SPIRV.Instruction, SPIRV.Instruction})
precompile(Tuple{typeof(Base.vect), SPIRV.Instruction, Vararg{SPIRV.Instruction}})
precompile(Tuple{typeof(Base.:(==)), Array{SPIRV.Instruction, 1}, Array{SPIRV.Instruction, 1}})
precompile(Tuple{typeof(Test.testset_forloop), Tuple{Expr, Expr}, Expr, LineNumberNode})
precompile(Tuple{typeof(Base.split_sign), UInt32})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{UInt32, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{UInt32, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.:(+)), Bool, Int64})
precompile(Tuple{typeof(Base.:(>>)), UInt8, UInt8})
precompile(Tuple{typeof(Base.:(>)), UInt8, UInt8})
precompile(Tuple{typeof(Base.ifelse), Bool, UInt8, UInt8})
precompile(Tuple{typeof(Base.:(+)), UInt8, UInt8})
precompile(Tuple{typeof(Base.:(>>)), UInt32, UInt8})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{4}})
precompile(Tuple{typeof(SPIRV.invalid_format), String, Vararg{Any}})
precompile(Tuple{Type{SPIRV.SPIRFormatError}, String})
precompile(Tuple{typeof(Base.:(!=)), NTuple{5, Symbol}, NTuple{5, Symbol}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_shape), Tuple{}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Core.Compiler.apply_type_tfunc), Core.Compiler.OptimizerLattice{Core.Compiler.PartialsLattice{Core.Compiler.ConstsLattice}}, Any, Any, Vararg{Any}})
precompile(Tuple{ConstructionBase.var"##s26#1", Any, Any, Any})
precompile(Tuple{typeof(Base.nameof), DataType})
precompile(Tuple{typeof(Base.:(+)), Int64, Bool, Bool})
precompile(Tuple{typeof(Base.getproperty), Base.Set{DataType}, Symbol})
precompile(Tuple{typeof(Base.getproperty), SPIRV.EnumInfos, Symbol})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.OpCode})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix2{typeof(Base.:(!=)), SPIRV.OpCode}}, Base.Fix2{typeof(Base.:(!=)), SPIRV.OpCode}})
precompile(Tuple{typeof(Base.convert), Type{Base.ComposedFunction{Base.Fix2{typeof(Base.:(!=)), SPIRV.OpCode}, typeof(SPIRV.opcode)}}, Base.ComposedFunction{Base.Fix2{typeof(Base.:(!=)), SPIRV.OpCode}, typeof(SPIRV.opcode)}})
precompile(Tuple{typeof(Base.unwrap_composed), Base.ComposedFunction{Base.ComposedFunction{Base.Fix2{typeof(Base.:(!=)), SPIRV.OpCode}, typeof(SPIRV.opcode)}, typeof(Base.peek)}})
precompile(Tuple{typeof(Base.in), Tuple{SPIRV.OpCode, SPIRV.OpCode}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix2{typeof(Base.in), Tuple{SPIRV.OpCode, SPIRV.OpCode}}}, Base.Fix2{typeof(Base.in), Tuple{SPIRV.OpCode, SPIRV.OpCode}}})
precompile(Tuple{typeof(Base.convert), Type{Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), Tuple{SPIRV.OpCode, SPIRV.OpCode}}}}, Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), Tuple{SPIRV.OpCode, SPIRV.OpCode}}}})
precompile(Tuple{typeof(Base.convert), Type{Base.ComposedFunction{Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), Tuple{SPIRV.OpCode, SPIRV.OpCode}}}, typeof(SPIRV.opcode)}}, Base.ComposedFunction{Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), Tuple{SPIRV.OpCode, SPIRV.OpCode}}}, typeof(SPIRV.opcode)}})
precompile(Tuple{typeof(Base.in), NTuple{7, SPIRV.OpCode}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix2{typeof(Base.in), NTuple{7, SPIRV.OpCode}}}, Base.Fix2{typeof(Base.in), NTuple{7, SPIRV.OpCode}}})
precompile(Tuple{typeof(Base.convert), Type{Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), NTuple{7, SPIRV.OpCode}}}}, Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), NTuple{7, SPIRV.OpCode}}}})
precompile(Tuple{typeof(Base.convert), Type{Base.ComposedFunction{Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), NTuple{7, SPIRV.OpCode}}}, typeof(SPIRV.opcode)}}, Base.ComposedFunction{Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), NTuple{7, SPIRV.OpCode}}}, typeof(SPIRV.opcode)}})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:color,), Tuple{Symbol}}, Type{NamedTuple{(:context,), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:color,), Tuple{Symbol}}})
precompile(Tuple{typeof(Base.:(==)), SPIRV.OpCode})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix2{typeof(Base.:(==)), SPIRV.OpCode}}, Base.Fix2{typeof(Base.:(==)), SPIRV.OpCode}})
precompile(Tuple{typeof(Base.convert), Type{Base.ComposedFunction{Base.Fix2{typeof(Base.:(==)), SPIRV.OpCode}, typeof(SPIRV.opcode)}}, Base.ComposedFunction{Base.Fix2{typeof(Base.:(==)), SPIRV.OpCode}, typeof(SPIRV.opcode)}})
precompile(Tuple{typeof(Base.unwrap_composed), Base.ComposedFunction{Base.ComposedFunction{Base.Fix2{typeof(Base.:(==)), SPIRV.OpCode}, typeof(SPIRV.opcode)}, typeof(Base.peek)}})
precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Type{SPIRV.PhysicalModule}, String})
precompile(Tuple{typeof(SPIRV.operand_infos), SPIRV.OpCode, Vararg{Any}})
precompile(Tuple{typeof(SPIRV.info), SPIRV.OpCode, Bool})
precompile(Tuple{typeof(Base.getproperty), SPIRV.InstructionInfo, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{SPIRV.OperandInfo, 1}, Symbol})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getproperty), Tuple{Array{SPIRV.OperandInfo, 1}, Base.RefValue{Symbol}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.getproperty), Tuple{Array{SPIRV.OperandInfo, 1}, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{SPIRV.OperandInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{DataType}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{SPIRV.OperandInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SPIRV.next_id), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Array{UInt8, 1}}}, typeof(SPIRV.read_word), Array{DataType, 1}, SPIRV.Id})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{SPIRV.OperandInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{SPIRV.Id}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.Id, 1}, SPIRV.Id, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.Id, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{SPIRV.OperandInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{SPIRV.OperandInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{Base.Enums.Enum{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Base.Enums.Enum{Int64}, 1}, Array{SPIRV.Id, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{SPIRV.OperandInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, SPIRV.Literal, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Base.Enums.Enum{Int64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{SPIRV.OperandInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SPIRV.next_id), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Array{UInt8, 1}}}, typeof(SPIRV.read_word), Array{Base.Enums.Enum{Int64}, 1}, SPIRV.Id})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{SPIRV.OperandInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{Any}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{SPIRV.OperandInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, SPIRV.Id, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SPIRV.next_id), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Array{UInt8, 1}}}, typeof(SPIRV.read_word), Array{Any, 1}, SPIRV.Id})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{SPIRV.OperandInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, SPIRV.Literal, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{SPIRV.OperandInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{SPIRV.Literal}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.Literal, 1}, SPIRV.Literal, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.Literal, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{SPIRV.OperandInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SPIRV.next_id), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Array{UInt8, 1}}}, typeof(SPIRV.read_word), Array{SPIRV.Literal, 1}, SPIRV.Id})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Base.Enums.Enum{Int64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{SPIRV.OperandInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{SPIRV.Id, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{SPIRV.OperandInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SPIRV.next_id), SwapStreams.SwapStream{Bool, Base.GenericIOBuffer{Array{UInt8, 1}}}, typeof(SPIRV.read_word), Array{SPIRV.Id, 1}, SPIRV.Id})
precompile(Tuple{typeof(Base.in), Type, Tuple{SPIRV.Id, SPIRV.Id}})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:class, :operands, :capabilities, :extensions, :min_version), Tuple{String, Array{SPIRV.OperandInfo, 1}, Array{SPIRV.Capability, 1}, Array{String, 1}, Base.VersionNumber}}, NamedTuple{(:class, :operands, :capabilities, :extensions, :min_version), Tuple{String, Array{SPIRV.OperandInfo, 1}, Array{SPIRV.Capability, 1}, Array{String, 1}, Base.VersionNumber}}, SPIRV.InstructionInfo, NamedTuple{(:operands,), Tuple{Array{SPIRV.OperandInfo, 1}}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:class, :operands, :capabilities, :extensions, :min_version), Tuple{String, Array{SPIRV.OperandInfo, 1}, Array{SPIRV.Capability, 1}, Array{String, 1}, Base.VersionNumber}}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, Type})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.Capability, SPIRV.OperandInfo})
precompile(Tuple{typeof(Base.in), SPIRV.Id, Tuple{SPIRV.Id, SPIRV.Id}})
precompile(Tuple{typeof(Base.in), SPIRV.Literal, Tuple{SPIRV.Id, SPIRV.Id}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, SPIRV.Literal})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, String, SPIRV.OperandInfo})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.AddressingModel, SPIRV.OperandInfo})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.MemoryModel, SPIRV.OperandInfo})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.ExecutionModel, SPIRV.OperandInfo})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, SPIRV.Id})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.ResultID, SPIRV.OperandInfo})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.SourceLanguage, SPIRV.OperandInfo})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, UInt32, SPIRV.OperandInfo})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.Decoration, SPIRV.OperandInfo})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.BuiltIn, SPIRV.OperandInfo})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.StorageClass, SPIRV.OperandInfo})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.FunctionControl, SPIRV.OperandInfo})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{SPIRV.FunctionControl, 1}, SPIRV.var"#41#42"}})
precompile(Tuple{typeof(Base.vcat)})
precompile(Tuple{typeof(Base.convert), Type{ResultTypes.Result{Bool, SPIRV.ValidationError}}, Bool})
precompile(Tuple{typeof(SPIRV.validate), SPIRV.Module})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.Capability})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, String})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.AddressingModel})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.MemoryModel})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.ExecutionModel})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.ResultID})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.SourceLanguage})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, UInt32})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.Decoration})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.BuiltIn})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.StorageClass})
precompile(Tuple{typeof(Base.:(!=)), UInt64, Int64})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.FunctionControl})
precompile(Tuple{typeof(Base.push!), Array{UInt32, 1}, UInt32})
precompile(Tuple{typeof(Base.setup_stdio), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{Base.var"#767#768"{Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Base.PipeEndpoint, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.PipeEndpoint}})
precompile(Tuple{Base.var"#767#768"{Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Base.PipeEndpoint, Base.PipeEndpoint, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(ResultTypes.unwrap), ResultTypes.Result{Bool, SPIRV.ValidationError}})
precompile(Tuple{typeof(Base.sprint), Function, Base.Multimedia.MIME{Symbol("text/plain")}, Vararg{Any}})
precompile(Tuple{Base.var"##sprint#487", Nothing, Int64, typeof(Base.sprint), Function, Base.Multimedia.MIME{Symbol("text/plain")}, Vararg{Any}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/plain")}, SPIRV.Module})
precompile(Tuple{SPIRV.var"#95#96"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(SPIRV.disassemble)}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Vararg{Any}})
precompile(Tuple{typeof(SPIRV.disassemble), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, SPIRV.Module})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{UInt32, 1}, String})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt32})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, SPIRV.OpCode})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{SPIRV.OperandInfo, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{SPIRV.OperandInfo, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), DataType, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{SPIRV.Capability, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(SPIRV.emit_argument), SPIRV.IndentedIO{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, SPIRV.Capability, Type})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, SPIRV.ResultID})
precompile(Tuple{typeof(SPIRV.emit_argument), SPIRV.IndentedIO{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, String, SPIRV.Literal})
precompile(Tuple{typeof(SPIRV.emit_argument), SPIRV.IndentedIO{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, SPIRV.AddressingModel, Type})
precompile(Tuple{typeof(SPIRV.emit_argument), SPIRV.IndentedIO{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, SPIRV.MemoryModel, Type})
precompile(Tuple{typeof(SPIRV.emit_argument), SPIRV.IndentedIO{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, SPIRV.ExecutionModel, Type})
precompile(Tuple{typeof(SPIRV.emit_argument), SPIRV.IndentedIO{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, SPIRV.ResultID, SPIRV.Id})
precompile(Tuple{typeof(SPIRV.emit_argument), SPIRV.IndentedIO{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, SPIRV.SourceLanguage, Type})
precompile(Tuple{typeof(SPIRV.emit_argument), SPIRV.IndentedIO{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, UInt32, SPIRV.Literal})
precompile(Tuple{typeof(SPIRV.emit_argument), SPIRV.IndentedIO{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, SPIRV.Decoration, Type})
precompile(Tuple{typeof(SPIRV.emit_argument), SPIRV.IndentedIO{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, SPIRV.BuiltIn, Type})
precompile(Tuple{typeof(SPIRV.emit_argument), SPIRV.IndentedIO{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, SPIRV.StorageClass, Type})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SPIRV.FunctionControl})
precompile(Tuple{typeof(SPIRV.emit_argument), SPIRV.IndentedIO{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, SPIRV.FunctionControl, Type})
precompile(Tuple{typeof(Base.:(==)), SPIRV.PhysicalModule, SPIRV.PhysicalModule})
precompile(Tuple{typeof(SPIRV.assemble), SPIRV.PhysicalModule})
precompile(Tuple{typeof(Base.sizeof), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.getproperty), Base.Filesystem.StatStruct, Symbol})
precompile(Tuple{typeof(SPIRV.assemble), SPIRV.Module})
precompile(Tuple{typeof(Base.:(==)), Array{UInt32, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, SPIRV.PhysicalModule})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.ExecutionMode, SPIRV.OperandInfo})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.ExecutionMode})
precompile(Tuple{typeof(SPIRV.emit_argument), SPIRV.IndentedIO{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, SPIRV.ExecutionMode, Type})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.Dim, SPIRV.OperandInfo})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.ImageFormat, SPIRV.OperandInfo})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.SelectionControl, SPIRV.OperandInfo})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{SPIRV.SelectionControl, 1}, SPIRV.var"#41#42"}})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.LoopControl, SPIRV.OperandInfo})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{SPIRV.LoopControl, 1}, SPIRV.var"#41#42"}})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.Dim})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.ImageFormat})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.SelectionControl})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.LoopControl})
precompile(Tuple{typeof(SPIRV.emit_argument), SPIRV.IndentedIO{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, SPIRV.Dim, Type})
precompile(Tuple{typeof(SPIRV.emit_argument), SPIRV.IndentedIO{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, SPIRV.ImageFormat, Type})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SPIRV.SelectionControl})
precompile(Tuple{typeof(SPIRV.emit_argument), SPIRV.IndentedIO{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, SPIRV.SelectionControl, Type})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SPIRV.LoopControl})
precompile(Tuple{typeof(SPIRV.emit_argument), SPIRV.IndentedIO{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Int64, SPIRV.LoopControl, Type})
precompile(Tuple{typeof(Base.:(==)), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), SPIRV.AnnotatedFunction, SPIRV.AnnotatedFunction})
precompile(Tuple{Type{SPIRV.IntegerType}, Int64, Bool})
precompile(Tuple{Type{SPIRV.FloatType}, Int64})
precompile(Tuple{typeof(Base.:(==)), Nothing, SPIRV.StorageClass})
precompile(Tuple{typeof(SPIRV.promote_to_interface_block), SPIRV.IntegerType, Nothing})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.IntegerType, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.:(==)), SPIRV.IntegerType, SPIRV.IntegerType})
precompile(Tuple{Type{SPIRV.Constant}, Int64})
precompile(Tuple{Type{SPIRV.ArrayType}, SPIRV.IntegerType, SPIRV.Constant})
precompile(Tuple{typeof(Base.vect), SPIRV.IntegerType, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), SPIRV.IntegerType, SPIRV.FloatType, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), SPIRV.FloatType, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.promote_type), Type{SPIRV.IntegerType}, Type{SPIRV.SPIRType}})
precompile(Tuple{typeof(Base.getindex), Type{SPIRV.SPIRType}, SPIRV.IntegerType, SPIRV.FloatType, SPIRV.ArrayType})
precompile(Tuple{Type{SPIRV.StructType}, Array{SPIRV.SPIRType, 1}})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.StructType, SPIRV.StructType})
precompile(Tuple{typeof(Base.isapprox), SPIRV.StructType, SPIRV.StructType})
precompile(Tuple{SPIRV.var"#14#15", Tuple{SPIRV.IntegerType, SPIRV.IntegerType}})
precompile(Tuple{SPIRV.var"#14#15", Tuple{SPIRV.FloatType, SPIRV.FloatType}})
precompile(Tuple{SPIRV.var"#14#15", Tuple{SPIRV.ArrayType, SPIRV.ArrayType}})
precompile(Tuple{typeof(Base.isapprox), SPIRV.IntegerType, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.isequal), Int64, Int64})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.StorageClass, SPIRV.StructType})
precompile(Tuple{typeof(Base.isapprox), SPIRV.PointerType, SPIRV.PointerType})
precompile(Tuple{typeof(Base.:(>>)), Int64, UInt8})
precompile(Tuple{typeof(Base._tablesz), Int64})
precompile(Tuple{Type{SPIRV.TypeMap}})
precompile(Tuple{Type{NamedTuple{(:fill_tmap,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{SPIRV.var"##spir_type#25", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(SPIRV.spir_type), Core.TypeofBottom, Nothing})
precompile(Tuple{typeof(SPIRV.spir_type), Core.TypeofBottom, Nothing})
precompile(Tuple{typeof(SPIRV.spir_type), DataType, SPIRV.TypeMap})
precompile(Tuple{typeof(Base.allequal), Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base._all), Base.Fix2{typeof(Base.isequal), Type{Int64}}, Tuple{DataType, DataType}, Base.Colon})
precompile(Tuple{typeof(Base.setindex!), SPIRV.TypeMap, SPIRV.IntegerType, DataType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Int64}, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.ArrayType, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.:(==)), SPIRV.ArrayType, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.setindex!), SPIRV.TypeMap, SPIRV.ArrayType, DataType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{Int64, Int64}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.:(*)), Int64, Type{SPIRV.LiteralType{UInt32}}})
precompile(Tuple{Type{SPIRV.Constant}, UInt32})
precompile(Tuple{typeof(Base.allequal), Tuple{DataType}})
precompile(Tuple{typeof(Base._all), Base.Fix2{typeof(Base.isequal), Type{Int64}}, Tuple{DataType}, Base.Colon})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{Int64}}, SPIRV.ArrayType})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#27#28"{SPIRV.TypeMap}, Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType}, SPIRV.var"#27#28"{SPIRV.TypeMap}}})
precompile(Tuple{typeof(Base._array_for), Type{SPIRV.IntegerType}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SPIRV.IntegerType, 1}, SPIRV.IntegerType, Base.Generator{Tuple{DataType, DataType}, SPIRV.var"#27#28"{SPIRV.TypeMap}}, Int64})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.FloatType, SPIRV.FloatType})
precompile(Tuple{typeof(Base.:(==)), SPIRV.FloatType, SPIRV.FloatType})
precompile(Tuple{typeof(Base.setindex!), SPIRV.TypeMap, SPIRV.FloatType, DataType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Float64}, SPIRV.FloatType})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{SPIRV.IntegerType, 1}, SPIRV.FloatType, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{SPIRV.ScalarType, 1}, Base.Generator{Tuple{DataType, DataType}, SPIRV.var"#27#28"{SPIRV.TypeMap}}, Int64, Int64})
precompile(Tuple{Type{SPIRV.StructType}, Array{SPIRV.ScalarType, 1}})
precompile(Tuple{typeof(Base.:(==)), SPIRV.StructType, SPIRV.StructType})
precompile(Tuple{typeof(Base.setindex!), SPIRV.TypeMap, SPIRV.StructType, DataType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{Int64, Float64}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{Tuple{Int64, Float64}}}})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.PointerType, SPIRV.PointerType})
precompile(Tuple{typeof(Base.:(==)), SPIRV.PointerType, SPIRV.PointerType})
precompile(Tuple{typeof(Base.setindex!), SPIRV.TypeMap, SPIRV.PointerType, DataType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{Tuple{Int64, Float64}}}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.getproperty), SPIRV.PointerType, Symbol})
precompile(Tuple{Type{NamedTuple{(:wrap_mutable,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:wrap_mutable,), Tuple{Bool}}, typeof(SPIRV.spir_type), DataType, SPIRV.TypeMap})
precompile(Tuple{typeof(Base.:(!=)), String, Type})
precompile(Tuple{Type{Test.Threw}, Any, Union{Nothing, Array{Any, 1}}, LineNumberNode})
precompile(Tuple{typeof(Test.do_test_throws), Test.ExecutionResult, Any, Any})
precompile(Tuple{typeof(Base.sprint), Function, ErrorException})
precompile(Tuple{typeof(Base.showerror), Base.GenericIOBuffer{Array{UInt8, 1}}, ErrorException})
precompile(Tuple{typeof(Test.contains_warn), Any, AbstractString})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Type{SPIRV.StructType}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.StructType, 1}, SPIRV.StructType, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.StructType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{SPIRV.StructType}, Array{SPIRV.StructType, 1}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Base.RefValue{Tuple{Int64, Float64}}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.getproperty), SPIRV.StructType, Symbol})
precompile(Tuple{typeof(Base.Iterators.only), Array{SPIRV.SPIRType, 1}})
precompile(Tuple{typeof(SPIRV.spir_type), Core.TypeofBottom, SPIRV.TypeMap})
precompile(Tuple{SPIRV.var"##spir_type#25", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(SPIRV.spir_type), Core.TypeofBottom, SPIRV.TypeMap})
precompile(Tuple{typeof(Base.convert), Type{SPIRV.ResultID}, Int64})
precompile(Tuple{Type{SPIRV.ModuleTarget}})
precompile(Tuple{Type{SPIRV.Translation}})
precompile(Tuple{typeof(Base.isvarargtype), Any})
precompile(Tuple{Base.var"#13#14"{DataType}, Int64})
precompile(Tuple{typeof(Base.fieldtypes), Type})
precompile(Tuple{typeof(Base.first), Tuple{DataType, DataType}})
precompile(Tuple{typeof(SPIRV.promote_to_interface_block), SPIRV.FloatType, Nothing})
precompile(Tuple{Type{Base.Fix2{F, T} where T where F}, typeof(Base.getproperty), Symbol})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix2{typeof(Base.getproperty), Symbol}}, Base.Fix2{typeof(Base.getproperty), Symbol}})
precompile(Tuple{typeof(Base.unwrap_composed), Base.ComposedFunction{typeof(Base.isnothing), Base.Fix2{typeof(Base.getproperty), Symbol}}})
precompile(Tuple{typeof(Base.tail), Tuple{typeof(Base.isnothing), Base.Fix2{typeof(Base.getproperty), Symbol}}})
precompile(Tuple{typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, Tuple{Float64, Tuple{UInt32, Int64}}})
precompile(Tuple{Type{SPIRV.Constant}, Tuple{Float64, Tuple{UInt32, Int64}}, SPIRV.ModuleTarget, SPIRV.Translation})
precompile(Tuple{typeof(Base._all), Base.Fix2{typeof(Base.isequal), Type{Float64}}, Tuple{DataType, DataType}, Base.Colon})
precompile(Tuple{typeof(Base._array_for), Type{SPIRV.FloatType}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SPIRV.FloatType, 1}, SPIRV.FloatType, Base.Generator{Tuple{DataType, DataType}, SPIRV.var"#27#28"{SPIRV.TypeMap}}, Int64})
precompile(Tuple{typeof(Base._all), Base.Fix2{typeof(Base.isequal), Type{UInt32}}, Tuple{DataType, DataType}, Base.Colon})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{UInt32}, SPIRV.IntegerType})
precompile(Tuple{Type{SPIRV.StructType}, Array{SPIRV.IntegerType, 1}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{UInt32, Int64}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{SPIRV.FloatType, 1}, SPIRV.StructType, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{SPIRV.SPIRType, 1}, Base.Generator{Tuple{DataType, DataType}, SPIRV.var"#27#28"{SPIRV.TypeMap}}, Int64, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{Float64, Tuple{UInt32, Int64}}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Int64, Int64}, SPIRV.var"#430#433"{Tuple{Float64, Tuple{UInt32, Int64}}, SPIRV.ModuleTarget, SPIRV.Translation}}})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.FloatType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.FloatType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Int64, Int64}, SPIRV.var"#430#433"{Tuple{UInt32, Int64}, SPIRV.ModuleTarget, SPIRV.Translation}}})
precompile(Tuple{typeof(Base.hash), UInt32, UInt64})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.IntegerType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.hash), Array{SPIRV.ResultID, 1}, UInt64})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.StructType})
precompile(Tuple{typeof(Base.iterate), Array{SPIRV.SPIRType, 1}})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.iterate), Array{SPIRV.SPIRType, 1}, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.StructType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.FloatType})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.StructType})
precompile(Tuple{typeof(Base.getproperty), SPIRV.ModuleTarget, Symbol})
precompile(Tuple{typeof(Base.length), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}})
precompile(Tuple{typeof(Base.length), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.Constant}})
precompile(Tuple{typeof(Base.getindex), SPIRV.IDCounter})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.Constant}, SPIRV.ResultID})
precompile(Tuple{typeof(Base.getproperty), SPIRV.Constant, Symbol})
precompile(Tuple{typeof(Base.getproperty), SPIRV.Translation, Symbol})
precompile(Tuple{typeof(Base.getindex), Type{SPIRV.ResultID}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{SPIRV.ResultID, 1}, Array{SPIRV.ResultID, 1}})
precompile(Tuple{Base.var"##s91#242", Vararg{Any, 5}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{SPIRV.Decoration, 1}}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{SPIRV.BuiltIn, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{SPIRV.Scope, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{SPIRV.FunctionParameterAttribute, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{SPIRV.FPRoundingMode, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{SPIRV.FPFastMathMode, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{SPIRV.LinkageType, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{SPIRV.ResultID, 1}}})
precompile(Tuple{typeof(Base.hash), Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{Int64}, UInt64})
precompile(Tuple{typeof(Base.getproperty), SPIRV.EnumerantInfo, Symbol})
precompile(Tuple{typeof(Base.length), Array{SPIRV.OperandInfo, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{SPIRV.OperandInfo, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(SPIRV.format_parameter), Tuple{Array{SPIRV.OperandInfo, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SPIRV.format_parameter), Tuple{Array{SPIRV.OperandInfo, 1}}}})
precompile(Tuple{SPIRV.var"#95#96"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SPIRV.var"#1#2"{SPIRV.OperandInfo}}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Char, Base.SubString{String}, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, SPIRV.Literal, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, SPIRV.Literal})
precompile(Tuple{typeof(Base.join), Array{String, 1}, String})
precompile(Tuple{typeof(Base.string), String, SPIRV.Decoration, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, SPIRV.Decoration})
precompile(Tuple{typeof(Base.isempty), Array{SPIRV.Instruction, 1}})
precompile(Tuple{typeof(Base.isequal), SPIRV.Decoration, SPIRV.Decoration})
precompile(Tuple{typeof(Base.isequal), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(|)), SPIRV.ImageOperands, SPIRV.ImageOperands})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, SPIRV.ResultID, Nothing, SPIRV.ResultID, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.ResultID, SPIRV.ImageOperands, SPIRV.ResultID, SPIRV.ResultID}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, SPIRV.ResultID, Nothing, Array{Any, 1}})
precompile(Tuple{Type{SPIRV.AllSupported}})
precompile(Tuple{Type{SPIRV.FeatureRequirements}, Array{SPIRV.Instruction, 1}, SPIRV.AllSupported})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.ImageOperands, SPIRV.OperandInfo})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{SPIRV.ImageOperands, 1}, SPIRV.var"#41#42"}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{SPIRV.ImageOperands, 1}, SPIRV.var"#41#42"}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{SPIRV.OperandInfo, 1}, Array{SPIRV.OperandInfo, 1}, Array{SPIRV.OperandInfo, 1}})
precompile(Tuple{typeof(Base.insert!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.OperandInfo})
precompile(Tuple{typeof(Base.getindex), Array{SPIRV.ImageOperands, 1}, Int64})
precompile(Tuple{Type{UInt32}, SPIRV.ImageOperands})
precompile(Tuple{typeof(Base.get), Base.Dict{UInt32, SPIRV.EnumerantInfo}, UInt32, Nothing})
precompile(Tuple{Type{SPIRV.FeatureRequirements}, Array{Any, 1}, Array{SPIRV.Capability, 1}})
precompile(Tuple{typeof(Base.:(==)), SPIRV.FeatureRequirements, SPIRV.FeatureRequirements})
precompile(Tuple{Type{NamedTuple{(:memory_model,), T} where T<:Tuple}, Tuple{SPIRV.MemoryModel}})
precompile(Tuple{Type{SPIRV.ModuleMetadata}, UInt32, UInt32, Base.VersionNumber, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:memory_model,), Tuple{SPIRV.MemoryModel}}, Type{SPIRV.IR}})
precompile(Tuple{typeof(Base.getproperty), SPIRV.IR, Symbol})
precompile(Tuple{typeof(Base.in), SPIRV.Capability, Array{SPIRV.Capability, 1}})
precompile(Tuple{typeof(Base.convert), Type{SPIRV.OpCode}, SPIRV.OpCode})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{SPIRV.ResultID, 1}, Array{SPIRV.SPIRType, 1}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.HasShape{1}, 1}}})
precompile(Tuple{typeof(Base.:(|)), Base.Missing, Bool})
precompile(Tuple{typeof(Base.getproperty), Accessors.DynamicIndexLens{SPIRV.var"#39#40"}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{SPIRV.AddressingModel}, SPIRV.AddressingModel})
precompile(Tuple{typeof(SPIRV.satisfy_requirements!), SPIRV.IR, SPIRV.AllSupported})
precompile(Tuple{typeof(Base.pairs), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}})
precompile(Tuple{typeof(Base.iterate), Dictionaries.PairDictionary{SPIRV.ResultID, SPIRV.SPIRType, Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.SPIRType}}})
precompile(Tuple{typeof(Base.pairs), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.Constant}})
precompile(Tuple{typeof(Base.iterate), Dictionaries.PairDictionary{SPIRV.ResultID, SPIRV.Constant, Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.Constant}}})
precompile(Tuple{typeof(Base.pairs), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.Variable}})
precompile(Tuple{typeof(Base.iterate), Dictionaries.PairDictionary{SPIRV.ResultID, SPIRV.Variable, Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.Variable}}})
precompile(Tuple{Type{UInt32}, SPIRV.AddressingModel})
precompile(Tuple{Type{UInt32}, SPIRV.MemoryModel})
precompile(Tuple{Type{NamedTuple{(:satisfy_requirements,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:satisfy_requirements,), Tuple{Bool}}, Type{SPIRV.IR}, SPIRV.Module})
precompile(Tuple{typeof(Base.push!), Array{SPIRV.Capability, 1}, SPIRV.Capability})
precompile(Tuple{typeof(Base.setproperty!), SPIRV.IR, Symbol, SPIRV.AddressingModel})
precompile(Tuple{typeof(Base.setproperty!), SPIRV.IR, Symbol, SPIRV.MemoryModel})
precompile(Tuple{typeof(Base.convert), Type{SPIRV.MemoryModel}, SPIRV.MemoryModel})
precompile(Tuple{Type{SPIRV.EntryPoint}, Symbol, SPIRV.ResultID, SPIRV.ExecutionModel, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.ResultID, 1}, SPIRV.ResultID, Int64})
precompile(Tuple{typeof(SPIRV.source_version), SPIRV.SourceLanguage, UInt32})
precompile(Tuple{Type{SPIRV.Source}, SPIRV.SourceLanguage, Base.VersionNumber, Nothing, Nothing, Array{Any, 1}})
precompile(Tuple{typeof(SPIRV.decorate!), SPIRV.IR, SPIRV.ResultID, Int64, SPIRV.Decoration, Vararg{Any}})
precompile(Tuple{SPIRV.var"##decorate!#115", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(SPIRV.decorate!), SPIRV.IR, SPIRV.ResultID, Vararg{Any}})
precompile(Tuple{typeof(SPIRV.decorate!), Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.Metadata}, SPIRV.ResultID, Int64, SPIRV.Decoration, Vararg{Any}})
precompile(Tuple{typeof(SPIRV.decorate!), SPIRV.Metadata, SPIRV.Decoration, SPIRV.BuiltIn})
precompile(Tuple{typeof(SPIRV.decorate!), SPIRV.IR, SPIRV.ResultID, SPIRV.Decoration, UInt32})
precompile(Tuple{typeof(SPIRV.decorate!), SPIRV.Metadata, SPIRV.Decoration, UInt32})
precompile(Tuple{typeof(Base.parse), Type{SPIRV.SPIRType}, SPIRV.Instruction, SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.Constant}})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ResultID, SPIRV.VoidType})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ResultID})
precompile(Tuple{Type{SPIRV.FunctionType}, SPIRV.VoidType, Array{Any, 1}})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ResultID, SPIRV.FunctionType})
precompile(Tuple{Type{SPIRV.FloatType}, UInt32})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ResultID, SPIRV.FloatType})
precompile(Tuple{Type{SPIRV.VectorType}, SPIRV.Instruction, SPIRV.FloatType})
precompile(Tuple{Type{SPIRV.VectorType}, SPIRV.FloatType, UInt32})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ResultID, SPIRV.VectorType})
precompile(Tuple{Type{SPIRV.IntegerType}, UInt32, UInt32})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ResultID, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.reinterpret), Type{UInt32}, UInt32})
precompile(Tuple{Type{SPIRV.Constant}, UInt32, SPIRV.IntegerType, Bool})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ResultID, SPIRV.ArrayType})
precompile(Tuple{SPIRV.var"#16#17"{SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}}, SPIRV.ResultID})
precompile(Tuple{typeof(Base._array_for), Type{SPIRV.VectorType}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SPIRV.VectorType, 1}, SPIRV.VectorType, Base.Generator{Array{Any, 1}, SPIRV.var"#16#17"{SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{SPIRV.VectorType, 1}, SPIRV.FloatType, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{SPIRV.SPIRType, 1}, Base.Generator{Array{Any, 1}, SPIRV.var"#16#17"{SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}}}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ResultID, SPIRV.StructType})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.Instruction, SPIRV.StructType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ResultID, SPIRV.PointerType})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.Instruction, SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}})
precompile(Tuple{typeof(Base.reinterpret), Type{Int32}, UInt32})
precompile(Tuple{Type{SPIRV.Constant}, Int32, SPIRV.IntegerType, Bool})
precompile(Tuple{typeof(Base.hash), Int32, UInt64})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.Instruction, SPIRV.VectorType})
precompile(Tuple{typeof(Base.reinterpret), Type{Float32}, UInt32})
precompile(Tuple{Type{SPIRV.Constant}, Float32, SPIRV.FloatType, Bool})
precompile(Tuple{typeof(Base.hash), Float32, UInt64})
precompile(Tuple{Type{SPIRV.MatrixType}, SPIRV.VectorType, UInt32})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ResultID, SPIRV.MatrixType})
precompile(Tuple{typeof(Base._array_for), Type{SPIRV.MatrixType}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SPIRV.MatrixType, 1}, SPIRV.MatrixType, Base.Generator{Array{Any, 1}, SPIRV.var"#16#17"{SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}}}, Int64})
precompile(Tuple{Type{SPIRV.StructType}, Array{SPIRV.MatrixType, 1}})
precompile(Tuple{Type{SPIRV.Module}, SPIRV.IR})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, Nothing, SPIRV.ExecutionModel, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ExecutionModel, SPIRV.ResultID, String, Vararg{SPIRV.ResultID, 4}}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, Nothing, Array{Any, 1}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, Nothing, SPIRV.SourceLanguage, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.SourceLanguage, UInt32}})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.FunctionType})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.FunctionType})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.VectorType})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.VectorType})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.PointerType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.VoidType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.VoidType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.VoidType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Any}, SPIRV.ResultID, SPIRV.VoidType})
precompile(Tuple{typeof(Base.iterate), Dictionaries.PairDictionary{SPIRV.ResultID, SPIRV.SPIRType, Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.SPIRType}}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.FunctionType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.FunctionType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.FunctionType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Any}, SPIRV.ResultID, SPIRV.FunctionType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.FloatType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.FloatType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.FloatType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Any}, SPIRV.ResultID, SPIRV.FloatType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.VectorType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.VectorType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.VectorType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Any}, SPIRV.ResultID, SPIRV.VectorType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.IntegerType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.IntegerType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Any}, SPIRV.ResultID, SPIRV.IntegerType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.ArrayType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.ArrayType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Any}, SPIRV.ResultID, SPIRV.ArrayType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.StructType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.StructType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.StructType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Any}, SPIRV.ResultID, SPIRV.StructType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.PointerType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.PointerType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.PointerType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Any}, SPIRV.ResultID, SPIRV.PointerType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.MatrixType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.MatrixType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.MatrixType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Any}, SPIRV.ResultID, SPIRV.MatrixType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.Constant}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.Constant}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Any}, SPIRV.ResultID, SPIRV.Constant})
precompile(Tuple{typeof(Base.iterate), Dictionaries.PairDictionary{SPIRV.ResultID, SPIRV.Constant, Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.Constant}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.Variable}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.Variable}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Any}, SPIRV.ResultID, SPIRV.Variable})
precompile(Tuple{typeof(Base.iterate), Dictionaries.PairDictionary{SPIRV.ResultID, SPIRV.Variable, Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.Variable}}, Int64})
precompile(Tuple{SPIRV.var"#106#107"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.VoidType}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.Instruction, 1}, SPIRV.Instruction, Int64})
precompile(Tuple{SPIRV.var"#106#107"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.FunctionType}})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.VoidType})
precompile(Tuple{SPIRV.var"#106#107"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.FloatType}})
precompile(Tuple{SPIRV.var"#106#107"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.VectorType}})
precompile(Tuple{SPIRV.var"#106#107"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.IntegerType}})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.Constant})
precompile(Tuple{SPIRV.var"#106#107"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.Constant}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.IntegerType, SPIRV.ResultID, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.IntegerType, Nothing})
precompile(Tuple{SPIRV.var"#106#107"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.ArrayType}})
precompile(Tuple{SPIRV.var"#106#107"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.StructType}})
precompile(Tuple{SPIRV.var"#98#99"{SPIRV.GlobalsInfo}, SPIRV.VectorType})
precompile(Tuple{SPIRV.var"#98#99"{SPIRV.GlobalsInfo}, SPIRV.FloatType})
precompile(Tuple{SPIRV.var"#98#99"{SPIRV.GlobalsInfo}, SPIRV.ArrayType})
precompile(Tuple{SPIRV.var"#106#107"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.PointerType}})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.Variable})
precompile(Tuple{SPIRV.var"#106#107"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.Variable}})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.PointerType, Nothing})
precompile(Tuple{typeof(Base.reinterpret), Type{UInt32}, Array{Int32, 1}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.IntegerType, SPIRV.ResultID, Base.ReinterpretArray{UInt32, 1, Int32, Array{Int32, 1}, false}})
precompile(Tuple{typeof(Base.vect), Float32})
precompile(Tuple{typeof(Base.reinterpret), Type{UInt32}, Array{Float32, 1}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.FloatType, SPIRV.ResultID, Base.ReinterpretArray{UInt32, 1, Float32, Array{Float32, 1}, false}})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.FloatType, Nothing})
precompile(Tuple{SPIRV.var"#106#107"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.MatrixType}})
precompile(Tuple{SPIRV.var"#98#99"{SPIRV.GlobalsInfo}, SPIRV.MatrixType})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Base.UnitRange{Int64}, Base.Generator{Base.Iterators.Zip{Tuple{Array{SPIRV.ResultID, 1}, Array{SPIRV.SPIRType, 1}}}, SPIRV.var"#104#105"}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.VoidType, Nothing})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.VectorType, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:instructions,), Tuple{Array{SPIRV.Instruction, 1}}}}})
precompile(Tuple{typeof(Base.isapprox), SPIRV.Module, SPIRV.Module})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{SPIRV.Instruction, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{SPIRV.Instruction, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Any, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.hash), Any, UInt64})
precompile(Tuple{typeof(Base.hash), String, UInt64})
precompile(Tuple{typeof(Base.isequal), SPIRV.StorageClass, SPIRV.StorageClass})
precompile(Tuple{typeof(Base.isequal), SPIRV.BuiltIn, SPIRV.BuiltIn})
precompile(Tuple{typeof(Base.isequal), SPIRV.Capability, SPIRV.Capability})
precompile(Tuple{typeof(Base.isequal), SPIRV.AddressingModel, SPIRV.AddressingModel})
precompile(Tuple{typeof(Base.isequal), SPIRV.MemoryModel, SPIRV.MemoryModel})
precompile(Tuple{typeof(Base.isequal), SPIRV.FunctionControl, SPIRV.FunctionControl})
precompile(Tuple{typeof(Base.isequal), SPIRV.ExecutionModel, SPIRV.ExecutionModel})
precompile(Tuple{typeof(Base.:(==)), SPIRV.Module, SPIRV.Module})
precompile(Tuple{typeof(Base.isequal), SPIRV.SourceLanguage, SPIRV.SourceLanguage})
precompile(Tuple{typeof(Base.isapprox), SPIRV.PhysicalModule, SPIRV.PhysicalModule})
precompile(Tuple{typeof(Base.:(!=)), NTuple{15, Symbol}, NTuple{15, Symbol}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:capabilities,), Tuple{Array{SPIRV.Capability, 1}}}}})
precompile(Tuple{typeof(SPIRV.validate), SPIRV.IR})
precompile(Tuple{typeof(SPIRV.decorate!), SPIRV.IR, SPIRV.ResultID, SPIRV.Decoration, SPIRV.BuiltIn})
precompile(Tuple{SPIRV.var"#123#124", SPIRV.ResultID})
precompile(Tuple{typeof(Base._array_for), Type{SPIRV.PointerType}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SPIRV.PointerType, 1}, SPIRV.PointerType, Base.Generator{Array{Any, 1}, SPIRV.var"#123#124"}, Int64})
precompile(Tuple{Type{SPIRV.FunctionType}, SPIRV.VoidType, Array{SPIRV.PointerType, 1}})
precompile(Tuple{Type{SPIRV.FunctionType}, SPIRV.FloatType, Array{SPIRV.PointerType, 1}})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.Instruction, SPIRV.FloatType})
precompile(Tuple{Type{SPIRV.FunctionType}, SPIRV.VectorType, Array{SPIRV.PointerType, 1}})
precompile(Tuple{Type{SPIRV.FunctionType}, SPIRV.IntegerType, Array{SPIRV.PointerType, 1}})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.Instruction, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ResultID, SPIRV.BooleanType})
precompile(Tuple{typeof(Base._array_for), Type{SPIRV.ArrayType}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SPIRV.ArrayType, 1}, SPIRV.ArrayType, Base.Generator{Array{Any, 1}, SPIRV.var"#16#17"{SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}}}, Int64})
precompile(Tuple{Type{SPIRV.StructType}, Array{SPIRV.ArrayType, 1}})
precompile(Tuple{Type{SPIRV.Constant}, Array{SPIRV.ResultID, 1}, SPIRV.VectorType, Bool})
precompile(Tuple{Type{SPIRV.VectorType}, SPIRV.Instruction, SPIRV.IntegerType})
precompile(Tuple{Type{SPIRV.VectorType}, SPIRV.IntegerType, UInt32})
precompile(Tuple{Type{SPIRV.ImageType}, SPIRV.Instruction, SPIRV.FloatType})
precompile(Tuple{typeof(Base.:(-)), Int64, UInt32})
precompile(Tuple{Type{Bool}, Int64})
precompile(Tuple{Type{SPIRV.ImageType}, SPIRV.FloatType, SPIRV.Dim, UInt32, UInt32, UInt32, Bool, SPIRV.ImageFormat, Nothing})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ResultID, SPIRV.ImageType})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.Instruction, SPIRV.ImageType})
precompile(Tuple{typeof(Base.hash), Bool, UInt64})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ExecutionModel, SPIRV.ResultID, String, SPIRV.ResultID}})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ImageType})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ImageType})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.BooleanType})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.BooleanType})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.VoidType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.BooleanType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.BooleanType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.BooleanType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Any}, SPIRV.ResultID, SPIRV.BooleanType})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.ImageType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.ImageType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.ImageType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Any}, SPIRV.ResultID, SPIRV.ImageType})
precompile(Tuple{SPIRV.var"#100#101"{SPIRV.GlobalsInfo}, SPIRV.PointerType})
precompile(Tuple{SPIRV.var"#98#99"{SPIRV.GlobalsInfo}, SPIRV.IntegerType})
precompile(Tuple{SPIRV.var"#98#99"{SPIRV.GlobalsInfo}, SPIRV.StructType})
precompile(Tuple{SPIRV.var"#106#107"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.BooleanType}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.VectorType, SPIRV.ResultID, SPIRV.ResultID, Vararg{SPIRV.ResultID}})
precompile(Tuple{SPIRV.var"#106#107"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.ImageType}})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.BooleanType, Nothing})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ImageType, Nothing})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Base.UnitRange{Int64}, Base.Generator{Base.Iterators.Zip{Tuple{Array{SPIRV.ResultID, 1}, Array{SPIRV.SPIRType, 1}}}, SPIRV.var"#104#105"}}, Tuple{Tuple{Int64}, Tuple{Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.StructType, Nothing})
precompile(Tuple{typeof(Base.isequal), SPIRV.SelectionControl, SPIRV.SelectionControl})
precompile(Tuple{typeof(Base.isequal), SPIRV.LoopControl, SPIRV.LoopControl})
precompile(Tuple{typeof(Base.isequal), SPIRV.ExecutionMode, SPIRV.ExecutionMode})
precompile(Tuple{typeof(Base.isequal), SPIRV.Dim, SPIRV.Dim})
precompile(Tuple{typeof(Base.isequal), SPIRV.ImageFormat, SPIRV.ImageFormat})
precompile(Tuple{Type{SPIRV.IR}, SPIRV.Module})
precompile(Tuple{Type{UInt32}, SPIRV.Capability})
precompile(Tuple{Type{UInt32}, SPIRV.ExecutionModel})
precompile(Tuple{Type{UInt32}, SPIRV.SourceLanguage})
precompile(Tuple{Type{UInt32}, SPIRV.Decoration})
precompile(Tuple{Type{UInt32}, SPIRV.BuiltIn})
precompile(Tuple{Type{UInt32}, SPIRV.StorageClass})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Multimedia.MIME{Symbol("text/plain")}, SPIRV.IR})
precompile(Tuple{Type{Pair{A, B} where B where A}, Nothing, Int64})
precompile(Tuple{typeof(Base.last), Pair{Nothing, Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{SPIRV.var"#59#60", typeof(Base.max)}, Symbol})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{SPIRV.var"#59#60", typeof(Base.max)}, Type{SPIRV.Instruction}})
precompile(Tuple{typeof(Base.something), Nothing, SPIRV.ResultID})
precompile(Tuple{typeof(Base.read), Type{SPIRV.Module}, String})
precompile(Tuple{typeof(Base.string), Symbol, Base.SubString{String}})
precompile(Tuple{typeof(Base.parse), Type{SPIRV.ResultID}, Base.SubString{String}})
precompile(Tuple{typeof(Base.strip), Base.SubString{String}, Char})
precompile(Tuple{typeof(Base.parse), Type{UInt32}, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{LineNumberNode}, LineNumberNode})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ExecutionModel, SPIRV.ResultID, String}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.RegexMatch, String})
precompile(Tuple{typeof(Base.vcat), Array{DataType, 1}, Type})
precompile(Tuple{typeof(Base.promote_eltypeof), Array{DataType, 1}, Type})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{DataType}, Array{DataType, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.cat_size_shape), Tuple{Bool}, Array{DataType, 1}, Type})
precompile(Tuple{typeof(Base.cat_similar), Array{DataType, 1}, Type{DataType}, Tuple{Int64}})
precompile(Tuple{typeof(Base.__cat), Array{DataType, 1}, Tuple{Int64}, Tuple{Bool}, Array{DataType, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{DataType, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, Array{DataType, 1}, Type})
precompile(Tuple{Base.var"#150#152"{Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, DataType}, Int64})
precompile(Tuple{typeof(Base.view), Array{DataType, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{DataType, 1, Array{DataType, 1}, Tuple{Base.UnitRange{Int64}}, true}, Type})
precompile(Tuple{Base.var"#151#153"{Tuple{Bool}, Tuple{Int64}, DataType}, Int64})
precompile(Tuple{SPIRV.var"##VulkanAlignment#387", Bool, Bool, Type{SPIRV.VulkanAlignment}})
precompile(Tuple{Type{SPIRV.VulkanLayout}, Array{DataType, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Type{SPIRV.IntegerType}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.IntegerType, 1}, SPIRV.IntegerType, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.IntegerType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{SPIRV.StorageClass, 1}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Int32}, SPIRV.IntegerType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Int8}, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Vec{2, Int16}}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Int16}, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.length), Type{SPIRV.Vec{2, Int16}}})
precompile(Tuple{Type{SPIRV.VectorType}, SPIRV.IntegerType, Int64})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.VectorType, SPIRV.VectorType})
precompile(Tuple{typeof(Base.:(==)), SPIRV.VectorType, SPIRV.VectorType})
precompile(Tuple{typeof(Base.setindex!), SPIRV.TypeMap, SPIRV.VectorType, DataType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Vec{2, Int16}}, SPIRV.VectorType})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Type{SPIRV.SPIRType}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Array{SPIRV.IntegerType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, SPIRV.VectorType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Array{SPIRV.IntegerType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, SPIRV.StructType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{SPIRV.ArrayType}, SPIRV.StructType, SPIRV.Constant})
precompile(Tuple{typeof(SPIRV.nrows), Type{SPIRV.Mat{4, 4, Float32}}})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Mat{4, 4, Float32}}})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Vec{4, Float32}}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Float32}, SPIRV.FloatType})
precompile(Tuple{typeof(Base.length), Type{SPIRV.Vec{4, Float32}}})
precompile(Tuple{Type{SPIRV.VectorType}, SPIRV.FloatType, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Vec{4, Float32}}, SPIRV.VectorType})
precompile(Tuple{typeof(SPIRV.ncols), Type{SPIRV.Mat{4, 4, Float32}}})
precompile(Tuple{Type{SPIRV.MatrixType}, SPIRV.VectorType, Int64})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.MatrixType, SPIRV.MatrixType})
precompile(Tuple{typeof(Base.:(==)), SPIRV.MatrixType, SPIRV.MatrixType})
precompile(Tuple{typeof(Base.setindex!), SPIRV.TypeMap, SPIRV.MatrixType, DataType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Mat{4, 4, Float32}}, SPIRV.MatrixType})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Array{SPIRV.IntegerType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, SPIRV.MatrixType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{SPIRV.var"#397#399"{SPIRV.TypeMetadata}, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{SPIRV.IntegerType}, Type{Base.Set{SPIRV.StorageClass}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SPIRV.IntegerType, Base.Set{SPIRV.StorageClass}}, Base.Set{SPIRV.StorageClass}, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SPIRV.IntegerType, Base.Set{SPIRV.StorageClass}}, Base.Generator{SPIRV.TypeMap, SPIRV.var"#397#399"{SPIRV.TypeMetadata}}, Int64})
precompile(Tuple{SPIRV.var"#397#399"{SPIRV.TypeMetadata}, SPIRV.StructType})
precompile(Tuple{typeof(Base.empty), Base.Dict{SPIRV.IntegerType, Base.Set{SPIRV.StorageClass}}, Type{SPIRV.SPIRType}, Type{Base.Set{SPIRV.StorageClass}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{SPIRV.SPIRType, Base.Set{SPIRV.StorageClass}}, Base.Dict{SPIRV.IntegerType, Base.Set{SPIRV.StorageClass}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SPIRV.SPIRType, Base.Set{SPIRV.StorageClass}}, Base.Set{SPIRV.StorageClass}, SPIRV.StructType})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SPIRV.SPIRType, Base.Set{SPIRV.StorageClass}}, Base.Generator{SPIRV.TypeMap, SPIRV.var"#397#399"{SPIRV.TypeMetadata}}, Int64})
precompile(Tuple{SPIRV.var"#397#399"{SPIRV.TypeMetadata}, SPIRV.VectorType})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SPIRV.SPIRType, Base.Set{SPIRV.StorageClass}}, Base.Set{SPIRV.StorageClass}, SPIRV.VectorType})
precompile(Tuple{SPIRV.var"#397#399"{SPIRV.TypeMetadata}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SPIRV.SPIRType, Base.Set{SPIRV.StorageClass}}, Base.Set{SPIRV.StorageClass}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.hashindex), SPIRV.IntegerType, Int64})
precompile(Tuple{typeof(Base.hashindex), SPIRV.VectorType, Int64})
precompile(Tuple{typeof(Base.hashindex), SPIRV.StructType, Int64})
precompile(Tuple{typeof(Base.hashindex), SPIRV.ArrayType, Int64})
precompile(Tuple{SPIRV.var"#397#399"{SPIRV.TypeMetadata}, SPIRV.FloatType})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SPIRV.SPIRType, Base.Set{SPIRV.StorageClass}}, Base.Set{SPIRV.StorageClass}, SPIRV.FloatType})
precompile(Tuple{SPIRV.var"#397#399"{SPIRV.TypeMetadata}, SPIRV.MatrixType})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SPIRV.SPIRType, Base.Set{SPIRV.StorageClass}}, Base.Set{SPIRV.StorageClass}, SPIRV.MatrixType})
precompile(Tuple{Type{SPIRV.NoPadding}})
precompile(Tuple{Type{SPIRV.NativeLayout}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, typeof(Base.sizeof)}}, Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, typeof(Base.sizeof)}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(Base.sizeof), Base.BottomRF{typeof(Base.add_sum)}}, Symbol})
precompile(Tuple{Type{SPIRV.ExplicitLayout}, SPIRV.NativeLayout, Array{DataType, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SPIRV.NativeLayout, Type, Base.UnitRange{Int64}})
precompile(Tuple{Type{SPIRV.LayoutInfo}, Int64, Int64, Int64, Array{UInt64, 1}})
precompile(Tuple{Type{SPIRV.LayoutInfo}, Int64, Int64, Int64, Nothing})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.sum), Function, Tuple{DataType, DataType, DataType}})
precompile(Tuple{Base.var"##mapfoldl#289", Int64, typeof(Base.mapfoldl), Function, Function, Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.sizeof), typeof(Base.add_sum), Int64, Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.:(+)), Int64, UInt64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#381#382"{DataType}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Generator{Base.UnitRange{Int64}, SPIRV.var"#381#382"{DataType}}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{typeof(Base.add_sum)}, Base.Generator{Base.Generator{Base.UnitRange{Int64}, SPIRV.var"#381#382"{DataType}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.MappingRF{SPIRV.var"#381#382"{DataType}, Base.BottomRF{typeof(Base.add_sum)}}, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.MappingRF{SPIRV.var"#381#382"{DataType}, Base.BottomRF{typeof(Base.add_sum)}}, Base.UnitRange{Int64}}, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.sum), Function, Tuple{DataType}})
precompile(Tuple{Base.var"##mapfoldl#289", Int64, typeof(Base.mapfoldl), Function, Function, Tuple{DataType}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.sizeof), typeof(Base.add_sum), Int64, Tuple{DataType}})
precompile(Tuple{Type{SPIRV.LayoutInfo}, Int64, UInt64, Int64, Array{UInt64, 1}})
precompile(Tuple{typeof(Base.elsize), Type{Array{Int8, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{SPIRV.Vec{2, Int16}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(SPIRV.dataoffset), Tuple{Base.RefValue{SPIRV.NativeLayout}, Base.RefValue{Type{SPIRV.Vec{2, Int16}}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SPIRV.dataoffset), Tuple{Base.RefValue{SPIRV.NativeLayout}, Base.RefValue{Type{SPIRV.Vec{2, Int16}}}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.elsize), Type{Array{Tuple{Int16, Int16}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{Tuple{Int16, Int16}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(SPIRV.dataoffset), Tuple{Base.RefValue{SPIRV.NativeLayout}, Base.RefValue{Type{Tuple{Int16, Int16}}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SPIRV.dataoffset), Tuple{Base.RefValue{SPIRV.NativeLayout}, Base.RefValue{Type{Tuple{Int16, Int16}}}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.elsize), Type{Array{Int16, 1}}})
precompile(Tuple{Base.MappingRF{SPIRV.var"#381#382"{DataType}, Base.BottomRF{typeof(Base.add_sum)}}, Int64, Int64})
precompile(Tuple{Base.MappingRF{SPIRV.var"#381#382"{DataType}, Base.BottomRF{typeof(Base.add_sum)}}, UInt64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.sum), Function, Tuple{DataType, DataType}})
precompile(Tuple{Base.var"##mapfoldl#289", Int64, typeof(Base.mapfoldl), Function, Function, Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.sizeof), typeof(Base.add_sum), Int64, Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{SPIRV.Mat{4, 4, Float32}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(SPIRV.dataoffset), Tuple{Base.RefValue{SPIRV.NativeLayout}, Base.RefValue{Type{SPIRV.Mat{4, 4, Float32}}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SPIRV.dataoffset), Tuple{Base.RefValue{SPIRV.NativeLayout}, Base.RefValue{Type{SPIRV.Mat{4, 4, Float32}}}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.elsize), Type{Array{NTuple{4, NTuple{4, Float32}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{NTuple{4, NTuple{4, Float32}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(SPIRV.dataoffset), Tuple{Base.RefValue{SPIRV.NativeLayout}, Base.RefValue{Type{NTuple{4, NTuple{4, Float32}}}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SPIRV.dataoffset), Tuple{Base.RefValue{SPIRV.NativeLayout}, Base.RefValue{Type{NTuple{4, NTuple{4, Float32}}}}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.elsize), Type{Array{NTuple{4, Float32}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{NTuple{4, Float32}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(SPIRV.dataoffset), Tuple{Base.RefValue{SPIRV.NativeLayout}, Base.RefValue{Type{NTuple{4, Float32}}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SPIRV.dataoffset), Tuple{Base.RefValue{SPIRV.NativeLayout}, Base.RefValue{Type{NTuple{4, Float32}}}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.elsize), Type{Array{Float32, 1}}})
precompile(Tuple{typeof(Base.vect), SPIRV.NoPadding, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), SPIRV.NoPadding, SPIRV.NativeLayout, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), SPIRV.NativeLayout, SPIRV.ExplicitLayout, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), SPIRV.ExplicitLayout, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Base.promote_type), Type{SPIRV.NativeLayout}, Type{SPIRV.LayoutStrategy}})
precompile(Tuple{typeof(Base.promote_type), Type{SPIRV.NoPadding}, Type{SPIRV.LayoutStrategy}})
precompile(Tuple{typeof(Base.getindex), Type{SPIRV.LayoutStrategy}, SPIRV.NoPadding, SPIRV.NativeLayout, SPIRV.ExplicitLayout, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#109#110"{Array{SPIRV.LayoutStrategy, 1}}, Int64, SPIRV.NoPadding, SPIRV.NativeLayout, SPIRV.ExplicitLayout, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Base.iterate), Array{SPIRV.LayoutStrategy, 1}})
precompile(Tuple{typeof(Base.iterate), Array{DataType, 1}})
precompile(Tuple{typeof(SPIRV.alignment), SPIRV.NoPadding, Type})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.sum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.isstructtype), Any})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Tuple{}, typeof(Base.identity)}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{}, typeof(Base.identity)}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.BottomRF{typeof(Base.add_sum)}, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.BottomRF{typeof(Base.add_sum)}, Tuple{}}, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.sum), Tuple{}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.sum), Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Array{DataType, 1}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.sum), Tuple{Int64, Int64, Int64}})
precompile(Tuple{SPIRV.var"#383#384"{Tuple{Int16, Int16}, SPIRV.NoPadding}, Int64})
precompile(Tuple{SPIRV.var"#383#384"{SPIRV.Vec{2, Int16}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.NoPadding, Type{SPIRV.Vec{2, Int16}}})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.NoPadding, Type{SPIRV.Mat{4, 4, Float32}}})
precompile(Tuple{SPIRV.var"#383#384"{NTuple{4, Float32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.sum), NTuple{4, Int64}})
precompile(Tuple{SPIRV.var"#383#384"{NTuple{4, NTuple{4, Float32}}, SPIRV.NoPadding}, Int64})
precompile(Tuple{SPIRV.var"#383#384"{SPIRV.Mat{4, 4, Float32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Base.ntuple), SPIRV.var"#383#384"{SPIRV.Mat{4, 4, Float32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{SPIRV.LayoutStrategy, 1}, Int64})
precompile(Tuple{typeof(Base.:(>=)), UInt64, Int64})
precompile(Tuple{typeof(SPIRV.alignment), SPIRV.ExplicitLayout, Type})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.ExplicitLayout, Type})
precompile(Tuple{typeof(Base.stride), SPIRV.ExplicitLayout, Type})
precompile(Tuple{typeof(SPIRV.alignment), SPIRV.VulkanLayout, Type})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(SPIRV.scalar_alignment), typeof(Base.max)}, Symbol})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(SPIRV.scalar_alignment), typeof(Base.max)}, Type{SPIRV.SPIRType}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(SPIRV.base_alignment), typeof(Base.max)}, Symbol})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(SPIRV.base_alignment), typeof(Base.max)}, Type{SPIRV.SPIRType}})
precompile(Tuple{typeof(SPIRV.alignment), SPIRV.VulkanLayout, SPIRV.StructType})
precompile(Tuple{typeof(SPIRV.base_alignment), SPIRV.IntegerType})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.VulkanLayout, Type})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.VulkanLayout, SPIRV.StructType})
precompile(Tuple{typeof(SPIRV.alignment), SPIRV.VulkanLayout, SPIRV.IntegerType})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.VulkanLayout, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.stride), SPIRV.VulkanLayout, Type})
precompile(Tuple{typeof(Base.stride), SPIRV.VulkanLayout, SPIRV.StructType})
precompile(Tuple{typeof(SPIRV.dataoffset), SPIRV.VulkanLayout, Type, Int64})
precompile(Tuple{typeof(SPIRV.base_alignment), SPIRV.VectorType})
precompile(Tuple{typeof(SPIRV.scalar_alignment), SPIRV.IntegerType})
precompile(Tuple{typeof(SPIRV.alignment), SPIRV.VulkanLayout, SPIRV.VectorType})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.VulkanLayout, SPIRV.VectorType})
precompile(Tuple{typeof(SPIRV.base_alignment), SPIRV.StructType})
precompile(Tuple{typeof(SPIRV.alignment), SPIRV.VulkanLayout, SPIRV.ArrayType})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.VulkanLayout, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.:(*)), UInt32, Int64})
precompile(Tuple{typeof(Base.stride), SPIRV.VulkanLayout, SPIRV.ArrayType})
precompile(Tuple{typeof(SPIRV.dataoffset), SPIRV.VulkanLayout, SPIRV.ArrayType, Int64})
precompile(Tuple{typeof(SPIRV.base_alignment), SPIRV.MatrixType})
precompile(Tuple{typeof(SPIRV.scalar_alignment), SPIRV.FloatType})
precompile(Tuple{typeof(SPIRV.alignment), SPIRV.VulkanLayout, SPIRV.MatrixType})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.VulkanLayout, SPIRV.MatrixType})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.VulkanLayout, SPIRV.FloatType})
precompile(Tuple{Type{SPIRV.TypeMetadata}, Array{DataType, 1}})
precompile(Tuple{typeof(SPIRV.add_type_layouts!), SPIRV.TypeMetadata, SPIRV.VulkanLayout})
precompile(Tuple{typeof(SPIRV.decorate!), SPIRV.Metadata, SPIRV.Decoration, Int64})
precompile(Tuple{typeof(SPIRV.decorations), SPIRV.TypeMetadata, SPIRV.StructType, Int64})
precompile(Tuple{Type{SPIRV.ShaderLayout}, SPIRV.TypeMetadata})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.ShaderLayout, Type})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.ShaderLayout, SPIRV.StructType})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.ShaderLayout, SPIRV.VectorType})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.ShaderLayout, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.:(+)), UInt32, Int64})
precompile(Tuple{typeof(Base.vect), SPIRV.StorageClass})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, Array{SPIRV.StorageClass, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Pair{DataType, Array{SPIRV.StorageClass, 1}}})
precompile(Tuple{Type{NamedTuple{(:storage_classes, :interfaces), T} where T<:Tuple}, Tuple{Base.Dict{DataType, Array{SPIRV.StorageClass, 1}}, Array{DataType, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:storage_classes, :interfaces), Tuple{Base.Dict{DataType, Array{SPIRV.StorageClass, 1}}, Array{DataType, 1}}}, Type{SPIRV.VulkanLayout}, Array{DataType, 1}})
precompile(Tuple{typeof(Base.push!), Base.Set{SPIRV.StorageClass}, SPIRV.StorageClass})
precompile(Tuple{typeof(Base.push!), Array{SPIRV.StructType, 1}, SPIRV.StructType})
precompile(Tuple{Type{SPIRV.TypeMetadata}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Base.getindex), SPIRV.VulkanLayout, DataType})
precompile(Tuple{typeof(Base.getindex), SPIRV.TypeMetadata, DataType})
precompile(Tuple{typeof(SPIRV.isinterface), SPIRV.VulkanLayout, SPIRV.StructType})
precompile(Tuple{typeof(SPIRV.has_decoration), SPIRV.TypeMetadata, SPIRV.StructType, SPIRV.Decoration})
precompile(Tuple{typeof(SPIRV.decorate!), Dictionaries.Dictionary{SPIRV.SPIRType, SPIRV.Metadata}, SPIRV.ArrayType, SPIRV.Decoration, Int64})
precompile(Tuple{typeof(Base.stride), SPIRV.VulkanLayout, SPIRV.FloatType})
precompile(Tuple{typeof(Base.vect), Type{SPIRV.Arr{4, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Arr{4, Tuple{Float64, Float64}}}})
precompile(Tuple{Type{SPIRV.ArrayType}, SPIRV.FloatType, SPIRV.Constant})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{Float64, Float64}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.length), Type{SPIRV.Arr{4, Tuple{Float64, Float64}}}})
precompile(Tuple{Type{SPIRV.ArrayType}, SPIRV.ArrayType, SPIRV.Constant})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Arr{4, Tuple{Float64, Float64}}}, SPIRV.ArrayType})
precompile(Tuple{typeof(SPIRV.decorations), SPIRV.TypeMetadata, SPIRV.ArrayType})
precompile(Tuple{typeof(SPIRV.has_decoration), SPIRV.Decorations, SPIRV.Decoration})
precompile(Tuple{typeof(Base.getproperty), SPIRV.Decorations, Symbol})
precompile(Tuple{typeof(Base.vect), Type{Int64}})
precompile(Tuple{Type{SPIRV.VulkanLayout}, SPIRV.VulkanAlignment, SPIRV.TypeMap, Base.Dict{SPIRV.IntegerType, Base.Set{SPIRV.StorageClass}}, Base.Set{SPIRV.StructType}})
precompile(Tuple{Type{NamedTuple{(:interfaces,), T} where T<:Tuple}, Tuple{Array{DataType, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:interfaces,), Tuple{Array{DataType, 1}}}, Type{SPIRV.VulkanLayout}, Array{DataType, 1}})
precompile(Tuple{typeof(Base.merge!), SPIRV.VulkanLayout, SPIRV.VulkanLayout})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.IntegerType})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.StructType})
precompile(Tuple{typeof(Base.getproperty), SPIRV.VulkanLayout, Symbol})
precompile(Tuple{typeof(Base.vect), SPIRV.StructType})
precompile(Tuple{Type{Base.Set{T} where T}, Array{SPIRV.StructType, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.Set{SPIRV.StructType}, Base.Set{SPIRV.StructType}})
precompile(Tuple{typeof(Base.:(*)), Int64, Type{SPIRV.LiteralType{Float32}}})
precompile(Tuple{SPIRV.var"##s648#354", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Base.convert), Type, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), NTuple{4, Int64}})
precompile(Tuple{SPIRV.var"##s648#370", Vararg{Any, 5}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Int16, 1}}})
precompile(Tuple{SPIRV.var"##s648#359", Vararg{Any, 6}})
precompile(Tuple{Type{Base.Returns{V} where V}, Float32})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Float32, 1}}})
precompile(Tuple{Base.Returns{Float32}, Any})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{Int64, UInt32}}, SPIRV.StructType})
precompile(Tuple{typeof(Base._all), Base.Fix2{typeof(Base.isequal), Type{Float32}}, Tuple{DataType, DataType}, Base.Colon})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{Float32, Float32}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.allequal), NTuple{8, DataType}})
precompile(Tuple{typeof(Base._all), Base.Fix2{typeof(Base.isequal), Type{Int64}}, NTuple{8, DataType}, Base.Colon})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#27#28"{SPIRV.TypeMap}, NTuple{8, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{NTuple{8, DataType}, SPIRV.var"#27#28"{SPIRV.TypeMap}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SPIRV.IntegerType, 1}, SPIRV.IntegerType, Base.Generator{NTuple{8, DataType}, SPIRV.var"#27#28"{SPIRV.TypeMap}}, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{UInt32, Float32}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{SPIRV.IntegerType, 1}, SPIRV.StructType, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{SPIRV.SPIRType, 1}, Base.Generator{NTuple{8, DataType}, SPIRV.var"#27#28"{SPIRV.TypeMap}}, Int64, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{Int64, UInt32, Int64, Tuple{UInt32, Float32}, Float32, Int64, Int64, Int64}}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Vec{3, Float32}}, SPIRV.VectorType})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{SPIRV.IntegerType, 1}, SPIRV.VectorType, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{Int64, SPIRV.Vec{3, Float32}}}, SPIRV.StructType})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Type{SPIRV.VectorType}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.VectorType, 1}, SPIRV.VectorType, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.VectorType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{SPIRV.StructType}, Array{SPIRV.VectorType, 1}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Base.RefValue{SPIRV.Vec{4, Float32}}}, SPIRV.StructType})
precompile(Tuple{Type{SPIRV.ArrayType}, SPIRV.IntegerType, Nothing})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Array{Int64, 1}}, SPIRV.ArrayType})
precompile(Tuple{Type{SPIRV.ArrayType}, SPIRV.VectorType, Nothing})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Array{SPIRV.Vec{3, Float32}, 1}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Arr{2, SPIRV.Vec{3, Float32}}}})
precompile(Tuple{typeof(Base.length), Type{SPIRV.Arr{2, SPIRV.Vec{3, Float32}}}})
precompile(Tuple{Type{SPIRV.ArrayType}, SPIRV.VectorType, SPIRV.Constant})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Arr{2, SPIRV.Vec{3, Float32}}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Arr{2, Int64}}})
precompile(Tuple{typeof(Base.length), Type{SPIRV.Arr{2, Int64}}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Arr{2, Int64}}, SPIRV.ArrayType})
precompile(Tuple{Type{SPIRV.ArrayType}, SPIRV.ArrayType, Nothing})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Array{SPIRV.Arr{2, Int64}, 1}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Arr{2, UInt8}}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{UInt8}, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.length), Type{SPIRV.Arr{2, UInt8}}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Arr{2, UInt8}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Array{SPIRV.Arr{2, UInt8}, 1}}, SPIRV.ArrayType})
precompile(Tuple{typeof(SPIRV.nrows), Type{SPIRV.Mat{2, 3, Float32}}})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Mat{2, 3, Float32}}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Vec{2, Float32}}, SPIRV.VectorType})
precompile(Tuple{typeof(SPIRV.ncols), Type{SPIRV.Mat{2, 3, Float32}}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Mat{2, 3, Float32}}, SPIRV.MatrixType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Mat{2, 5, Float32}}, SPIRV.MatrixType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Array{Int64, 2}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.hashindex), SPIRV.FloatType, Int64})
precompile(Tuple{typeof(Serialization.serialize), Tuple{Int64, UInt32}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Base.divrem), Int64, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Type{Tuple{Int64, UInt32}}, Array{UInt8, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.serialize), Tuple{Float32, Float32}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Tuple{Float32, Float32}}, Array{UInt8, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.serialize), Tuple{Int64, UInt32, Int64, Tuple{UInt32, Float32}, Float32, Int64, Int64, Int64}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Tuple{Int64, UInt32, Int64, Tuple{UInt32, Float32}, Float32, Int64, Int64, Int64}}, Array{UInt8, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.serialize), Tuple{Int64, SPIRV.Vec{3, Float32}}, SPIRV.NativeLayout})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, Tuple{Float32, Float32, Float32}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{DataType, DataType}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{DataType, DataType}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Serialization.deserialize), Type{Tuple{Int64, SPIRV.Vec{3, Float32}}}, Array{UInt8, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Int64}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{UInt64}}, true}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{DataType}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{DataType}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{DataType}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Vec{3, Float32}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{UInt64}}, true}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.serialize), Base.RefValue{SPIRV.Vec{4, Float32}}, SPIRV.NativeLayout})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, NTuple{4, Float32}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Base.first), Base.UnitRange{UInt64}})
precompile(Tuple{typeof(Base.length), Base.UnitRange{UInt64}})
precompile(Tuple{typeof(Serialization.deserialize), Type{Base.RefValue{SPIRV.Vec{4, Float32}}}, Array{UInt8, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(SPIRV.deserialize_mutable), Type{SPIRV.Vec{4, Float32}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{UInt64}}, true}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.serialize), Array{Int64, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Array{Int64, 1}}, Array{UInt8, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.serialize), Array{SPIRV.Vec{3, Float32}, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Array{SPIRV.Vec{3, Float32}, 1}}, Array{UInt8, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Float32, Float32, Float32}, 1}}})
precompile(Tuple{Base.Returns{Bool}, Any})
precompile(Tuple{typeof(Serialization.serialize), SPIRV.Arr{2, SPIRV.Vec{3, Float32}}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Arr{2, SPIRV.Vec{3, Float32}}}, Array{UInt8, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.serialize), Array{SPIRV.Arr{2, Int64}, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Array{SPIRV.Arr{2, Int64}, 1}}, Array{UInt8, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Base.map), typeof(Base.oneto), Tuple{Int64}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64}})
precompile(Tuple{typeof(SPIRV.unsigned_index), Int64})
precompile(Tuple{Base.Colon, UInt32, UInt32})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.tail), Tuple{UInt32, UInt32}})
precompile(Tuple{typeof(Base.map), typeof(tuple), Tuple{Tuple{Base.UnitRange{UInt32}, UInt32}, Tuple{Base.UnitRange{UInt32}, UInt32}}})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt32}, UInt32})
precompile(Tuple{typeof(Base.tail), Tuple{Tuple{Tuple{Base.UnitRange{UInt32}, UInt32}}, Tuple{Tuple{Base.UnitRange{UInt32}, UInt32}}}})
precompile(Tuple{typeof(Serialization.serialize), Array{SPIRV.Arr{2, UInt8}, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Array{SPIRV.Arr{2, UInt8}, 1}}, Array{UInt8, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, SPIRV.Vec{2, Int16}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{DataType, DataType, DataType}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{DataType, DataType, DataType}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Serialization.deserialize), Type{Int8}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{UInt64}}, true}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Vec{2, Int16}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{UInt64}}, true}, SPIRV.NativeLayout})
precompile(Tuple{Type{Base.Returns{V} where V}, Int16})
precompile(Tuple{Base.Returns{Int16}, Any})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, SPIRV.Mat{4, 4, Float32}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Mat{4, 4, Float32}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{UInt64}}, true}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.serialize), SPIRV.Mat{2, 3, Float32}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Mat{2, 3, Float32}}, Array{UInt8, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.serialize), SPIRV.Mat{2, 5, Float32}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Mat{2, 5, Float32}}, Array{UInt8, 1}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.serialize), Array{Int64, 2}, SPIRV.NativeLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Array{Int64, 2}}, Array{UInt8, 1}, SPIRV.NativeLayout, Tuple{Int64, Int64}})
precompile(Tuple{SPIRV.var"#383#384"{Tuple{Int64, UInt32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Serialization.serialize), Tuple{Int64, UInt32}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#385#386"{Tuple{Int64, UInt32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Type{Tuple{Int64, UInt32}}, Array{UInt8, 1}, SPIRV.NoPadding})
precompile(Tuple{typeof(SPIRV.deserialize_immutable), Type{Tuple{Int64, UInt32}}, Array{UInt8, 1}, SPIRV.NoPadding})
precompile(Tuple{typeof(Serialization.deserialize), Type{Int64}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.NoPadding})
precompile(Tuple{typeof(Serialization.deserialize), Type{UInt32}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#383#384"{Tuple{Float32, Float32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Serialization.serialize), Tuple{Float32, Float32}, SPIRV.NoPadding})
precompile(Tuple{typeof(Serialization.deserialize), Type{Tuple{Float32, Float32}}, Array{UInt8, 1}, SPIRV.NoPadding})
precompile(Tuple{typeof(Serialization.deserialize), Type{Int32}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#383#384"{Tuple{UInt32, Float32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.sum), NTuple{8, Int64}})
precompile(Tuple{typeof(Serialization.serialize), Tuple{Int64, UInt32, Int64, Tuple{UInt32, Float32}, Float32, Int64, Int64, Int64}, SPIRV.NoPadding})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, Int64, SPIRV.NoPadding})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, UInt32, SPIRV.NoPadding})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, Tuple{UInt32, Float32}, SPIRV.NoPadding})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, Float32, SPIRV.NoPadding})
precompile(Tuple{typeof(Base.Iterators.enumerate), NTuple{8, DataType}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{NTuple{8, DataType}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{NTuple{8, DataType}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Serialization.deserialize), Type{Tuple{Int64, UInt32, Int64, Tuple{UInt32, Float32}, Float32, Int64, Int64, Int64}}, Array{UInt8, 1}, SPIRV.NoPadding})
precompile(Tuple{typeof(SPIRV.deserialize_immutable), Type{Tuple{Int64, UInt32, Int64, Tuple{UInt32, Float32}, Float32, Int64, Int64, Int64}}, Array{UInt8, 1}, SPIRV.NoPadding})
precompile(Tuple{typeof(Serialization.deserialize), Type{Tuple{UInt32, Float32}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.NoPadding})
precompile(Tuple{typeof(Serialization.deserialize), Type{Float32}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.NoPadding})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.sum), NTuple{5, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.sum), NTuple{6, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.sum), NTuple{7, Int64}})
precompile(Tuple{typeof(Serialization.serialize), Tuple{Int64, SPIRV.Vec{3, Float32}}, SPIRV.NoPadding})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.NoPadding, Type{Tuple{Int64, SPIRV.Vec{3, Float32}}}})
precompile(Tuple{typeof(Base.ntuple), SPIRV.var"#383#384"{Tuple{Int64, SPIRV.Vec{3, Float32}}, SPIRV.NoPadding}, Int64})
precompile(Tuple{SPIRV.var"#383#384"{Tuple{Float32, Float32, Float32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{SPIRV.var"#383#384"{SPIRV.Vec{3, Float32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.NoPadding, Type{SPIRV.Vec{3, Float32}}})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, Tuple{Float32, Float32, Float32}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#385#386"{Tuple{Int64, SPIRV.Vec{3, Float32}}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Type{Tuple{Int64, SPIRV.Vec{3, Float32}}}, Array{UInt8, 1}, SPIRV.NoPadding})
precompile(Tuple{typeof(SPIRV.deserialize_immutable), Type{Tuple{Int64, SPIRV.Vec{3, Float32}}}, Array{UInt8, 1}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#385#386"{SPIRV.Vec{3, Float32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Vec{3, Float32}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.NoPadding})
precompile(Tuple{typeof(Serialization.serialize), Base.RefValue{SPIRV.Vec{4, Float32}}, SPIRV.NoPadding})
precompile(Tuple{typeof(SPIRV.concrete_datasize), SPIRV.NoPadding, Base.RefValue{SPIRV.Vec{4, Float32}}})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.NoPadding, Type{Base.RefValue{SPIRV.Vec{4, Float32}}}})
precompile(Tuple{typeof(Base.ntuple), SPIRV.var"#383#384"{Base.RefValue{SPIRV.Vec{4, Float32}}, SPIRV.NoPadding}, Int64})
precompile(Tuple{SPIRV.var"#383#384"{SPIRV.Vec{4, Float32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(SPIRV.datasize), SPIRV.NoPadding, Type{SPIRV.Vec{4, Float32}}})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, NTuple{4, Float32}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#385#386"{Base.RefValue{SPIRV.Vec{4, Float32}}, SPIRV.NoPadding}, Int64})
precompile(Tuple{SPIRV.var"#385#386"{SPIRV.Vec{4, Float32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Base.checkbounds), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.range), Int64, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Type{Base.RefValue{SPIRV.Vec{4, Float32}}}, Array{UInt8, 1}, SPIRV.NoPadding})
precompile(Tuple{typeof(SPIRV.deserialize_mutable), Type{SPIRV.Vec{4, Float32}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.NoPadding})
precompile(Tuple{typeof(Serialization.serialize), Array{Int64, 1}, SPIRV.NoPadding})
precompile(Tuple{typeof(Serialization.deserialize), Type{Array{Int64, 1}}, Array{UInt8, 1}, SPIRV.NoPadding})
precompile(Tuple{typeof(Serialization.serialize), Array{SPIRV.Vec{3, Float32}, 1}, SPIRV.NoPadding})
precompile(Tuple{typeof(Serialization.deserialize), Type{Array{SPIRV.Vec{3, Float32}, 1}}, Array{UInt8, 1}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#383#384"{Tuple{SPIRV.Vec{3, Float32}, SPIRV.Vec{3, Float32}}, SPIRV.NoPadding}, Int64})
precompile(Tuple{SPIRV.var"#383#384"{SPIRV.Arr{2, SPIRV.Vec{3, Float32}}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Serialization.serialize), SPIRV.Arr{2, SPIRV.Vec{3, Float32}}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#385#386"{SPIRV.Arr{2, SPIRV.Vec{3, Float32}}, SPIRV.NoPadding}, Int64})
precompile(Tuple{SPIRV.var"#385#386"{Tuple{SPIRV.Vec{3, Float32}, SPIRV.Vec{3, Float32}}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Arr{2, SPIRV.Vec{3, Float32}}}, Array{UInt8, 1}, SPIRV.NoPadding})
precompile(Tuple{typeof(SPIRV.deserialize_immutable), Type{Tuple{SPIRV.Vec{3, Float32}, SPIRV.Vec{3, Float32}}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#383#384"{Tuple{Int64, Int64}, SPIRV.NoPadding}, Int64})
precompile(Tuple{SPIRV.var"#383#384"{SPIRV.Arr{2, Int64}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Serialization.serialize), Array{SPIRV.Arr{2, Int64}, 1}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#385#386"{SPIRV.Arr{2, Int64}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Type{Array{SPIRV.Arr{2, Int64}, 1}}, Array{UInt8, 1}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#383#384"{Tuple{UInt8, UInt8}, SPIRV.NoPadding}, Int64})
precompile(Tuple{SPIRV.var"#383#384"{SPIRV.Arr{2, UInt8}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Serialization.serialize), Array{SPIRV.Arr{2, UInt8}, 1}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#385#386"{SPIRV.Arr{2, UInt8}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Type{Array{SPIRV.Arr{2, UInt8}, 1}}, Array{UInt8, 1}, SPIRV.NoPadding})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, SPIRV.Vec{2, Int16}, SPIRV.NoPadding})
precompile(Tuple{typeof(Serialization.deserialize), Type{Int8}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#385#386"{SPIRV.Vec{2, Int16}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Vec{2, Int16}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.NoPadding})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, SPIRV.Mat{4, 4, Float32}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#385#386"{SPIRV.Mat{4, 4, Float32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Mat{4, 4, Float32}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#383#384"{Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}}, SPIRV.NoPadding}, Int64})
precompile(Tuple{SPIRV.var"#383#384"{SPIRV.Mat{2, 3, Float32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Serialization.serialize), SPIRV.Mat{2, 3, Float32}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#385#386"{SPIRV.Mat{2, 3, Float32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Mat{2, 3, Float32}}, Array{UInt8, 1}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#383#384"{NTuple{5, Tuple{Float32, Float32}}, SPIRV.NoPadding}, Int64})
precompile(Tuple{SPIRV.var"#383#384"{SPIRV.Mat{2, 5, Float32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Serialization.serialize), SPIRV.Mat{2, 5, Float32}, SPIRV.NoPadding})
precompile(Tuple{SPIRV.var"#385#386"{SPIRV.Mat{2, 5, Float32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Mat{2, 5, Float32}}, Array{UInt8, 1}, SPIRV.NoPadding})
precompile(Tuple{typeof(Serialization.serialize), Array{Int64, 2}, SPIRV.NoPadding})
precompile(Tuple{typeof(Serialization.deserialize), Type{Array{Int64, 2}}, Array{UInt8, 1}, SPIRV.NoPadding, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Serialization.serialize), Tuple{Int64, UInt32}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Base.sizehint!), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(SPIRV.padding), SPIRV.VulkanLayout, Type, Int64})
precompile(Tuple{typeof(SPIRV.pad!), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Type{Tuple{Int64, UInt32}}, Array{UInt8, 1}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Base.view), Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Serialization.deserialize), Type{Int64}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{UInt32}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.serialize), Tuple{Float32, Float32}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Tuple{Float32, Float32}}, Array{UInt8, 1}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Float32}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Int32}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.serialize), Tuple{Int64, UInt32, Int64, Tuple{UInt32, Float32}, Float32, Int64, Int64, Int64}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(SPIRV.alignment), SPIRV.VulkanLayout, SPIRV.FloatType})
precompile(Tuple{typeof(SPIRV.base_alignment), SPIRV.FloatType})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, Int64, SPIRV.VulkanLayout})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, UInt32, SPIRV.VulkanLayout})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, Tuple{UInt32, Float32}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(SPIRV.serialize!), Array{UInt8, 1}, Float32, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Tuple{Int64, UInt32, Int64, Tuple{UInt32, Float32}, Float32, Int64, Int64, Int64}}, Array{UInt8, 1}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Tuple{UInt32, Float32}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Base.view), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Serialization.serialize), Tuple{Int64, SPIRV.Vec{3, Float32}}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Tuple{Int64, SPIRV.Vec{3, Float32}}}, Array{UInt8, 1}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Vec{3, Float32}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.serialize), Base.RefValue{SPIRV.Vec{4, Float32}}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Base.RefValue{SPIRV.Vec{4, Float32}}}, Array{UInt8, 1}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Vec{4, Float32}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.serialize), Array{Int64, 1}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Base.stride), SPIRV.VulkanLayout, SPIRV.IntegerType})
precompile(Tuple{typeof(Serialization.deserialize), Type{Array{Int64, 1}}, Array{UInt8, 1}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.serialize), Array{SPIRV.Vec{3, Float32}, 1}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Array{SPIRV.Vec{3, Float32}, 1}}, Array{UInt8, 1}, SPIRV.VulkanLayout})
precompile(Tuple{Type{Array{SPIRV.Vec{3, Float32}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.Vec{3, Float32}, 1}, SPIRV.Vec{3, Float32}, Int64})
precompile(Tuple{typeof(Serialization.serialize), SPIRV.Arr{2, SPIRV.Vec{3, Float32}}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Arr{2, SPIRV.Vec{3, Float32}}}, Array{UInt8, 1}, SPIRV.VulkanLayout})
precompile(Tuple{SPIRV.var"#402#403"{SPIRV.Vec{3, Float32}, Array{UInt8, 1}, SPIRV.VulkanLayout, Int64, Int64}, Int64})
precompile(Tuple{typeof(Serialization.serialize), Array{SPIRV.Arr{2, Int64}, 1}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Array{SPIRV.Arr{2, Int64}, 1}}, Array{UInt8, 1}, SPIRV.VulkanLayout})
precompile(Tuple{Type{Array{SPIRV.Arr{2, Int64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Arr{2, Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.VulkanLayout})
precompile(Tuple{SPIRV.var"#402#403"{Int64, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.VulkanLayout, Int64, Int64}, Int64})
precompile(Tuple{Type{SPIRV.Arr{2, Int64}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.Arr{2, Int64}, 1}, SPIRV.Arr{2, Int64}, Int64})
precompile(Tuple{typeof(Serialization.serialize), Array{SPIRV.Arr{2, UInt8}, 1}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Array{SPIRV.Arr{2, UInt8}, 1}}, Array{UInt8, 1}, SPIRV.VulkanLayout})
precompile(Tuple{Type{Array{SPIRV.Arr{2, UInt8}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Arr{2, UInt8}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.VulkanLayout})
precompile(Tuple{SPIRV.var"#402#403"{UInt8, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.VulkanLayout, Int64, Int64}, Int64})
precompile(Tuple{Type{SPIRV.Arr{2, UInt8}}, Tuple{UInt8, UInt8}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.Arr{2, UInt8}, 1}, SPIRV.Arr{2, UInt8}, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Type{Int8}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Vec{2, Int16}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{NTuple{4, Float32}, 1}}})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Mat{4, 4, Float32}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.serialize), SPIRV.Mat{2, 3, Float32}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Float32, Float32}, 1}}})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Mat{2, 3, Float32}}, Array{UInt8, 1}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.serialize), SPIRV.Mat{2, 5, Float32}, SPIRV.VulkanLayout})
precompile(Tuple{SPIRV.var"#383#384"{NTuple{5, Float32}, SPIRV.NoPadding}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{NTuple{5, Float32}, 1}}})
precompile(Tuple{typeof(Serialization.deserialize), Type{SPIRV.Mat{2, 5, Float32}}, Array{UInt8, 1}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.serialize), Array{Int64, 2}, SPIRV.VulkanLayout})
precompile(Tuple{typeof(Serialization.deserialize), Type{Array{Int64, 2}}, Array{UInt8, 1}, SPIRV.VulkanLayout, Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:overwrite,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:overwrite,), Tuple{Bool}}, typeof(Accessors.setmacro), Function, Expr})
precompile(Tuple{typeof(Accessors.parse_obj_optic), Expr})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Expr, Base.Dict{Any, Any}})
precompile(Tuple{typeof(MacroTools.match), QuoteNode, QuoteNode, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Accessors.parse_obj_optics), Symbol})
precompile(Tuple{typeof(MacroTools.match_inner), Expr, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{Type{SPIRV.ResultID}, UInt32})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{SPIRV.ResultID, 1}, Array{SPIRV.ResultID, 1}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Union{Expr, LineNumberNode}, 1}}})
precompile(Tuple{typeof(SPIRV.generate_ir), Expr})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Expr})
precompile(Tuple{typeof(Base.deepcopy_internal), Symbol, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(SPIRV.is_function_macro), LineNumberNode})
precompile(Tuple{typeof(SPIRV.is_function_macro), Expr})
precompile(Tuple{typeof(Base.insert!), SPIRV.Bindings, Symbol, SPIRV.ResultID})
precompile(Tuple{typeof(Base.getindex), SPIRV.Bindings, Symbol})
precompile(Tuple{SPIRV.var"#458#469", Symbol})
precompile(Tuple{Type{Array{SPIRV.ResultID, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SPIRV.ResultID, 1}, SPIRV.ResultID, Base.Generator{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.var"#458#469"}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{SPIRV.var"#455#466", Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SPIRV.ResultID, 1}, SPIRV.ResultID, Base.Generator{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.var"#455#466"}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.:(&)), Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.push!), Array{UInt64, 1}, UInt64})
precompile(Tuple{typeof(Base.getindex), Array{UInt64, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Expr, 1}, Int64})
precompile(Tuple{typeof(Base.isequal), Expr, Expr})
precompile(Tuple{typeof(Base.getindex), Array{SPIRV.ResultID, 1}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Union{Expr, LineNumberNode}, 1}, LineNumberNode})
precompile(Tuple{typeof(Base.push!), Array{Union{Expr, LineNumberNode}, 1}, Expr})
precompile(Tuple{typeof(Base.iterate), Dictionaries.Dictionary{Symbol, SPIRV.Bindings}})
precompile(Tuple{typeof(Base.iterate), Dictionaries.Dictionary{Symbol, SPIRV.Bindings}, Int64})
precompile(Tuple{typeof(Base.pairs), SPIRV.Bindings})
precompile(Tuple{typeof(Base.iterate), Dictionaries.PairDictionary{Symbol, SPIRV.ResultID, Dictionaries.Dictionary{Symbol, SPIRV.ResultID}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, SPIRV.ResultID}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, SPIRV.ResultID}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Dictionaries.PairDictionary{Symbol, SPIRV.ResultID, Dictionaries.Dictionary{Symbol, SPIRV.ResultID}}, Int64})
precompile(Tuple{typeof(Base.lastindex), SPIRV.Module})
precompile(Tuple{typeof(Base.getindex), SPIRV.Module, Int64})
precompile(Tuple{Type{Accessors.PropertyLens{:result_id}}})
precompile(Tuple{typeof(Accessors.opticcompose), Accessors.PropertyLens{:result_id}})
precompile(Tuple{typeof(Base.:(!=)), NTuple{4, Symbol}, NTuple{4, Symbol}})
precompile(Tuple{typeof(Accessors.set), SPIRV.Instruction, Accessors.PropertyLens{:result_id}, SPIRV.ResultID})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:opcode, :type_id, :result_id, :arguments), Tuple{SPIRV.OpCode, SPIRV.ResultID, SPIRV.ResultID, Array{Any, 1}}}, NamedTuple{(:opcode, :type_id, :result_id, :arguments), Tuple{SPIRV.OpCode, SPIRV.ResultID, SPIRV.ResultID, Array{Any, 1}}}, SPIRV.Instruction, NamedTuple{(:result_id,), Tuple{SPIRV.ResultID}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:opcode, :type_id, :result_id, :arguments), Tuple{SPIRV.OpCode, SPIRV.ResultID, SPIRV.ResultID, Array{Any, 1}}}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, SPIRV.ResultID, SPIRV.ResultID, Array{Any, 1}})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Module, SPIRV.Instruction, Int64})
precompile(Tuple{typeof(Base.getproperty), SPIRV.Instruction, Symbol})
precompile(Tuple{typeof(Base.:(∘)), Type, Type})
precompile(Tuple{typeof(Base.convert), Type{Type{AbstractTrees.PreOrderState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}}, Type{AbstractTrees.PreOrderState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}})
precompile(Tuple{typeof(Base.convert), Type{Type{AbstractTrees.TreeCursor{N, P} where P where N}}, Type{AbstractTrees.TreeCursor{N, P} where P where N}})
precompile(Tuple{typeof(Base.:(==)), Base.IndexLinear, Base.IndexLinear})
precompile(Tuple{typeof(SPIRV.renumber_ssa), SPIRV.Module})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:opcode, :type_id, :result_id, :arguments), Tuple{SPIRV.OpCode, Nothing, Nothing, Array{Any, 1}}}, NamedTuple{(:opcode, :type_id, :result_id, :arguments), Tuple{SPIRV.OpCode, Nothing, Nothing, Array{Any, 1}}}, SPIRV.Instruction, NamedTuple{(:arguments,), Tuple{Array{Any, 1}}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:opcode, :type_id, :result_id, :arguments), Tuple{SPIRV.OpCode, Nothing, Nothing, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.push!), Array{SPIRV.Instruction, 1}, SPIRV.Instruction})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:opcode, :type_id, :result_id, :arguments), Tuple{SPIRV.OpCode, Nothing, SPIRV.ResultID, Array{Any, 1}}}, NamedTuple{(:opcode, :type_id, :result_id, :arguments), Tuple{SPIRV.OpCode, Nothing, SPIRV.ResultID, Array{Any, 1}}}, SPIRV.Instruction, NamedTuple{(:result_id,), Tuple{SPIRV.ResultID}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:opcode, :type_id, :result_id, :arguments), Tuple{SPIRV.OpCode, Nothing, SPIRV.ResultID, Array{Any, 1}}}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, SPIRV.ResultID, Array{Any, 1}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Graphs.SimpleGraphs.SimpleDiGraph{Int64}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Array{Int64, 1}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Int64, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:opcode, :type_id, :result_id, :arguments), Tuple{SPIRV.OpCode, SPIRV.ResultID, SPIRV.ResultID, Array{Any, 1}}}, NamedTuple{(:opcode, :type_id, :result_id, :arguments), Tuple{SPIRV.OpCode, SPIRV.ResultID, SPIRV.ResultID, Array{Any, 1}}}, SPIRV.Instruction, NamedTuple{(:type_id,), Tuple{SPIRV.ResultID}}})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.Module, SPIRV.Module})
precompile(Tuple{typeof(Base.length), SPIRV.Module})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.ResultID, SPIRV.ResultID})
precompile(Tuple{typeof(SPIRV.id_bound), SPIRV.Module})
precompile(Tuple{typeof(Base.getproperty), SPIRV.Module, Symbol})
precompile(Tuple{typeof(SPIRV.compute_id_bound), Array{SPIRV.Instruction, 1}})
precompile(Tuple{typeof(Base.:(==)), SPIRV.ResultID, SPIRV.ResultID})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Int64, 1}, SPIRV.var"#170#171"{Array{Base.Set{Int64}, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Int64, 1}, SPIRV.var"#170#171"{Array{Base.Set{Int64}, 1}}}, Int64})
precompile(Tuple{typeof(Base.intersect), Base.Set{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Set{Int64}, 1}, Base.Set{Int64}, Int64})
precompile(Tuple{typeof(Base.push!), Base.Set{Int64}, Int64})
precompile(Tuple{typeof(Base.hash), Base.Set{Int64}})
precompile(Tuple{typeof(Base.:(!=)), UInt64, UInt64})
precompile(Tuple{typeof(Base.intersect), Base.Set{Int64}, Base.Set{Int64}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, Nothing, SPIRV.ResultID, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, String}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, SPIRV.ResultID})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, SPIRV.ResultID, SPIRV.ResultID})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, SPIRV.ResultID, SPIRV.ResultID})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, SPIRV.ResultID, SPIRV.ResultID, SPIRV.FunctionControl, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.FunctionControl, SPIRV.ResultID}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.ResultID, SPIRV.ResultID}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, Nothing, Array{SPIRV.ResultID, 1}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, Nothing})
precompile(Tuple{typeof(Base.getindex), Type{SPIRV.Instruction}, SPIRV.Instruction, SPIRV.Instruction, SPIRV.Instruction, Vararg{SPIRV.Instruction}})
precompile(Tuple{Type{SPIRV.Module}, SPIRV.ModuleMetadata, Array{SPIRV.Instruction, 1}})
precompile(Tuple{Type{SPIRV.FunctionType}, SPIRV.BooleanType, Array{Any, 1}})
precompile(Tuple{typeof(Base.in), SPIRV.Composite, Tuple{SPIRV.Id, SPIRV.Id}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, SPIRV.Composite})
precompile(Tuple{typeof(ResultTypes.iserror), ResultTypes.Result{Bool, SPIRV.ValidationError}})
precompile(Tuple{typeof(ResultTypes.unwrap_error), ResultTypes.Result{Bool, SPIRV.ValidationError}})
precompile(Tuple{typeof(Base.getproperty), SPIRV.ValidationError, Symbol})
precompile(Tuple{typeof(Base.contains), String, String})
precompile(Tuple{typeof(SPIRV.fill_phi_branches!), SPIRV.IR})
precompile(Tuple{typeof(Base.sprint), Function, ArgumentError})
precompile(Tuple{typeof(Base.showerror), Base.GenericIOBuffer{Array{UInt8, 1}}, ArgumentError})
precompile(Tuple{SPIRV.var"#451#462", Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.var"#451#462"}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{SPIRV.var"#450#461", Float32})
precompile(Tuple{Type{Array{Float32, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float32, 1}, Float32, Base.Generator{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.var"#450#461"}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{SPIRV.var"#454#465", Expr})
precompile(Tuple{SPIRV.var"#459#470", Expr})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, SPIRV.ResultID, Int64, Vararg{Int64}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, SPIRV.ResultID, SPIRV.ResultID, Float32})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, SPIRV.ResultID, SPIRV.ResultID, Vararg{Any}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, SPIRV.ResultID, Array{SPIRV.ResultID, 1}})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, Int64, SPIRV.OperandInfo})
precompile(Tuple{Type{SPIRV.IntegerType}, Int64, Int64})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, Float32, SPIRV.OperandInfo})
precompile(Tuple{typeof(Base.reinterpret), Type{Float32}, Float32})
precompile(Tuple{typeof(Base._array_for), Type{SPIRV.IntegerType}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SPIRV.IntegerType, 1}, SPIRV.IntegerType, Base.Generator{Array{Any, 1}, SPIRV.var"#123#124"}, Int64})
precompile(Tuple{Type{SPIRV.FunctionType}, SPIRV.FloatType, Array{SPIRV.IntegerType, 1}})
precompile(Tuple{Type{SPIRV.FunctionType}, SPIRV.IntegerType, Array{SPIRV.IntegerType, 1}})
precompile(Tuple{SPIRV.var"#100#101"{SPIRV.GlobalsInfo}, SPIRV.IntegerType})
precompile(Tuple{SPIRV.var"#453#464", Expr})
precompile(Tuple{Type{Array{Expr, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.var"#453#464"}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{SPIRV.var"#450#461", Expr})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.var"#450#461"}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, Nothing, SPIRV.Capability})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, SPIRV.ResultID, SPIRV.ResultID, Float16})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, Float16, SPIRV.OperandInfo})
precompile(Tuple{Type{UInt16}, Float16})
precompile(Tuple{typeof(Base.reinterpret), Type{Float16}, UInt16})
precompile(Tuple{Type{SPIRV.Constant}, Float16, SPIRV.FloatType, Bool})
precompile(Tuple{typeof(Base.hash), Float16, UInt64})
precompile(Tuple{typeof(Base.reinterpret), Type{UInt16}, Float16})
precompile(Tuple{Type{UInt32}, UInt16})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.FloatType, SPIRV.ResultID, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.ResultID}})
precompile(Tuple{typeof(Base._array_for), Type{SPIRV.BooleanType}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SPIRV.BooleanType, 1}, SPIRV.BooleanType, Base.Generator{Array{Any, 1}, SPIRV.var"#123#124"}, Int64})
precompile(Tuple{Type{SPIRV.FunctionType}, SPIRV.FloatType, Array{SPIRV.BooleanType, 1}})
precompile(Tuple{SPIRV.var"#100#101"{SPIRV.GlobalsInfo}, SPIRV.BooleanType})
precompile(Tuple{SPIRV.var"#458#469", Expr})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{SPIRV.ResultID, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.var"#458#469"}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.SelectionControl}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.ResultID, SPIRV.LoopControl}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, SPIRV.ResultID, SPIRV.ResultID, Int32})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, Int32, SPIRV.OperandInfo})
precompile(Tuple{typeof(Base.reinterpret), Type{Int32}, Int32})
precompile(Tuple{SPIRV.var"#451#462", Expr})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.var"#451#462"}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{SPIRV.var"#451#462", Symbol})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Expr, 1}, SPIRV.ResultID, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.var"#451#462"}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{SPIRV.var"#455#466", Expr})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.var"#455#466"}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, Nothing, SPIRV.ResultID, SPIRV.StorageClass, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.StorageClass, SPIRV.ResultID}})
precompile(Tuple{Type{SPIRV.Instruction}, SPIRV.OpCode, SPIRV.ResultID, SPIRV.ResultID, SPIRV.StorageClass})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(Requires.loaded), Base.PkgId})
precompile(Tuple{typeof(Requires.callbacks), Base.PkgId})
precompile(Tuple{Type{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.push!), Array{Symbol, 1}, Symbol})
precompile(Tuple{Type{SPIRV.Module}, String})
precompile(Tuple{typeof(SPIRV.dependent_functions), SPIRV.IR, SPIRV.ResultID})
precompile(Tuple{typeof(Base._unique_from), Base.Generator{AbstractTrees.PreOrderDFS{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, AbstractTrees.var"#15#16"}, SPIRV.var"#152#153"}, Array{SPIRV.FunctionDefinition, 1}, Base.Set{SPIRV.FunctionDefinition}, AbstractTrees.PreOrderState{AbstractTrees.ImplicitCursor{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Union{Nothing, Tuple{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Int64}}}}})
precompile(Tuple{typeof(Base.unique_from), Base.Generator{AbstractTrees.PreOrderDFS{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, AbstractTrees.var"#15#16"}, SPIRV.var"#152#153"}, Array{SPIRV.FunctionDefinition, 1}, Base.Set{SPIRV.FunctionDefinition}, AbstractTrees.PreOrderState{AbstractTrees.ImplicitCursor{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Union{Nothing, Tuple{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Int64}}}}})
precompile(Tuple{typeof(Base.iterate), AbstractTrees.PreOrderDFS{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, AbstractTrees.var"#15#16"}, AbstractTrees.PreOrderState{AbstractTrees.ImplicitCursor{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Union{Nothing, Tuple{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Int64}}}}})
precompile(Tuple{SPIRV.var"#152#153", AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}})
precompile(Tuple{typeof(Base.in!), SPIRV.FunctionDefinition, Base.Set{SPIRV.FunctionDefinition}})
precompile(Tuple{typeof(Base.push!), Array{SPIRV.FunctionDefinition, 1}, SPIRV.FunctionDefinition})
precompile(Tuple{typeof(AbstractTrees.nextsibling), AbstractTrees.ImplicitCursor{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Union{Nothing, Tuple{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Int64}}}})
precompile(Tuple{typeof(AbstractTrees.children), AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Set{SPIRV.ResultID}, AbstractTrees.var"#10#11"{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}}}, Int64})
precompile(Tuple{Type{AbstractTrees.ImplicitCursor{N, P, S} where S where P where N}, AbstractTrees.ImplicitCursor{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Union{Nothing, Tuple{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Int64}}}, AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Tuple{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Int64}})
precompile(Tuple{Type{AbstractTrees.PreOrderState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}, AbstractTrees.ImplicitCursor{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Union{Nothing, Tuple{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Int64}}}})
precompile(Tuple{Type{AbstractTrees.ImplicitCursor{N, P, S} where S where P where N}, AbstractTrees.ImplicitCursor{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Union{Nothing, Tuple{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Int64}}}, AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Nothing})
precompile(Tuple{Type{Base.Set{T} where T}, Array{SPIRV.FunctionDefinition, 1}})
precompile(Tuple{Type{Base.Set{T} where T}, SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.FunctionDefinition}})
precompile(Tuple{typeof(Base.:(==)), Base.Set{SPIRV.FunctionDefinition}, Base.Set{Any}})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.FunctionDefinition}, SPIRV.ResultID})
precompile(Tuple{typeof(Base.vect), SPIRV.FunctionDefinition})
precompile(Tuple{typeof(Base.:(==)), Array{SPIRV.FunctionDefinition, 1}, Array{SPIRV.FunctionDefinition, 1}})
precompile(Tuple{typeof(Base.isequal), SPIRV.FloatType, SPIRV.FloatType})
precompile(Tuple{Type{AbstractTrees.ImplicitCursor{N, P, S} where S where P where N}, AbstractTrees.ImplicitCursor{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Nothing, Any}, AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Tuple{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Int64}})
precompile(Tuple{Type{AbstractTrees.ImplicitCursor{N, P, S} where S where P where N}, AbstractTrees.ImplicitCursor{AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Nothing, Any}, AbstractTrees.IndexNode{SPIRV.StaticCallTree, SPIRV.ResultID}, Nothing})
precompile(Tuple{typeof(Base.length), Array{SPIRV.FunctionDefinition, 1}})
precompile(Tuple{typeof(Base.in), SPIRV.FunctionDefinition, Array{SPIRV.FunctionDefinition, 1}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{SPIRV.var"#140#141", typeof(Base.max)}, Symbol})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{SPIRV.var"#140#141", typeof(Base.max)}, Type{Pair{Int64, Int64}}})
precompile(Tuple{Type{SPIRV.EdgeClassification{E} where E<:(Graphs.AbstractEdge{T} where T)}, SPIRV.DeltaGraph{Int64}})
precompile(Tuple{typeof(Base.iterate), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}})
precompile(Tuple{typeof(Base.in), Graphs.SimpleGraphs.SimpleEdge{Int64}, Base.Set{Graphs.SimpleGraphs.SimpleEdge{Int64}}})
precompile(Tuple{typeof(Base.iterate), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.push!), Base.Set{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Graphs.SimpleGraphs.SimpleEdge{Int64}})
precompile(Tuple{typeof(Base.getproperty), SPIRV.EdgeClassification{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Symbol})
precompile(Tuple{typeof(Base.isempty), Base.Set{Graphs.SimpleGraphs.SimpleEdge{Int64}}})
precompile(Tuple{typeof(Base.length), Base.Set{Graphs.SimpleGraphs.SimpleEdge{Int64}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{6, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{8, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{Type{Graphs.SimpleGraphs.SimpleEdge{T} where T<:Integer}, Pair{Int64, Int64}})
precompile(Tuple{Type{Base.Set{T} where T}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.Set{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Base.Set{Graphs.SimpleGraphs.SimpleEdge{Int64}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{9, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.vect), Pair{Int64, Int64}, Vararg{Pair{Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Pair{Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Graphs.SimpleGraphs.SimpleEdge{T} where T<:Integer}, Tuple{Array{Pair{Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Graphs.SimpleGraphs.SimpleEdge{T} where T<:Integer}, Tuple{Array{Pair{Int64, Int64}, 1}}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{11, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(SPIRV.dominators), SPIRV.DeltaGraph{Int64}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, Base.var"#309#310"{typeof(Base.length)}}}, Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, Base.var"#309#310"{typeof(Base.length)}}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{Base.var"#309#310"{typeof(Base.length)}, Base.BottomRF{typeof(Base._rf_findmin)}}, Symbol})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{Base.var"#309#310"{typeof(Base.length)}, Base.BottomRF{typeof(Base._rf_findmin)}}, Type{Pair{Int64, Base.Set{Int64}}}})
precompile(Tuple{typeof(Base.intersect), Vararg{Base.Set{Int64}, 4}})
precompile(Tuple{typeof(Base.intersect), Base.Set{Int64}, Base.Set{Int64}, Base.Set{Int64}})
precompile(Tuple{Type{Base.Set{T} where T}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vect), Base.Set{Int64}, Vararg{Base.Set{Int64}}})
precompile(Tuple{typeof(Base.:(==)), Array{Base.Set{Int64}, 1}, Array{Base.Set{Int64}, 1}})
precompile(Tuple{typeof(SPIRV.backedges), SPIRV.DeltaGraph{Int64}})
precompile(Tuple{Type{Base.Set{T} where T}, Base.Set{Graphs.SimpleGraphs.SimpleEdge{Int64}}})
precompile(Tuple{Type{SPIRV.DominatorNode}, Nothing})
precompile(Tuple{typeof(Base.:(∘)), Type, Function})
precompile(Tuple{typeof(Base.convert), Type{Type{AbstractTrees.PostOrderState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}}, Type{AbstractTrees.PostOrderState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}})
precompile(Tuple{typeof(Base.:(∘)), Function, Type})
precompile(Tuple{typeof(Base.convert), Type{Base.ComposedFunction{Type{AbstractTrees.PostOrderState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}, typeof(AbstractTrees.descendleft)}}, Base.ComposedFunction{Type{AbstractTrees.PostOrderState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}, typeof(AbstractTrees.descendleft)}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:by,), Tuple{SPIRV.var"#280#281"}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.getproperty), Base.Order.By{SPIRV.var"#280#281", Base.Order.ForwardOrdering}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Order.Lt{Base.Sort.var"#26#27"{Base.Order.By{SPIRV.var"#280#281", Base.Order.ForwardOrdering}}}, Symbol})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{SPIRV.SimpleTree{SPIRV.DominatorNode}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Base.Some{Nothing}, Symbol})
precompile(Tuple{typeof(SPIRV.acyclic_region), SPIRV.DeltaGraph{Int64}, Int64})
precompile(Tuple{Base.var"##_#98", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Base.ComposedFunction{Base.ComposedFunction{Type{AbstractTrees.PostOrderState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}, typeof(AbstractTrees.descendleft)}, Type{AbstractTrees.TreeCursor{N, P} where P where N}}, SPIRV.SimpleTree{SPIRV.DominatorNode}})
precompile(Tuple{typeof(Base.call_composed), Tuple{Base.Constructor{AbstractTrees.PostOrderState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}, typeof(AbstractTrees.descendleft), Base.Constructor{AbstractTrees.TreeCursor{N, P} where P where N}}, Tuple{SPIRV.SimpleTree{SPIRV.DominatorNode}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.iterate), AbstractTrees.PostOrderDFS{SPIRV.SimpleTree{SPIRV.DominatorNode}}, AbstractTrees.PostOrderState{AbstractTrees.StableIndexedCursor{SPIRV.SimpleTree{SPIRV.DominatorNode}}}})
precompile(Tuple{typeof(Base.push!), Array{SPIRV.SimpleTree{SPIRV.DominatorNode}, 1}, SPIRV.SimpleTree{SPIRV.DominatorNode}})
precompile(Tuple{typeof(Base.:(==)), Tuple{SPIRV.RegionType, Array{Int64, 1}}, Tuple{SPIRV.RegionType, Array{Int64, 1}}})
precompile(Tuple{Type{Base.Some{T} where T}, Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{Int64, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, Array{Int64, 1}, Int64})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:by,), Tuple{SPIRV.var"#282#283"}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.getproperty), Base.Order.By{SPIRV.var"#282#283", Base.Order.ForwardOrdering}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Order.Lt{Base.Sort.var"#26#27"{Base.Order.By{SPIRV.var"#282#283", Base.Order.ForwardOrdering}}}, Symbol})
precompile(Tuple{Base.var"##s971#593", Vararg{Any, 4}})
precompile(Tuple{typeof(SPIRV.cyclic_region), SPIRV.DeltaGraph{Int64}, Int64})
precompile(Tuple{typeof(Base.filter), SPIRV.var"#271#276"{Array{Int64, 1}}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}})
precompile(Tuple{typeof(Base.all), Function, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}})
precompile(Tuple{typeof(Base._all), Base.ComposedFunction{Base.Fix2{typeof(Base.:(==)), Int64}, typeof(Graphs.dst)}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, Base.Colon})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:by,), Tuple{SPIRV.var"#284#287"}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.getproperty), Base.Order.By{SPIRV.var"#284#287", Base.Order.ForwardOrdering}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Order.Lt{Base.Sort.var"#26#27"{Base.Order.By{SPIRV.var"#284#287", Base.Order.ForwardOrdering}}}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{SPIRV.RegionType}, SPIRV.RegionType})
precompile(Tuple{typeof(Base.isbitsunion), Union})
precompile(Tuple{Type{SPIRV.SimpleTree{SPIRV.ControlNode}}, SPIRV.DeltaGraph{Int64}})
precompile(Tuple{typeof(SPIRV.add_edges!), SPIRV.DeltaGraph{Int64}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}})
precompile(Tuple{typeof(Base.vcat), Int64, Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#285#288"{Dictionaries.Dictionary{Int64, SPIRV.SimpleTree{SPIRV.ControlNode}}}, Array{Int64, 1}})
precompile(Tuple{Type{SPIRV.SimpleTree{SPIRV.ControlNode}}, SPIRV.ControlNode, Base.Generator{Array{Int64, 1}, SPIRV.var"#285#288"{Dictionaries.Dictionary{Int64, SPIRV.SimpleTree{SPIRV.ControlNode}}}}})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:data, :parent, :children), Tuple{SPIRV.ControlNode, SPIRV.SimpleTree{SPIRV.ControlNode}, Array{SPIRV.SimpleTree{SPIRV.ControlNode}, 1}}}, NamedTuple{(:data, :parent, :children), Tuple{SPIRV.ControlNode, Nothing, Array{SPIRV.SimpleTree{SPIRV.ControlNode}, 1}}}, SPIRV.SimpleTree{SPIRV.ControlNode}, NamedTuple{(:parent,), Tuple{SPIRV.SimpleTree{SPIRV.ControlNode}}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:data, :parent, :children), Tuple{SPIRV.ControlNode, SPIRV.SimpleTree{SPIRV.ControlNode}, Array{SPIRV.SimpleTree{SPIRV.ControlNode}, 1}}}})
precompile(Tuple{Type{SPIRV.SimpleTree{T} where T}, SPIRV.ControlNode, SPIRV.SimpleTree{SPIRV.ControlNode}, Array{SPIRV.SimpleTree{SPIRV.ControlNode}, 1}})
precompile(Tuple{typeof(Base.push!), Array{SPIRV.SimpleTree{SPIRV.ControlNode}, 1}, SPIRV.SimpleTree{SPIRV.ControlNode}})
precompile(Tuple{typeof(Graphs.outneighbors), SPIRV.DeltaGraph{Int64}, Int64})
precompile(Tuple{typeof(Base.pushfirst!), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:data, :parent, :children), Tuple{SPIRV.ControlNode, SPIRV.SimpleTree{SPIRV.ControlNode}, Array{SPIRV.SimpleTree{SPIRV.ControlNode}, 1}}}, NamedTuple{(:data, :parent, :children), Tuple{SPIRV.ControlNode, SPIRV.SimpleTree{SPIRV.ControlNode}, Array{SPIRV.SimpleTree{SPIRV.ControlNode}, 1}}}, SPIRV.SimpleTree{SPIRV.ControlNode}, NamedTuple{(:parent,), Tuple{SPIRV.SimpleTree{SPIRV.ControlNode}}}})
precompile(Tuple{typeof(Base.convert), Type{Type{AbstractTrees.LeavesState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}}, Type{AbstractTrees.LeavesState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}})
precompile(Tuple{typeof(Base.convert), Type{Base.ComposedFunction{Type{AbstractTrees.LeavesState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}, typeof(AbstractTrees.descendleft)}}, Base.ComposedFunction{Type{AbstractTrees.LeavesState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}, typeof(AbstractTrees.descendleft)}})
precompile(Tuple{Base.var"##_#98", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Base.ComposedFunction{Base.ComposedFunction{Type{AbstractTrees.LeavesState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}, typeof(AbstractTrees.descendleft)}, Type{AbstractTrees.TreeCursor{N, P} where P where N}}, SPIRV.SimpleTree{SPIRV.ControlNode}})
precompile(Tuple{typeof(Base.call_composed), Tuple{Base.Constructor{AbstractTrees.LeavesState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}, typeof(AbstractTrees.descendleft), Base.Constructor{AbstractTrees.TreeCursor{N, P} where P where N}}, Tuple{SPIRV.SimpleTree{SPIRV.ControlNode}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.iterate), AbstractTrees.Leaves{SPIRV.SimpleTree{SPIRV.ControlNode}}, AbstractTrees.LeavesState{AbstractTrees.StableIndexedCursor{SPIRV.SimpleTree{SPIRV.ControlNode}}}})
precompile(Tuple{Type{SPIRV.SimpleTree{SPIRV.ControlNode}}, Int64, SPIRV.RegionType})
precompile(Tuple{typeof(Base.vect), SPIRV.SimpleTree{SPIRV.ControlNode}, Vararg{SPIRV.SimpleTree{SPIRV.ControlNode}}})
precompile(Tuple{Type{SPIRV.SimpleTree{SPIRV.ControlNode}}, Int64, SPIRV.RegionType, Array{SPIRV.SimpleTree{SPIRV.ControlNode}, 1}})
precompile(Tuple{typeof(Base.:(==)), SPIRV.SimpleTree{SPIRV.ControlNode}, SPIRV.SimpleTree{SPIRV.ControlNode}})
precompile(Tuple{Type{SPIRV.SimpleTree{SPIRV.ControlNode}}, Int64, SPIRV.RegionType, Tuple{SPIRV.SimpleTree{SPIRV.ControlNode}, SPIRV.SimpleTree{SPIRV.ControlNode}, SPIRV.SimpleTree{SPIRV.ControlNode}}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.rest), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Graphs.src), Tuple{Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Graphs.src), Tuple{Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#273#278"{Array{SPIRV.SimpleTree{SPIRV.DominatorNode}, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, SPIRV.var"#273#278"{Array{SPIRV.SimpleTree{SPIRV.DominatorNode}, 1}}}})
precompile(Tuple{typeof(SPIRV.common_ancestor), SPIRV.SimpleTree{SPIRV.DominatorNode}, Array{SPIRV.SimpleTree{SPIRV.DominatorNode}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Graphs.dst), Tuple{Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Graphs.dst), Tuple{Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#274#279"{SPIRV.DeltaGraph{Int64}, Array{Int64, 1}, Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.any), Base.Generator{Array{Int64, 1}, SPIRV.var"#274#279"{SPIRV.DeltaGraph{Int64}, Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{7, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{Type{SPIRV.ControlFlowGraph{E, T, G} where G<:Graphs.AbstractGraph{T} where T where E<:(Graphs.AbstractEdge{T} where T)}, SPIRV.DeltaGraph{Int64}})
precompile(Tuple{typeof(Base.getproperty), SPIRV.ControlFlowGraph{Graphs.SimpleGraphs.SimpleEdge{Int64}, Int64, SPIRV.DeltaGraph{Int64}}, Symbol})
precompile(Tuple{Type{SPIRV.SimpleTree{SPIRV.DominatorNode}}, SPIRV.ControlFlowGraph{Graphs.SimpleGraphs.SimpleEdge{Int64}, Int64, SPIRV.DeltaGraph{Int64}}})
precompile(Tuple{typeof(Base.getindex), SPIRV.SimpleTree{SPIRV.DominatorNode}, Int64})
precompile(Tuple{typeof(AbstractTrees.parent), SPIRV.SimpleTree{SPIRV.DominatorNode}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(AbstractTrees.children), SPIRV.SimpleTree{SPIRV.DominatorNode}})
precompile(Tuple{typeof(Base.all), Function, Array{SPIRV.SimpleTree{SPIRV.DominatorNode}, 1}})
precompile(Tuple{typeof(Base._all), Base.ComposedFunction{typeof(Base.isempty), typeof(AbstractTrees.children)}, Array{SPIRV.SimpleTree{SPIRV.DominatorNode}, 1}, Base.Colon})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Graphs.SimpleGraphs.var"#1#3"{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, Graphs.SimpleGraphs.var"#1#3"{Int64}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, Graphs.SimpleGraphs.var"#1#3"{Int64}}, Base.HasShape{1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Graphs.SimpleGraphs.var"#2#4"{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, Graphs.SimpleGraphs.var"#2#4"{Int64}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, Graphs.SimpleGraphs.var"#2#4"{Int64}}, Base.HasShape{1}})
precompile(Tuple{Type{MetaGraphs.MetaDiGraph{T, U} where U<:Real where T<:Integer}})
precompile(Tuple{typeof(SPIRV.flow_through), Function, SPIRV.ControlFlowGraph{Graphs.SimpleGraphs.SimpleEdge{Int64}, Int64, SPIRV.DeltaGraph{Int64}}, Int64})
precompile(Tuple{typeof(MetaGraphs.set_prop!), MetaGraphs.MetaDiGraph{Int64, Float64}, Graphs.SimpleGraphs.SimpleEdge{Int64}, Symbol, Int64})
precompile(Tuple{typeof(Graphs.is_cyclic), SPIRV.ControlFlowGraph{Graphs.SimpleGraphs.SimpleEdge{Int64}, Int64, SPIRV.DeltaGraph{Int64}}})
precompile(Tuple{typeof(Graphs.edges), MetaGraphs.MetaDiGraph{Int64, Float64}})
precompile(Tuple{typeof(MetaGraphs.get_prop), MetaGraphs.MetaDiGraph{Int64, Float64}, Graphs.SimpleGraphs.SimpleEdge{Int64}, Symbol})
precompile(Tuple{typeof(Base.keys), Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Set{T} where T}, Base.KeySet{Any, Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.values), Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Set{T} where T}, Base.ValueIterator{Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Int64})
precompile(Tuple{typeof(Graphs.nv), SPIRV.ControlFlowGraph{Graphs.SimpleGraphs.SimpleEdge{Int64}, Int64, SPIRV.DeltaGraph{Int64}}})
precompile(Tuple{Type{Base.Set{T} where T}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), Base.Set{Any}, Base.Set{Any}})
precompile(Tuple{typeof(Base.in), Int64, Base.Set{Any}})
precompile(Tuple{typeof(Base.:(==)), Base.Set{Any}, Base.Set{Int64}})
precompile(Tuple{typeof(Base.in), Int64, Base.Set{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.in), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix2{typeof(Base.in), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}}, Base.Fix2{typeof(Base.in), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.collect), Graphs.SimpleGraphs.SimpleEdgeIter{Graphs.SimpleGraphs.SimpleDiGraph{Int64}}})
precompile(Tuple{typeof(Base.filter), Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}})
precompile(Tuple{typeof(Base.getindex), Type{SPIRV.Instruction}})
precompile(Tuple{typeof(SPIRV.generate_module), Expr})
precompile(Tuple{typeof(SPIRV.annotate), SPIRV.Module})
precompile(Tuple{typeof(Base.getproperty), SPIRV.AnnotatedModule, Symbol})
precompile(Tuple{typeof(Base.Iterators.only), Array{SPIRV.AnnotatedFunction, 1}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:block,), Tuple{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), NTuple{5, Symbol}})
precompile(Tuple{typeof(SPIRV.interpret), Function, Vararg{Any}})
precompile(Tuple{SPIRV.AbstractInterpretation{SPIRV.ControlFlowGraph{Graphs.SimpleGraphs.SimpleEdge{Int64}, Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}}}, Function, SPIRV.AnnotatedModule, SPIRV.AnnotatedFunction})
precompile(Tuple{typeof(Base.getproperty), SPIRV.AnnotatedFunction, Symbol})
precompile(Tuple{typeof(Base.Iterators.only), Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(SPIRV.instructions), SPIRV.AnnotatedModule, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), Array{SPIRV.Instruction, 1}, Base.SubArray{SPIRV.Instruction, 1, Array{SPIRV.Instruction, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.empty!), Array{SPIRV.Instruction, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{SPIRV.AnnotatedFunction, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{SPIRV.AnnotatedFunction, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.extrema), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.vcat), Base.SubArray{SPIRV.Instruction, 1, Array{SPIRV.Instruction, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{SPIRV.Instruction, 1, Array{SPIRV.Instruction, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{SPIRV.Instruction, 1, Array{SPIRV.Instruction, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{Type{SPIRV.StackTrace}})
precompile(Tuple{Type{SPIRV.UseDefChain}, SPIRV.AnnotatedModule, SPIRV.AnnotatedFunction, SPIRV.ResultID, SPIRV.StackTrace})
precompile(Tuple{typeof(Base.getproperty), SPIRV.UseDefChain, Symbol})
precompile(Tuple{typeof(Base.getindex), SPIRV.AnnotatedModule, SPIRV.ResultID})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{SPIRV.UseDefChain, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(AbstractTrees.nodevalue), Tuple{Array{SPIRV.UseDefChain, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AbstractTrees.nodevalue), Tuple{Array{SPIRV.UseDefChain, 1}}}})
precompile(Tuple{typeof(Base.vect), SPIRV.ResultID, Vararg{SPIRV.ResultID}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SPIRV.AnnotatedModule, Array{SPIRV.ResultID, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getindex), Tuple{Base.RefValue{SPIRV.AnnotatedModule}, Array{SPIRV.ResultID, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.getindex), Tuple{Base.RefValue{SPIRV.AnnotatedModule}, Array{SPIRV.ResultID, 1}}}})
precompile(Tuple{Type{AbstractTrees.Leaves{T} where T}, SPIRV.UseDefChain})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, AbstractTrees.Leaves{SPIRV.UseDefChain}})
precompile(Tuple{Base.var"##_#98", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Base.ComposedFunction{Base.ComposedFunction{Type{AbstractTrees.LeavesState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}, typeof(AbstractTrees.descendleft)}, Type{AbstractTrees.TreeCursor{N, P} where P where N}}, SPIRV.UseDefChain})
precompile(Tuple{typeof(Base.call_composed), Tuple{Base.Constructor{AbstractTrees.LeavesState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}, typeof(AbstractTrees.descendleft), Base.Constructor{AbstractTrees.TreeCursor{N, P} where P where N}}, Tuple{SPIRV.UseDefChain}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.iterate), AbstractTrees.Leaves{SPIRV.UseDefChain}, AbstractTrees.LeavesState{AbstractTrees.ImplicitCursor{SPIRV.UseDefChain, SPIRV.UseDefChain, Union{Nothing, Tuple{SPIRV.UseDefChain, Int64}}}}})
precompile(Tuple{typeof(AbstractTrees.nextsibling), AbstractTrees.ImplicitCursor{SPIRV.UseDefChain, SPIRV.UseDefChain, Union{Nothing, Tuple{SPIRV.UseDefChain, Int64}}}})
precompile(Tuple{typeof(AbstractTrees.children), SPIRV.UseDefChain})
precompile(Tuple{typeof(Base.iterate), Array{SPIRV.UseDefChain, 1}, Int64})
precompile(Tuple{Type{AbstractTrees.ImplicitCursor{N, P, S} where S where P where N}, AbstractTrees.ImplicitCursor{SPIRV.UseDefChain, SPIRV.UseDefChain, Union{Nothing, Tuple{SPIRV.UseDefChain, Int64}}}, SPIRV.UseDefChain, Nothing})
precompile(Tuple{Type{AbstractTrees.LeavesState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}, AbstractTrees.ImplicitCursor{SPIRV.UseDefChain, SPIRV.UseDefChain, Union{Nothing, Tuple{SPIRV.UseDefChain, Int64}}}})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{SPIRV.UseDefChain}})
precompile(Tuple{typeof(Base.push!), Array{SPIRV.UseDefChain, 1}, SPIRV.UseDefChain})
precompile(Tuple{typeof(Base.grow_to!), Array{SPIRV.UseDefChain, 1}, AbstractTrees.Leaves{SPIRV.UseDefChain}, AbstractTrees.LeavesState{AbstractTrees.ImplicitCursor{SPIRV.UseDefChain, SPIRV.UseDefChain, Union{Nothing, Tuple{SPIRV.UseDefChain, Int64}}}}})
precompile(Tuple{Type{AbstractTrees.ImplicitCursor{N, P, S} where S where P where N}, AbstractTrees.ImplicitCursor{SPIRV.UseDefChain, Nothing, Any}, SPIRV.UseDefChain, Nothing})
precompile(Tuple{Type{SPIRV.StackFrame}, Nothing, Nothing})
precompile(Tuple{Type{SPIRV.StackFrame}, SPIRV.AnnotatedModule, SPIRV.ResultID})
precompile(Tuple{typeof(Base.vect), SPIRV.StackFrame})
precompile(Tuple{Type{SPIRV.StackTrace}, Array{SPIRV.StackFrame, 1}})
precompile(Tuple{typeof(Base.getindex), Array{SPIRV.AnnotatedFunction, 1}, Int64})
precompile(Tuple{typeof(Base.in), Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(SPIRV.sprintc_mime), Function, SPIRV.IR})
precompile(Tuple{SPIRV.var"#95#96"{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.show)}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Vararg{Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/plain")}, SPIRV.IR})
precompile(Tuple{typeof(Base.collect), NTuple{4, SPIRV.ResultID}})
precompile(Tuple{Type{SPIRV.FunctionType}, SPIRV.FloatType, Array{Any, 1}})
precompile(Tuple{typeof(Base.Iterators.only), SPIRV.IR})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.length), Base.BottomRF{typeof(Base.add_sum)}}, Type{SPIRV.Block}})
precompile(Tuple{typeof(SPIRV.nexs), SPIRV.FunctionDefinition})
precompile(Tuple{typeof(SPIRV.id_bound), SPIRV.IR})
precompile(Tuple{SPIRV.var"#310#313", Nothing})
precompile(Tuple{typeof(Base.getproperty), Base.Set{SPIRV.OpCode}, Symbol})
precompile(Tuple{typeof(SPIRV.restructure_merge_blocks!), SPIRV.IR})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, SPIRV.var"#312#315"{SPIRV.ControlFlowGraph{Graphs.SimpleGraphs.SimpleEdge{Int64}, Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}}, Int64}, AbstractTrees.Leaves{SPIRV.SimpleTree{SPIRV.ControlNode}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#311#314"{SPIRV.FunctionDefinition}, Base.Iterators.Filter{SPIRV.var"#312#315"{SPIRV.ControlFlowGraph{Graphs.SimpleGraphs.SimpleEdge{Int64}, Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}}, Int64}, AbstractTrees.Leaves{SPIRV.SimpleTree{SPIRV.ControlNode}}}})
precompile(Tuple{typeof(Base.collect), Type{SPIRV.Block}, Base.Generator{Base.Iterators.Filter{SPIRV.var"#312#315"{SPIRV.ControlFlowGraph{Graphs.SimpleGraphs.SimpleEdge{Int64}, Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}}, Int64}, AbstractTrees.Leaves{SPIRV.SimpleTree{SPIRV.ControlNode}}}, SPIRV.var"#311#314"{SPIRV.FunctionDefinition}}})
precompile(Tuple{SPIRV.var"#312#315"{SPIRV.ControlFlowGraph{Graphs.SimpleGraphs.SimpleEdge{Int64}, Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}}, Int64}, SPIRV.SimpleTree{SPIRV.ControlNode}})
precompile(Tuple{SPIRV.var"#311#314"{SPIRV.FunctionDefinition}, SPIRV.SimpleTree{SPIRV.ControlNode}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{SPIRV.var"#312#315"{SPIRV.ControlFlowGraph{Graphs.SimpleGraphs.SimpleEdge{Int64}, Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}}, Int64}, AbstractTrees.Leaves{SPIRV.SimpleTree{SPIRV.ControlNode}}}, AbstractTrees.LeavesState{AbstractTrees.StableIndexedCursor{SPIRV.SimpleTree{SPIRV.ControlNode}}}})
precompile(Tuple{Type{UInt32}, SPIRV.ResultID})
precompile(Tuple{typeof(SPIRV.throw_compilation_error), String})
precompile(Tuple{typeof(SPIRV.add_merge_headers!), SPIRV.IR})
precompile(Tuple{typeof(SPIRV.merge_blocks), SPIRV.FunctionDefinition})
precompile(Tuple{typeof(Base.length), Dictionaries.Dictionary{SPIRV.ResultID, Array{SPIRV.ResultID, 1}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix2{typeof(Base.:(>)), Int64}}, Base.Fix2{typeof(Base.:(>)), Int64}})
precompile(Tuple{typeof(SPIRV.conflicted_merge_blocks), SPIRV.FunctionDefinition})
precompile(Tuple{typeof(Base.resize!), Array{SPIRV.ResultID, 1}, Int64})
precompile(Tuple{typeof(Base.resize!), Array{UInt64, 1}, Int64})
precompile(Tuple{typeof(Base.resize!), Array{Array{SPIRV.ResultID, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.isempty), Dictionaries.Dictionary{SPIRV.ResultID, Array{SPIRV.ResultID, 1}}})
precompile(Tuple{Base.var"#6#7"{Pair{A, B} where B where A}, Tuple{Int64, SPIRV.ResultID}})
precompile(Tuple{typeof(SPIRV.nesting_levels), SPIRV.SimpleTree{SPIRV.ControlNode}})
precompile(Tuple{typeof(Base.pairs), Dictionaries.Dictionary{SPIRV.ResultID, Array{SPIRV.ResultID, 1}}})
precompile(Tuple{typeof(Base.Iterators.only), Dictionaries.PairDictionary{SPIRV.ResultID, Array{SPIRV.ResultID, 1}, Dictionaries.Dictionary{SPIRV.ResultID, Array{SPIRV.ResultID, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, Array{SPIRV.ResultID, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, Array{SPIRV.ResultID, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{SPIRV.ResultID, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), SPIRV.FunctionDefinition, SPIRV.ResultID})
precompile(Tuple{typeof(Base.last), SPIRV.Block})
precompile(Tuple{typeof(SPIRV.opcode), SPIRV.Expression})
precompile(Tuple{typeof(Base.:(==)), SPIRV.OpCode, SPIRV.OpCode})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.ResultID})
precompile(Tuple{typeof(Base.in), Pair{SPIRV.ResultID, SPIRV.ResultID}, Base.Set{Pair{SPIRV.ResultID, SPIRV.ResultID}}})
precompile(Tuple{typeof(Base.push!), Base.Set{Pair{SPIRV.ResultID, SPIRV.ResultID}}, Pair{SPIRV.ResultID, SPIRV.ResultID}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.PartitionIterator{SPIRV.Expression}, Int64})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, SPIRV.IR})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{SPIRV.ResultID, String}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{String, SPIRV.ResultID}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.EntryPoint}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{SPIRV.EntryPoint, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.Metadata}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{SPIRV.Metadata, 1}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, SPIRV.Metadata})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.SPIRType}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{SPIRV.SPIRType, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{SPIRV.SPIRType, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{SPIRV.SPIRType, SPIRV.ResultID}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.Constant}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{SPIRV.Constant, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{SPIRV.Constant, SPIRV.ResultID}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.Variable}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{SPIRV.Variable, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{SPIRV.Variable, SPIRV.ResultID}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.FunctionDefinition}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{SPIRV.FunctionDefinition, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{SPIRV.Expression, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{SPIRV.Expression, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.Block}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{SPIRV.Block, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{SPIRV.FunctionDefinition, SPIRV.ResultID}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, SPIRV.DebugInfo})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{SPIRV.ResultID, Symbol}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{SPIRV.ResultID, SPIRV.LineInfo}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{SPIRV.LineInfo, 1}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, SPIRV.IDCounter})
precompile(Tuple{typeof(Base.deepcopy_internal), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{DataType, 1}})
precompile(Tuple{typeof(SPIRV.MathFunctions.lerp), Float64, Float64, Float64})
precompile(Tuple{SPIRV.var"##s648#344", Vararg{Any, 4}})
precompile(Tuple{typeof(Base.eachindex), Type{SPIRV.Vec{2, Float32}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#345#346", Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{UInt32}, SPIRV.var"#345#346"}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{UInt32}, SPIRV.var"#345#346"}, UInt32})
precompile(Tuple{typeof(Base.sqrt), Int64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Float32, Base.Val{26}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Float32, Base.Val{-12}})
precompile(Tuple{typeof(Base.oftype), Float32, Int64})
precompile(Tuple{typeof(Base.:(/)), Float32, Int64})
precompile(Tuple{typeof(Base.:(*)), Int64, Float32})
precompile(Tuple{typeof(Base.:(<)), Float32, Float32})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.Irrational{:π}, Type})
precompile(Tuple{typeof(Base.:(*)), Float64, Type{SPIRV.LiteralType{Float32}}})
precompile(Tuple{typeof(Base.:(+)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(Base.:(/)), Int64, Base.Irrational{:π}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Float64}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{AbstractFloat, Vararg{Float32}}, 1}}})
precompile(Tuple{Type{Base.Returns{V} where V}, Float64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Float64, 1}}})
precompile(Tuple{Base.Returns{Float64}, Any})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{SPIRV.var"##s648#331", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.eachindex), Type{SPIRV.Vec{2, Float64}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Symbol}}, typeof(Base.foldl), Function, Base.UnitRange{UInt32}})
precompile(Tuple{Base.var"##mapfoldl#289", Symbol, typeof(Base.mapfoldl), Function, Function, Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{SPIRV.var"#332#333"}, Symbol})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), SPIRV.var"#332#333", Symbol, Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Float64, Vararg{Float64}}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Float32}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Float32, Vararg{Float32}}, 1}}})
precompile(Tuple{typeof(Base.:(/)), Base.Irrational{:π}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Base.convert), Type, Float64})
precompile(Tuple{typeof(Base.convert), Type{Float32}, Float64})
precompile(Tuple{typeof(SPIRV.MathFunctions.linearstep), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Float32, Int64})
precompile(Tuple{typeof(Base.sqrt), Float32})
precompile(Tuple{typeof(Base.max), Float32, Float64})
precompile(Tuple{typeof(Base.isapprox), Float32, Float64})
precompile(Tuple{typeof(Base.max), Float64, Float32})
precompile(Tuple{typeof(Base.rtoldefault), Type{Float64}, Type{Float32}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{AbstractFloat, AbstractFloat}, 1}}})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{SPIRV.Vec{2, Float64}, SPIRV.Vec{2, Float32}}}, Int64})
precompile(Tuple{typeof(Base.Iterators._promote_tuple_shape), Tuple{Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(Base.identity), typeof(Base.:(&))}, Symbol})
precompile(Tuple{typeof(Base.isapprox), SPIRV.Vec{2, Float64}, SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.:(==)), SPIRV.Vec{2, Float64}, SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.max), Float32, Float32})
precompile(Tuple{typeof(Base.rtoldefault), Type{Float32}, Type{Float32}, Int64})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}}}, Int64})
precompile(Tuple{typeof(Base.isapprox), SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.:(<)), Int64, Float64})
precompile(Tuple{typeof(Base.:(<)), Float64, Int64})
precompile(Tuple{typeof(Base.:(==)), Float64, Int64})
precompile(Tuple{typeof(SPIRV.image_type), SPIRV.ImageFormat, SPIRV.Dim, Int64, Bool, Bool, Int64})
precompile(Tuple{Type{SPIRV.Vec{2, Float32}}, Int64, Vararg{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{Float32}}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.ntuple), Base.Broadcast.var"#31#32"{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{Float32}}, Tuple{Int64, Int64}}}}, Base.Val{2}})
precompile(Tuple{Type{SPIRV.Vec{2, Float32}}, Float32, Vararg{Float32}})
precompile(Tuple{typeof(Base.zeros), Int64, Int64})
precompile(Tuple{Type{SPIRV.Image{SPIRV.ImageFormat(0x00000002), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}}, Array{Float64, 2}})
precompile(Tuple{Type{SPIRV.SampledImage{I} where I<:(SPIRV.Image{Format, Dim, Depth, Arrayed, MS, Sampled, T} where T where Sampled where MS where Arrayed where Depth where Dim where Format)}, SPIRV.Image{SPIRV.ImageFormat(0x00000002), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.zero), Type{SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), NTuple{5, Float64}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Tuple{Float64}, Int64})
precompile(Tuple{Base.Broadcast.var"#17#19"})
precompile(Tuple{Base.Broadcast.var"#27#28"})
precompile(Tuple{typeof(Base.size), Array{Float64, 2}})
precompile(Tuple{Type{SPIRV.Vec{2, UInt32}}, Int64, Vararg{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt32}}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.ntuple), Base.Broadcast.var"#31#32"{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt32}}, Tuple{Int64, Int64}}}}, Base.Val{2}})
precompile(Tuple{Type{SPIRV.Vec{2, UInt32}}, UInt32, Vararg{UInt32}})
precompile(Tuple{typeof(SPIRV.CompositeConstruct), Type{SPIRV.Vec{2, UInt32}}, UInt32, UInt32})
precompile(Tuple{typeof(Base.convert), Type{SPIRV.Vec{2, UInt32}}, SPIRV.Vec{2, UInt32}})
precompile(Tuple{typeof(Base.zero), Type{SPIRV.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{UInt32, UInt32, UInt32}})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Vec{3, Float32}, Float32, Int64})
precompile(Tuple{typeof(Base.:(==)), SPIRV.Vec{3, Float32}, SPIRV.Vec{3, Float32}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Real, Vararg{UInt32}}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{UInt32, UInt32}, 1}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Tuple{Float32}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Int32, Int32}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Real, Real}, 1}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Float64, Base.IteratorsMD.CartesianIndex{0}})
precompile(Tuple{Type{Int32}, Float32})
precompile(Tuple{typeof(SPIRV.get_signature), Expr})
precompile(Tuple{SPIRV.var"#418#419", Expr})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.var"#418#419"}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{Type{NamedTuple{(:aggressive_constant_propagation, :assume_bindings_static), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:aggressive_constant_propagation, :assume_bindings_static), Tuple{Bool, Bool}}, Type{Core.Compiler.InferenceParams}})
precompile(Tuple{Type{NamedTuple{(:inlining, :inline_cost_threshold, :trust_inference), T} where T<:Tuple}, Tuple{Bool, Int64, Bool}})
precompile(Tuple{Type{SPIRV.SPIRVInterpreter}})
precompile(Tuple{typeof(SPIRV.invalidate_all!), SPIRV.SPIRVInterpreter})
precompile(Tuple{typeof(Base.getproperty), SPIRV.SPIRVInterpreter, Symbol})
precompile(Tuple{Type{NamedTuple{(:inferred, :interp), T} where T<:Tuple}, Tuple{Bool, SPIRV.SPIRVInterpreter}})
precompile(Tuple{Type{NamedTuple{(:inferred,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:inferred, :interp), Tuple{Bool, SPIRV.SPIRVInterpreter}}, Type{SPIRV.SPIRVTarget}, Any, Type})
precompile(Tuple{typeof(Base.max), UInt64, UInt64})
precompile(Tuple{typeof(Base.typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}})
precompile(Tuple{typeof(Core.Compiler.abstract_call_known), SPIRV.SPIRVInterpreter, Any, Core.Compiler.ArgInfo, Core.Compiler.StmtInfo, Core.Compiler.InferenceState, Int64})
precompile(Tuple{Type{Core.CodeInstance}, SPIRV.SPIRVInterpreter, Core.Compiler.InferenceResult, Any, Core.Compiler.WorldRange})
precompile(Tuple{typeof(Core.Compiler.builtin_tfunction), SPIRV.SPIRVInterpreter, Any, Array{Any, 1}, Core.Compiler.InferenceState})
precompile(Tuple{typeof(Core.Compiler.builtin_tfunction), SPIRV.SPIRVInterpreter, Any, Array{Any, 1}, Core.Compiler.IRCode})
precompile(Tuple{typeof(SPIRV.IAdd), Int64, Int64})
precompile(Tuple{typeof(SPIRV.ConvertSToF), Type{Float32}, Int64})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(Base.:(>)), Float64, Int64})
precompile(Tuple{SPIRV.var"#callback#326"{SPIRV.CodeInstanceCache}, Core.MethodInstance, UInt32})
precompile(Tuple{typeof(Base.getproperty), Core.CodeInstance, Symbol})
precompile(Tuple{typeof(SPIRV.cap_world), UInt64, UInt32})
precompile(Tuple{typeof(Base.setproperty!), Core.CodeInstance, Symbol, UInt32})
precompile(Tuple{typeof(Base.getproperty), SPIRV.SPIRVTarget, Symbol})
precompile(Tuple{typeof(Base.haskey), SPIRV.CodeInstanceCache, Core.MethodInstance})
precompile(Tuple{typeof(SPIRV.load_expr), Expr})
precompile(Tuple{typeof(SPIRV.store_expr), Expr})
precompile(Tuple{typeof(SPIRV.store_expr), Int64, Expr})
precompile(Tuple{typeof(SPIRV.store_expr), Symbol, Expr})
precompile(Tuple{Type{Base.SubArray{T, N, P, I, L} where L where I where P where N where T}, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Int64, Int64})
precompile(Tuple{typeof(Base.first), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#360#363"{Int64, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, SPIRV.var"#360#363"{Int64, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}}}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.UnitRange{Int64}, SPIRV.var"#361#364"{Int64, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}}}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Array{Float64, 1}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Base.UnitRange{Int64}, SPIRV.var"#360#363"{Int64, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#362#365"{Symbol}, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Float64, 1}, 1}, SPIRV.var"#362#365"{Symbol}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Expr, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Expr, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Int64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Base.UnitRange{Int64}, SPIRV.var"#361#364"{Int64, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}}}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Array{Int64, 1}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Base.UnitRange{Int64}, SPIRV.var"#360#363"{Int64, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}}}, Int64})
precompile(Tuple{typeof(Base.isnothing), Expr})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#362#365"{Expr}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Int64, 1}, 1}, SPIRV.var"#362#365"{Expr}}})
precompile(Tuple{Type{SPIRV.Pointer{T} where T}, Base.RefValue{Int64}})
precompile(Tuple{typeof(Base.getindex), SPIRV.Pointer{Int64}})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Pointer{Int64}, Int64})
precompile(Tuple{Type{SPIRV.Pointer{T} where T}, Int64})
precompile(Tuple{Type{SPIRV.Pointer{T} where T}, SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.getindex), SPIRV.Pointer{SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.:(==)), SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Pointer{SPIRV.Vec{2, Float32}}, SPIRV.Vec{2, Float32}})
precompile(Tuple{Type{SPIRV.Arr{N, T} where T where N}, SPIRV.Vec{2, Float32}, Vararg{SPIRV.Vec{2, Float32}}})
precompile(Tuple{Type{SPIRV.Arr{2, SPIRV.Vec{2, Float32}}}, SPIRV.Vec{2, Float32}, Vararg{SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(SPIRV.CompositeConstruct), Type{SPIRV.Arr{2, SPIRV.Vec{2, Float32}}}, SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}})
precompile(Tuple{Type{SPIRV.Pointer{T} where T}, SPIRV.Arr{2, SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{SPIRV.var"#352#353"}, Symbol})
precompile(Tuple{typeof(Base.getindex), SPIRV.Pointer{SPIRV.Arr{2, SPIRV.Vec{2, Float32}}}, UInt32, UInt32})
precompile(Tuple{typeof(Base.pointer), Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{UInt64}, Ptr{Int64}})
precompile(Tuple{Type{SPIRV.Pointer{Array{Int64, 1}}}, UInt64})
precompile(Tuple{typeof(SPIRV.ConvertUToPtr), Type, UInt64})
precompile(Tuple{Type{SPIRV.Pointer{Array{Int64, 1}}}, Ptr{Array{Int64, 1}}, UInt64})
precompile(Tuple{typeof(Base.eltype), SPIRV.Pointer{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(SPIRV.unsigned_index), Tuple{Tuple{}}}, Symbol})
precompile(Tuple{typeof(Base.getindex), SPIRV.Pointer{Array{Int64, 1}}, Int64})
precompile(Tuple{Type{SPIRV.Pointer{Int64}}, UInt64})
precompile(Tuple{Type{SPIRV.Pointer{Int64}}, Ptr{Int64}, UInt64})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Pointer{Array{Int64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.vect), SPIRV.Vec{2, Float32}, Vararg{SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.pointer), Array{SPIRV.Vec{2, Float32}, 1}})
precompile(Tuple{typeof(Base.convert), Type{UInt64}, Ptr{SPIRV.Vec{2, Float32}}})
precompile(Tuple{Type{SPIRV.Pointer{Array{SPIRV.Vec{2, Float32}, 1}}}, UInt64})
precompile(Tuple{Type{SPIRV.Pointer{Array{SPIRV.Vec{2, Float32}, 1}}}, Ptr{Array{SPIRV.Vec{2, Float32}, 1}}, UInt64})
precompile(Tuple{typeof(Base.eltype), SPIRV.Pointer{Array{SPIRV.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Base.getindex), SPIRV.Pointer{Array{SPIRV.Vec{2, Float32}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Pointer{Array{SPIRV.Vec{2, Float32}, 1}}, SPIRV.Vec{2, Float32}, Int64})
precompile(Tuple{Type{SPIRV.Vec{N, T} where T where N}, Float64, Vararg{Float64}})
precompile(Tuple{Type{SPIRV.Vec{4, Float64}}, Float64, Vararg{Float64}})
precompile(Tuple{typeof(SPIRV.CompositeConstruct), Type{SPIRV.Vec{4, Float64}}, Vararg{Float64, 4}})
precompile(Tuple{typeof(Base.getindex), SPIRV.Vec{4, Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Vec{4, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.last), SPIRV.Vec{4, Float64}})
precompile(Tuple{typeof(Base.first), Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.first), SPIRV.Vec{4, Float64}})
precompile(Tuple{typeof(Base.getproperty), SPIRV.Vec{4, Float64}, Symbol})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Nothing, 1}}})
precompile(Tuple{typeof(Base.setproperty!), SPIRV.Vec{4, Float64}, Symbol, Int64})
precompile(Tuple{typeof(Base.similar), SPIRV.Vec{4, Float64}})
precompile(Tuple{typeof(Base.size), SPIRV.Vec{4, Float64}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{Type{SPIRV.Vec{4, Float32}}, Int64, Vararg{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{Float32}}, NTuple{4, Int64}}})
precompile(Tuple{typeof(Base.ntuple), Base.Broadcast.var"#31#32"{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{Float32}}, NTuple{4, Int64}}}}, Base.Val{4}})
precompile(Tuple{Type{SPIRV.Vec{4, Float32}}, Float32, Vararg{Float32}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{UInt32, UInt32}})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Vec{2, Float32}, Float32, Int64})
precompile(Tuple{typeof(Base.setproperty!), SPIRV.Vec{4, Float32}, Symbol, SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.ntuple), SPIRV.var"#357#358"{SPIRV.Vec{4, Float32}, SPIRV.Vec{2, Float32}, Tuple{UInt32, UInt32}}, Int64})
precompile(Tuple{typeof(Base.setproperty!), SPIRV.Vec{4, Float32}, Symbol, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.:(==)), SPIRV.Vec{4, Float32}, SPIRV.Vec{4, Float32}})
precompile(Tuple{Type{SPIRV.Vec{1, Float64}}, Float64})
precompile(Tuple{Type{SPIRV.Vec{5, Float64}}, Float64, Vararg{Float64}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.repr), SPIRV.Vec{4, Float32}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, SPIRV.Vec{4, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.length), Tuple{Tuple{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.length), Tuple{Tuple{Base.OneTo{Int64}}}}})
precompile(Tuple{typeof(Base.abs), Int64})
precompile(Tuple{typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/plain")}, SPIRV.Vec{4, Float32}})
precompile(Tuple{typeof(Base.isassigned), SPIRV.Vec{4, Float32}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), SPIRV.Vec{4, Float32}, Int64, Int64})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float32})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Float32})
precompile(Tuple{typeof(Base.replace_in_print_matrix), SPIRV.Vec{4, Float32}, Int64, Int64, String})
precompile(Tuple{Type{SPIRV.Vec{2, Float64}}, Float64, Vararg{Float64}})
precompile(Tuple{Type{SPIRV.Mat{N, M, T} where T where M where N}, SPIRV.Vec{2, Float64}, Vararg{SPIRV.Vec{2, Float64}}})
precompile(Tuple{Type{SPIRV.Mat{2, 2, Float64}}, SPIRV.Vec{2, Float64}, Vararg{SPIRV.Vec{2, Float64}}})
precompile(Tuple{typeof(SPIRV.CompositeConstruct), Type{SPIRV.Mat{2, 2, Float64}}, SPIRV.Vec{2, Float64}, SPIRV.Vec{2, Float64}})
precompile(Tuple{typeof(Base.getindex), SPIRV.Mat{2, 2, Float64}, Int64, Int64})
precompile(Tuple{typeof(SPIRV.column), SPIRV.Mat{2, 2, Float64}, Int64})
precompile(Tuple{typeof(Base.:(==)), SPIRV.Vec{2, Float64}, SPIRV.Vec{2, Float64}})
precompile(Tuple{typeof(Base.map), typeof(Base.oneto), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(==)), SPIRV.Mat{2, 2, Float64}, SPIRV.Mat{2, 2, Float64}})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Mat{2, 2, Float64}, Float64, Int64, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{SPIRV.Vec{2, Float64}, 1}}})
precompile(Tuple{typeof(Base.similar), SPIRV.Mat{2, 2, Float64}})
precompile(Tuple{typeof(Base.size), SPIRV.Mat{2, 2, Float64}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Mat{2, 2, Float64}, SPIRV.Mat{2, 2, Float64}})
precompile(Tuple{Type{SPIRV.Vec{3, Float32}}, Int64, Vararg{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{Float32}}, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.ntuple), Base.Broadcast.var"#31#32"{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{Float32}}, Tuple{Int64, Int64, Int64}}}}, Base.Val{3}})
precompile(Tuple{Type{SPIRV.Vec{3, Float32}}, Float32, Vararg{Float32}})
precompile(Tuple{Type{SPIRV.Mat{3, 4, Float32}}, SPIRV.Vec{3, Float32}, Vararg{SPIRV.Vec{3, Float32}}})
precompile(Tuple{typeof(SPIRV.CompositeConstruct), Type{SPIRV.Mat{3, 4, Float32}}, Vararg{SPIRV.Vec{3, Float32}, 4}})
precompile(Tuple{typeof(Base.getindex), SPIRV.Mat{3, 4, Float32}, Int64, Int64})
precompile(Tuple{typeof(Base.repr), SPIRV.Mat{3, 4, Float32}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, SPIRV.Mat{3, 4, Float32}})
precompile(Tuple{typeof(Base.isassigned), SPIRV.Mat{3, 4, Float32}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.length), Tuple{Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.length), Tuple{Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}}})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.length), Tuple{Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}}, Symbol})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Base.length), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/plain")}, SPIRV.Mat{3, 4, Float32}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.replace_in_print_matrix), SPIRV.Mat{3, 4, Float32}, Int64, Int64, String})
precompile(Tuple{Type{SPIRV.Arr{N, T} where T where N}, Float64, Vararg{Float64}})
precompile(Tuple{Type{SPIRV.Arr{4, Float64}}, Float64, Vararg{Float64}})
precompile(Tuple{typeof(SPIRV.CompositeConstruct), Type{SPIRV.Arr{4, Float64}}, Vararg{Float64, 4}})
precompile(Tuple{typeof(Base.getindex), SPIRV.Arr{4, Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Arr{4, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.last), SPIRV.Arr{4, Float64}})
precompile(Tuple{typeof(Base.first), SPIRV.Arr{4, Float64}})
precompile(Tuple{typeof(Base.similar), SPIRV.Arr{4, Float64}})
precompile(Tuple{typeof(Base.:(==)), SPIRV.Arr{4, Float64}, SPIRV.Arr{4, Float64}})
precompile(Tuple{typeof(Base.size), SPIRV.Arr{4, Float64}})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Arr{4, Float64}, SPIRV.Arr{4, Float64}})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Arr{4, Float64}, Float64, Int64})
precompile(Tuple{typeof(Base.firstindex), SPIRV.Arr{4, Float64}})
precompile(Tuple{typeof(Base.getproperty), SPIRV.Arr{2, SPIRV.Vec{2, Float32}}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SPIRV.Arr{2, SPIRV.Vec{2, Float32}}, Tuple{SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.ArrStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{SPIRV.Arr{2, SPIRV.Vec{2, Float32}}, Tuple{SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{SPIRV.Vec{2, Float32}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{SPIRV.ArrStyle{2}, Nothing, typeof(Base.:(==)), Tuple{SPIRV.Arr{2, SPIRV.Vec{2, Float32}}, Tuple{SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}}}}})
precompile(Tuple{typeof(Base.all), SPIRV.Arr{2, Bool}})
precompile(Tuple{typeof(Base.getindex), SPIRV.Arr{2, SPIRV.Vec{2, Float32}}, Int64})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Arr{2, SPIRV.Vec{2, Float32}}, SPIRV.Vec{2, Float32}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{SPIRV.Vec{4, Float32}, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#218#219"{SPIRV.var"#371#372"{SPIRV.Vec{4, Float32}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, Base.var"#218#219"{SPIRV.var"#371#372"{SPIRV.Vec{4, Float32}}}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, Base.var"#218#219"{SPIRV.var"#371#372"{SPIRV.Vec{4, Float32}}}}, Base.HasShape{1}})
precompile(Tuple{typeof(SPIRV.CompositeConstruct), Type{SPIRV.Arr{16, SPIRV.Vec{4, Float32}}}})
precompile(Tuple{typeof(Base.zero), Type{SPIRV.Arr{16, SPIRV.Vec{4, Float32}}}})
precompile(Tuple{Type{SPIRV.Arr{16, SPIRV.Vec{4, Float32}}}, SPIRV.Vec{4, Float32}, Vararg{SPIRV.Vec{4, Float32}}})
precompile(Tuple{typeof(SPIRV.CompositeConstruct), Type{SPIRV.Arr{16, SPIRV.Vec{4, Float32}}}, Vararg{SPIRV.Vec{4, Float32}, 16}})
precompile(Tuple{typeof(Base.eachindex), Type{SPIRV.Arr{16, SPIRV.Vec{4, Float32}}}})
precompile(Tuple{typeof(Base.eachindex), Type{SPIRV.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.all), typeof(Base.iszero), SPIRV.Arr{16, SPIRV.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.foldl), SPIRV.var"#342#343"{typeof(Base.iszero)}, SPIRV.Arr{16, SPIRV.Vec{4, Float32}}, Bool})
precompile(Tuple{typeof(Base.getindex), SPIRV.Arr{16, SPIRV.Vec{4, Float32}}, Int64})
precompile(Tuple{typeof(Base.setproperty!), SPIRV.Vec{4, Float32}, Symbol, Float64})
precompile(Tuple{typeof(Base.iszero), Float32})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#218#219"{SPIRV.var"#373#374"{SPIRV.Vec{4, Float32}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, Base.var"#218#219"{SPIRV.var"#373#374"{SPIRV.Vec{4, Float32}}}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, Base.var"#218#219"{SPIRV.var"#373#374"{SPIRV.Vec{4, Float32}}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.one), Type{SPIRV.Arr{16, SPIRV.Vec{4, Float32}}}})
precompile(Tuple{typeof(Base.all), typeof(Base.isone), SPIRV.Arr{16, SPIRV.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.repr), SPIRV.Arr{16, SPIRV.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, SPIRV.Arr{16, SPIRV.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.typeinfo_eltype), Type{SPIRV.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.repr), Base.Multimedia.MIME{Symbol("text/plain")}, SPIRV.Arr{16, SPIRV.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.isassigned), SPIRV.Arr{16, SPIRV.Vec{4, Float32}}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), SPIRV.Arr{16, SPIRV.Vec{4, Float32}}, Int64, Int64})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, SPIRV.Vec{4, Float32}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, SPIRV.Vec{4, Float32}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, SPIRV.Vec{4, Float32}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:context, :sizehint), Tuple{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64}}, typeof(Base.sprint), Function, SPIRV.Vec{4, Float32}})
precompile(Tuple{typeof(Base.replace_in_print_matrix), SPIRV.Arr{16, SPIRV.Vec{4, Float32}}, Int64, Int64, String})
precompile(Tuple{typeof(Base.zeros), Type{SPIRV.Vec{4, Float32}}, Int64, Int64})
precompile(Tuple{Type{SPIRV.Image{SPIRV.ImageFormat(0x00000001), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}}, Array{SPIRV.Vec{4, Float32}, 2}})
precompile(Tuple{typeof(SPIRV.texel_type), SPIRV.Image{Format, Dim, Depth, Arrayed, MS, Sampled, T} where T where Sampled where MS where Arrayed where Depth where Dim where Format})
precompile(Tuple{typeof(SPIRV.format), Type{SPIRV.Image{SPIRV.ImageFormat(0x00000001), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}}})
precompile(Tuple{typeof(Base.getindex), SPIRV.Image{SPIRV.ImageFormat(0x00000001), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{SPIRV.Vec{4, Float32}, 2}, Int64})
precompile(Tuple{typeof(Base.convert), Type{SPIRV.Vec{4, Float32}}, SPIRV.Vec{4, Float32}})
precompile(Tuple{typeof(Base.zero), Type{SPIRV.Vec{4, Float32}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Int64}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Int64, Vararg{Int64}}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast._getindex), Tuple{Tuple{Int64}}, Int64})
precompile(Tuple{typeof(Base.getindex), SPIRV.Image{SPIRV.ImageFormat(0x00000001), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{SPIRV.Vec{4, Float32}, 2}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.one), Type{SPIRV.Vec{4, Float32}}})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Image{SPIRV.ImageFormat(0x00000001), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}, SPIRV.Vec{4, Float32}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.Vec{4, Float32}, 2}, SPIRV.Vec{4, Float32}, Int64})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Image{SPIRV.ImageFormat(0x00000001), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}, SPIRV.Vec{4, Float32}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.Vec{4, Float32}, 2}, SPIRV.Vec{4, Float32}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{Type{SPIRV.Sampler}})
precompile(Tuple{Type{SPIRV.SampledImage{I} where I<:(SPIRV.Image{Format, Dim, Depth, Arrayed, MS, Sampled, T} where T where Sampled where MS where Arrayed where Depth where Dim where Format)}, SPIRV.Image{SPIRV.ImageFormat(0x00000001), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}, SPIRV.Sampler})
precompile(Tuple{typeof(SPIRV.sampled_type), SPIRV.SampledImage{SPIRV.Image{SPIRV.ImageFormat(0x00000001), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}}})
precompile(Tuple{SPIRV.SampledImage{SPIRV.Image{SPIRV.ImageFormat(0x00000001), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}}, Float32})
precompile(Tuple{typeof(Base.eltype), SPIRV.Image{SPIRV.ImageFormat(0x00000001), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}})
precompile(Tuple{SPIRV.SampledImage{SPIRV.Image{SPIRV.ImageFormat(0x00000001), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}}, Float32, Float32})
precompile(Tuple{SPIRV.SampledImage{SPIRV.Image{SPIRV.ImageFormat(0x00000001), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}}, SPIRV.Vec{2, Float32}, Int64})
precompile(Tuple{typeof(Base.copy), SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.setproperty!), SPIRV.Vec{2, Float32}, Symbol, Int64})
precompile(Tuple{typeof(Base.copy), SPIRV.Arr{2, SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, SPIRV.Arr{2, SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{Float32, Float32}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.copy), SPIRV.Pointer{Int64}})
precompile(Tuple{Type{Ref{T} where T}, Tuple{Int64, SPIRV.Vec{2, Float32}}})
precompile(Tuple{Type{SPIRV.Pointer{T} where T}, Base.RefValue{Tuple{Int64, SPIRV.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.copy), SPIRV.Pointer{Tuple{Int64, SPIRV.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.getindex), SPIRV.Pointer{Tuple{Int64, SPIRV.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.one), Type{SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Pointer{Tuple{Int64, SPIRV.Vec{2, Float32}}}, Tuple{Int64, SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, SPIRV.Vec{2, Float32}}, Tuple{Int64, SPIRV.Vec{2, Float32}}})
precompile(Tuple{Type{SPIRV.Vec{N, T} where T where N}, Int64, Vararg{Int64}})
precompile(Tuple{Type{SPIRV.Vec{2, Int64}}, Int64, Vararg{Int64}})
precompile(Tuple{Type{Ref{T} where T}, SPIRV.Vec{2, Int64}})
precompile(Tuple{Type{SPIRV.Pointer{T} where T}, Base.RefValue{SPIRV.Vec{2, Int64}}})
precompile(Tuple{typeof(Base.copy), SPIRV.Pointer{SPIRV.Vec{2, Int64}}})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, SPIRV.Vec{2, Int64}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{Int64, Int64}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Pointer{SPIRV.Vec{2, Int64}}, SPIRV.Vec{2, Int64}})
precompile(Tuple{typeof(Base.getindex), SPIRV.Pointer{SPIRV.Vec{2, Int64}}})
precompile(Tuple{typeof(Base.:(==)), SPIRV.Vec{2, Int64}, SPIRV.Vec{2, Int64}})
precompile(Tuple{typeof(Base.zero), Type{SPIRV.Arr{3, SPIRV.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.one), Type{SPIRV.Arr{3, SPIRV.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SPIRV.Arr{3, SPIRV.Vec{2, Float32}}, SPIRV.Arr{3, SPIRV.Vec{2, Float32}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{SPIRV.Arr{3, SPIRV.Vec{2, Float32}}, SPIRV.Arr{3, SPIRV.Vec{2, Float32}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Nothing, typeof(Base.:(+)), Tuple{SPIRV.Arr{3, SPIRV.Vec{2, Float32}}, SPIRV.Arr{3, SPIRV.Vec{2, Float32}}}}})
precompile(Tuple{typeof(Base.:(==)), SPIRV.Arr{3, SPIRV.Vec{2, Float32}}, SPIRV.Arr{3, SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.one), Type{SPIRV.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SPIRV.Arr{3, SPIRV.Vec{2, Float32}}, SPIRV.Vec{3, Float32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{SPIRV.Arr{3, SPIRV.Vec{2, Float32}}, SPIRV.Vec{3, Float32}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Any, Any, Any}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Nothing, typeof(Base.:(+)), Tuple{SPIRV.Arr{3, SPIRV.Vec{2, Float32}}, SPIRV.Vec{3, Float32}}}})
precompile(Tuple{typeof(Base.sprint), Function, MethodError})
precompile(Tuple{typeof(Base.showerror), Base.GenericIOBuffer{Array{UInt8, 1}}, MethodError})
precompile(Tuple{Base.var"#904#906", Type})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._all), Base.var"#929#930", Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, TypeVar})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Core.TypeofVararg})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Base.var"#916#923", Base.Order.ForwardOrdering}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, Int64}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, Int64}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.Lt{Base.Sort.var"#26#27"{Base.Order.By{Base.var"#916#923", Base.Order.ForwardOrdering}}}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, Int64}, Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, Int64}})
precompile(Tuple{Type{Ref{T} where T}, SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SPIRV.Arr{3, SPIRV.Vec{2, Float32}}, Base.RefValue{SPIRV.Vec{2, Float32}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{SPIRV.Arr{3, SPIRV.Vec{2, Float32}}, Base.RefValue{SPIRV.Vec{2, Float32}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{SPIRV.Vec{2, Float32}}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{SPIRV.Vec{2, Float32}, Vararg{SPIRV.Vec{2, Float32}}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Nothing, typeof(Base.:(+)), Tuple{SPIRV.Arr{3, SPIRV.Vec{2, Float32}}, Base.RefValue{SPIRV.Vec{2, Float32}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SPIRV.Arr{3, SPIRV.Vec{2, Float32}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getindex), Tuple{SPIRV.Arr{3, SPIRV.Vec{2, Float32}}, Int64}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Any, Vararg{SPIRV.Vec{2, Float32}}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Nothing, typeof(Base.getindex), Tuple{SPIRV.Arr{3, SPIRV.Vec{2, Float32}}, Int64}}})
precompile(Tuple{Type{SPIRV.Arr{N, T} where T where N}, Float32, Vararg{Float32}})
precompile(Tuple{Type{SPIRV.Arr{3, Float32}}, Float32, Vararg{Float32}})
precompile(Tuple{typeof(Base.:(==)), SPIRV.Arr{3, Float32}, SPIRV.Arr{3, Float32}})
precompile(Tuple{typeof(Base.zero), Type{SPIRV.Arr{3, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SPIRV.Arr{3, Float32}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{SPIRV.Arr{3, Float32}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Nothing, typeof(Base.:(+)), Tuple{SPIRV.Arr{3, Float32}, Int64}}, SPIRV.Arr{3, Float32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Nothing, typeof(Base.:(+)), Tuple{SPIRV.Arr{3, Float32}, Int64}}, SPIRV.Arr{3, Float32}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Real, Vararg{Float32}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Nothing, typeof(Base.:(+)), Tuple{SPIRV.Arr{3, Float32}, Int64}}, SPIRV.Arr{3, Float32}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, SPIRV.Arr{3, Float32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Int64, SPIRV.Arr{3, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Nothing, typeof(Base.:(+)), Tuple{Int64, SPIRV.Arr{3, Float32}}}})
precompile(Tuple{typeof(Base.one), Type{SPIRV.Arr{3, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SPIRV.Vec{3, Float32}, Float32})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.VecStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{SPIRV.Vec{3, Float32}, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SPIRV.Arr{3, Float32}, Base.Broadcast.Broadcasted{SPIRV.VecStyle{3}, Nothing, typeof(Base.:(/)), Tuple{SPIRV.Vec{3, Float32}, Float32}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{SPIRV.Arr{3, Float32}, Base.Broadcast.Broadcasted{SPIRV.VecStyle{3}, Nothing, typeof(Base.:(/)), Tuple{SPIRV.Vec{3, Float32}, Float32}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Nothing, typeof(Base.:(+)), Tuple{SPIRV.Arr{3, Float32}, Base.Broadcast.Broadcasted{SPIRV.VecStyle{3}, Nothing, typeof(Base.:(/)), Tuple{SPIRV.Vec{3, Float32}, Float32}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Int64, SPIRV.Arr{3, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Nothing, typeof(Base.:(*)), Tuple{Int64, SPIRV.Arr{3, Float32}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Nothing, typeof(Base.:(+)), Tuple{SPIRV.Arr{3, SPIRV.Vec{2, Float32}}, Base.RefValue{SPIRV.Vec{2, Float32}}}}, UInt32})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getindex), Tuple{Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Nothing, typeof(Base.:(+)), Tuple{SPIRV.Arr{3, SPIRV.Vec{2, Float32}}, Base.RefValue{SPIRV.Vec{2, Float32}}}}, UInt32}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Nothing, typeof(Base.getindex), Tuple{Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Nothing, typeof(Base.:(+)), Tuple{SPIRV.Arr{3, SPIRV.Vec{2, Float32}}, Base.RefValue{SPIRV.Vec{2, Float32}}}}, UInt32}}})
precompile(Tuple{Type{SPIRV.Arr{N, T} where T where N}, Int64, Vararg{Int64}})
precompile(Tuple{Type{SPIRV.Arr{3, Int64}}, Int64, Vararg{Int64}})
precompile(Tuple{typeof(SPIRV.CompositeConstruct), Type{SPIRV.Arr{3, Int64}}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), SPIRV.Arr{3, Int64}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SPIRV.Arr{3, Int64}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{SPIRV.Arr{3, Int64}, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Int64, Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{SPIRV.ArrStyle{3}, Nothing, typeof(Base.:(==)), Tuple{SPIRV.Arr{3, Int64}, Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base.all), SPIRV.Arr{3, Bool}})
precompile(Tuple{typeof(Base.copyto!), SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.all), typeof(Base.iszero), SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.Broadcast.materialize), SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.:(+)), SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.:(*)), Int64, SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.:(-)), SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Nothing, typeof(Base.:(*)), Tuple{SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Int64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Nothing, typeof(Base.:(/)), Tuple{SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, SPIRV.Vec{2, Float32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Int64, SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Int64, SPIRV.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SPIRV.Vec{2, Float32}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{SPIRV.Vec{2, Float32}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SPIRV.Vec{2, Float32}, Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Nothing, typeof(Base.:(*)), Tuple{SPIRV.Vec{2, Float32}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{SPIRV.Vec{2, Float32}, Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Nothing, typeof(Base.:(*)), Tuple{SPIRV.Vec{2, Float32}, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Nothing, typeof(Base.:(+)), Tuple{SPIRV.Vec{2, Float32}, Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Nothing, typeof(Base.:(*)), Tuple{SPIRV.Vec{2, Float32}, Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SPIRV.Vec{2, Float32}, Float32})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{SPIRV.Vec{2, Float32}, Float32}})
precompile(Tuple{typeof(Base.:(<<)), Int32, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.exp), SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Nothing, typeof(Base.:(*)), Tuple{SPIRV.Vec{2, Float32}, Float32}}, SPIRV.Vec{2, Float32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Nothing, typeof(Base.:(*)), Tuple{SPIRV.Vec{2, Float32}, Float32}}, SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Nothing, typeof(Base.:(*)), Tuple{SPIRV.Vec{2, Float32}, Float32}}, SPIRV.Vec{2, Float32}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.ceil), Tuple{Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Nothing, typeof(Base.:(*)), Tuple{SPIRV.Vec{2, Float32}, Float32}}, SPIRV.Vec{2, Float32}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Nothing, typeof(Base.ceil), Tuple{Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{SPIRV.VecStyle{2}, Nothing, typeof(Base.:(*)), Tuple{SPIRV.Vec{2, Float32}, Float32}}, SPIRV.Vec{2, Float32}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), SPIRV.Vec{2, Float32}, SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Int64, 1}, SPIRV.Vec{2, Float32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Int64, 1}, SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(Base.Broadcast.shapeindexer), Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.newindex), Int64, Tuple{Bool}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, SPIRV.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.:(==)), Array{Float32, 1}, SPIRV.Vec{2, Float32}})
precompile(Tuple{typeof(Base.similar), SPIRV.Vec{4, Float32}})
precompile(Tuple{typeof(Base.all), typeof(Base.iszero), SPIRV.Vec{4, Float32}})
precompile(Tuple{typeof(Base.setindex!), SPIRV.Vec{4, Float32}, SPIRV.Vec{4, Float32}})
precompile(Tuple{typeof(Base.sum), SPIRV.Vec{4, Float32}})
precompile(Tuple{Type{SPIRV.Vec{3, Float32}}, Float64, Vararg{Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{Float32}}, Tuple{Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.ntuple), Base.Broadcast.var"#31#32"{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{Float32}}, Tuple{Float64, Float64, Float64}}}}, Base.Val{3}})
precompile(Tuple{SPIRV.var"##s648#334", Vararg{Any, 4}})
precompile(Tuple{typeof(Base.eachindex), Type{SPIRV.Vec{3, Float32}}})
precompile(Tuple{typeof(Base.lastindex), Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.getindex), Base.UnitRange{UInt32}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.negate), UInt32})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Expr}}, typeof(Base.foldr), Function, Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.mapfoldr_impl), Function, Function, Expr, Base.UnitRange{UInt32}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{Base.FlipArgs{SPIRV.var"#335#336"}}, Base.Generator{Base.UnitRange{UInt32}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{Base.FlipArgs{SPIRV.var"#335#336"}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.FlipArgs{SPIRV.var"#335#336"}, Symbol})
precompile(Tuple{typeof(Base.foldl_impl), Base.BottomRF{Base.FlipArgs{SPIRV.var"#335#336"}}, Expr, Base.StepRange{UInt32, Int32}})
precompile(Tuple{typeof(Base.foldr), typeof(Base.:(+)), SPIRV.Vec{3, Float32}})
precompile(Tuple{SPIRV.var"##s648#328", Vararg{Any, 4}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Expr}}, typeof(Base.foldl), Function, Base.UnitRange{UInt32}})
precompile(Tuple{Base.var"##mapfoldl#289", Expr, typeof(Base.mapfoldl), Function, Function, Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{SPIRV.var"#329#330"}, Symbol})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), SPIRV.var"#329#330", Expr, Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.foldl), typeof(Base.:(+)), SPIRV.Vec{3, Float32}})
precompile(Tuple{typeof(Base.sum), SPIRV.Vec{3, Float32}})
precompile(Tuple{typeof(Base.collect), SPIRV.Vec{3, Float32}})
precompile(Tuple{typeof(Base.sum), Array{Float32, 1}})
precompile(Tuple{typeof(Base.foldr), typeof(Base.:(*)), SPIRV.Vec{3, Float32}})
precompile(Tuple{typeof(Base.foldl), typeof(Base.:(*)), SPIRV.Vec{3, Float32}})
precompile(Tuple{SPIRV.var"##s648#347", Vararg{Any, 4}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SPIRV.var"#348#349", Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{UInt32}, SPIRV.var"#348#349"}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{UInt32}, SPIRV.var"#348#349"}, UInt32})
precompile(Tuple{typeof(Base.prod), SPIRV.Vec{3, Float32}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(Base.identity), typeof(Base.mul_prod)}, Symbol})
precompile(Tuple{typeof(Base.prod), Array{Float32, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#218#219"{SPIRV.var"#371#372"{Float32}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, Base.var"#218#219"{SPIRV.var"#371#372"{Float32}}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, Base.var"#218#219"{SPIRV.var"#371#372"{Float32}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, Base.var"#218#219"{SPIRV.var"#371#372"{Float32}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float32, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float32, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, Base.var"#218#219"{SPIRV.var"#371#372"{Float32}}}, Int64})
precompile(Tuple{typeof(Base.zero), Type{SPIRV.Arr{16, Float32}}})
precompile(Tuple{Type{SPIRV.Arr{16, Float32}}, Float32, Vararg{Float32}})
precompile(Tuple{typeof(SPIRV.CompositeConstruct), Type{SPIRV.Arr{16, Float32}}, Vararg{Float32, 16}})
precompile(Tuple{typeof(Base.eachindex), Type{SPIRV.Arr{16, Float32}}})
precompile(Tuple{typeof(Base.all), typeof(Base.iszero), SPIRV.Arr{16, Float32}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#218#219"{SPIRV.var"#373#374"{Float32}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, Base.var"#218#219"{SPIRV.var"#373#374"{Float32}}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, Base.var"#218#219"{SPIRV.var"#373#374"{Float32}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, Base.var"#218#219"{SPIRV.var"#373#374"{Float32}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, Base.var"#218#219"{SPIRV.var"#373#374"{Float32}}}, Int64})
precompile(Tuple{typeof(Base.one), Type{SPIRV.Arr{16, Float32}}})
precompile(Tuple{typeof(Base.all), typeof(Base.isone), SPIRV.Arr{16, Float32}})
precompile(Tuple{typeof(Base.all), typeof(Base.isone), SPIRV.Vec{4, Float32}})
precompile(Tuple{typeof(Base.zero), Type{SPIRV.Mat{4, 4, Float32}}})
precompile(Tuple{typeof(Base.eachindex), Type{SPIRV.Mat{4, 4, Float32}}})
precompile(Tuple{typeof(Base.all), typeof(Base.iszero), SPIRV.Mat{4, 4, Float32}})
precompile(Tuple{typeof(Base.one), Type{SPIRV.Mat{4, 4, Float32}}})
precompile(Tuple{typeof(Base.all), typeof(Base.isone), SPIRV.Mat{4, 4, Float32}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#218#219"{SPIRV.var"#371#372"{SPIRV.Vec{2, Float32}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, Base.var"#218#219"{SPIRV.var"#371#372"{SPIRV.Vec{2, Float32}}}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, Base.var"#218#219"{SPIRV.var"#371#372"{SPIRV.Vec{2, Float32}}}}, Base.HasShape{1}})
precompile(Tuple{typeof(SPIRV.CompositeConstruct), Type{SPIRV.Arr{16, SPIRV.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.zero), Type{SPIRV.Arr{16, SPIRV.Vec{2, Float32}}}})
precompile(Tuple{Type{SPIRV.Arr{16, SPIRV.Vec{2, Float32}}}, SPIRV.Vec{2, Float32}, Vararg{SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(SPIRV.CompositeConstruct), Type{SPIRV.Arr{16, SPIRV.Vec{2, Float32}}}, Vararg{SPIRV.Vec{2, Float32}, 16}})
precompile(Tuple{typeof(Base.eachindex), Type{SPIRV.Arr{16, SPIRV.Vec{2, Float32}}}})
precompile(Tuple{typeof(Base.all), typeof(Base.iszero), SPIRV.Arr{16, SPIRV.Vec{2, Float32}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{SPIRV.Vec{3, Float32}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{SPIRV.Mat{3, 3, Float32}, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#218#219"{SPIRV.var"#371#372"{SPIRV.Mat{3, 3, Float32}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, Base.var"#218#219"{SPIRV.var"#371#372"{SPIRV.Mat{3, 3, Float32}}}}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, Base.var"#218#219"{SPIRV.var"#371#372"{SPIRV.Mat{3, 3, Float32}}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.zero), Type{SPIRV.Arr{16, SPIRV.Mat{3, 3, Float32}}}})
precompile(Tuple{Type{SPIRV.Arr{16, SPIRV.Mat{3, 3, Float32}}}, SPIRV.Mat{3, 3, Float32}, Vararg{SPIRV.Mat{3, 3, Float32}}})
precompile(Tuple{typeof(SPIRV.CompositeConstruct), Type{SPIRV.Arr{16, SPIRV.Mat{3, 3, Float32}}}, Vararg{SPIRV.Mat{3, 3, Float32}, 16}})
precompile(Tuple{typeof(Base.eachindex), Type{SPIRV.Arr{16, SPIRV.Mat{3, 3, Float32}}}})
precompile(Tuple{typeof(Base.eachindex), Type{SPIRV.Mat{3, 3, Float32}}})
precompile(Tuple{typeof(Base.all), typeof(Base.iszero), SPIRV.Arr{16, SPIRV.Mat{3, 3, Float32}}})
precompile(Tuple{typeof(Base.foldl), SPIRV.var"#342#343"{typeof(Base.iszero)}, SPIRV.Arr{16, SPIRV.Mat{3, 3, Float32}}, Bool})
precompile(Tuple{typeof(Core.Compiler.findall), Type, SPIRV.NOverlayMethodTable})
precompile(Tuple{typeof(Base.getproperty), Core.Compiler.MethodLookupResult, Symbol})
precompile(Tuple{typeof(Base.getproperty), Method, Symbol})
precompile(Tuple{MLStyle.MatchImpl.var"#@trymatch", LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.getindex), Type{Pair{Function, Tuple{LineNumberNode, Int64}}}})
precompile(Tuple{Type{Base.Dict{Int64, Any}}})
precompile(Tuple{typeof(Base.eachindex), Array{Any, 1}})
precompile(Tuple{typeof(Base.ndims), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.view), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Base.Val{:vec3}, Tuple{Array{Any, 1}, Symbol, Array{Any, 1}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Base.Val{:vec3}, Tuple{Array{Any, 1}, Symbol, Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Base.Val{:vec3}, Tuple{Array{Any, 1}, Symbol, Array{Any, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Any, 1}, Symbol, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Any, 1}, Symbol, Array{Any, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{typeof(MLStyle.AbstractPatterns.wildcard), 1}, Function, Base.Generator{Array{Any, 1}, MLStyle.MatchImpl.var"#13#19"{MLStyle.MatchImpl.ModuleBoundedEx2tf}}, Int64})
precompile(Tuple{Type{Array{Function, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Function, 1}, Function, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Function, 1}, Base.Generator{Array{Any, 1}, MLStyle.MatchImpl.var"#13#19"{MLStyle.MatchImpl.ModuleBoundedEx2tf}}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Function, 1}})
precompile(Tuple{Type{NamedTuple{(:guard1,), T} where T<:Tuple}, Tuple{MLStyle.AbstractPatterns.NoncachablePre}})
precompile(Tuple{typeof(Base.vcat), Array{Function, 1}, Function, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), Type{Function}, Function, Function})
precompile(Tuple{typeof(Base.string), String, Function, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Function})
precompile(Tuple{Type{NamedTuple{(:view,), T} where T<:Tuple}, Tuple{MLStyle.AbstractPatterns.BasicPatterns.SimpleCachablePre}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Function, Tuple{LineNumberNode, Int64}})
precompile(Tuple{typeof(Core.convert), Type{MLStyle.AbstractPatterns.var"#apply#14"{Array{MLStyle.AbstractPatterns.var"#apply#24"{MLStyle.AbstractPatterns.PComp, extract, ps} where ps where extract, 1}}}, MLStyle.AbstractPatterns.var"#apply#14"{Array{MLStyle.AbstractPatterns.var"#apply#24"{MLStyle.AbstractPatterns.PComp, extract, ps} where ps where extract, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Any, Int64})
precompile(Tuple{typeof(Base.convert), Type{Base.AbstractSet{Symbol}}, Base.Set{Symbol}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, DataType}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Set{Symbol}})
precompile(Tuple{typeof(Base.sort!), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#109#110"{Array{Function, 1}}, Int64, Function, Function, Function})
precompile(Tuple{typeof(Core.convert), Type{MLStyle.AbstractPatterns.var"#apply#14"{Array{Function, 1}}}, MLStyle.AbstractPatterns.var"#apply#14"{Array{Function, 1}}})
precompile(Tuple{typeof(Core.convert), Type{typeof(MLStyle.AbstractPatterns.wildcard)}, typeof(MLStyle.AbstractPatterns.wildcard)})
precompile(Tuple{typeof(Base.isempty), Array{Pair{Function, Tuple{LineNumberNode, Int64}}, 1}})
precompile(Tuple{Type{NamedTuple{(:hygienic,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:hygienic,), Tuple{Bool}}, Type{NamedTuple{(:hygienic,), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.iterate), Array{Pair{Function, Tuple{LineNumberNode, Int64}}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Function, Tuple{LineNumberNode, Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Function, Tuple{LineNumberNode, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Function, Int64}, Function})
precompile(Tuple{Type{NamedTuple{(:and, :or, :literal, :wildcard, :decons, :guard, :effect), T} where T<:Tuple}, Tuple{MLStyle.AbstractPatterns.var"#and#27"{Int64}, MLStyle.AbstractPatterns.var"#or#28"{Int64}, MLStyle.AbstractPatterns.var"#literal#29", DataType, MLStyle.AbstractPatterns.var"#decons#30"{Int64}, MLStyle.AbstractPatterns.var"#guard#31", MLStyle.AbstractPatterns.var"#effect#32"}})
precompile(Tuple{Type{NamedTuple{(:and, :or, :literal, :wildcard, :decons, :guard, :effect), T} where T<:Tuple}, Tuple{MLStyle.AbstractPatterns.var"#and#37"{MLStyle.AbstractPatterns.var"#mk_info#35"{Int64, Int64}}, MLStyle.AbstractPatterns.var"#or#38"{MLStyle.AbstractPatterns.var"#mk_info#35"{Int64, Int64}}, UnionAll, MLStyle.AbstractPatterns.Wildcard, MLStyle.AbstractPatterns.var"#decons#36"{MLStyle.AbstractPatterns.var"#mk_info#35"{Int64, Int64}}, DataType, DataType}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Any, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getindex), Tuple{Array{Any, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.getindex), Tuple{Array{Any, 1}, Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Any, 1}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Array{Any, 1}, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.getindex), Tuple{Array{Array{Any, 1}, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.getindex), Tuple{Array{Array{Any, 1}, 1}, Int64}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getindex), Tuple{Base.Broadcast.Extruded{Array{Array{Any, 1}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Type{DataType}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getindex), Tuple{Base.Broadcast.Extruded{Array{Array{Any, 1}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Base.IteratorSize}, Array{Array{Any, 1}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Array{Any, 1}, 1}})
precompile(Tuple{Type{MLStyle.AbstractPatterns.PatternInfo}, MLStyle.AbstractPatterns.TagfulPattern, DataType})
precompile(Tuple{typeof(Base.iterate), Array{Array{Any, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getindex), Tuple{Base.Broadcast.Extruded{Array{Array{Any, 1}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Type{Type}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Type, 1}, Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getindex), Tuple{Base.Broadcast.Extruded{Array{Array{Any, 1}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Type, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Type, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getindex), Tuple{Base.Broadcast.Extruded{Array{Array{Any, 1}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.eachindex), Tuple{DataType, UnionAll}})
precompile(Tuple{typeof(Base.isabstracttype), Any})
precompile(Tuple{typeof(Base._array_for), Type{DataType}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{DataType, 1}, TypeVar, Int64})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{DataType}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{DataType}}, typeof(Base.foldl), Function, Array{Any, 1}})
precompile(Tuple{Base.var"##mapfoldl#289", Type, typeof(Base.mapfoldl), Function, Function, Array{Any, 1}})
precompile(Tuple{Type{MLStyle.AbstractPatterns.PatternInfo}, MLStyle.AbstractPatterns.TagfulPattern, UnionAll})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getindex), Tuple{Base.Broadcast.Extruded{Array{Array{Any, 1}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Type{UnionAll}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{UnionAll, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getindex), Tuple{Base.Broadcast.Extruded{Array{Array{Any, 1}, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.isempty), Array{Array{Any, 1}, 1}})
precompile(Tuple{typeof(Base.reduce), Function, Array{DataType, 1}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Base._InitialValue, Array{DataType, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(Base.identity), typeof(Base.typeintersect)}, Symbol})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.identity), typeof(Base.typeintersect)}, Type{DataType}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.typeintersect), Base.IndexLinear, Array{DataType, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, MLStyle.AbstractPatterns.PatternInfo, Tuple{LineNumberNode, Int64}})
precompile(Tuple{typeof(Base.iterate), Array{Pair{Function, Tuple{LineNumberNode, Int64}}, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{LineNumberNode, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{LineNumberNode, Int64}, Int64, Int64})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Union{DataType, Union, UnionAll}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{DataType, Union, UnionAll}, 1}, Type, Int64})
precompile(Tuple{typeof(Base.reduce), Function, Array{Union{DataType, Union, UnionAll}, 1}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Base._InitialValue, Array{Union{DataType, Union, UnionAll}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(Base.identity), typeof(Base.typejoin)}, Symbol})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.identity), typeof(Base.typejoin)}, Type{Union{DataType, Union, UnionAll}}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.typejoin), Base.IndexLinear, Array{Union{DataType, Union, UnionAll}, 1}})
precompile(Tuple{typeof(MLStyle.AbstractPatterns.build_dyn), DataType, Array{Pair{MLStyle.AbstractPatterns.PatternInfo, Tuple{LineNumberNode, Int64}}, 1}})
precompile(Tuple{Type{Array{Union{DataType, Union, UnionAll}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.lastindex), Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Type{Union{DataType, Union, UnionAll}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{DataType}}, typeof(Base.reduce), Function, Array{Union{DataType, Union, UnionAll}, 1}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Type, Array{Union{DataType, Union, UnionAll}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base.typejoin)}, Symbol})
precompile(Tuple{typeof(Base.reduce_empty), Base.BottomRF{typeof(Base.typejoin)}, Type{Union{DataType, Union, UnionAll}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.typejoin), Type, Array{Union{DataType, Union, UnionAll}, 1}})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.get!), MLStyle.AbstractPatterns.var"#39#40", Base.Dict{Union{DataType, Union, UnionAll}, Array{Pair{MLStyle.AbstractPatterns.PatternInfo, Tuple{LineNumberNode, Int64}}, 1}}, Type{Expr}})
precompile(Tuple{typeof(Base.setindex!), Array{Array{Pair{MLStyle.AbstractPatterns.PatternInfo, Tuple{LineNumberNode, Int64}}, 1}, 1}, Array{Pair{MLStyle.AbstractPatterns.PatternInfo, Tuple{LineNumberNode, Int64}}, 1}, Int64})
precompile(Tuple{typeof(Base.get!), MLStyle.AbstractPatterns.var"#39#40", Base.Dict{Union{DataType, Union, UnionAll}, Array{Pair{MLStyle.AbstractPatterns.PatternInfo, Tuple{LineNumberNode, Int64}}, 1}}, Type{GlobalRef}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, MLStyle.AbstractPatterns.Shaped})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{GlobalRef}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{Expr}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{DataType, Union, UnionAll}, MLStyle.AbstractPatterns.AbstractCase}, MLStyle.AbstractPatterns.Shaped, Type{GlobalRef}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{Symbol, Symbol}}, Base.Dict{Symbol, Symbol}})
precompile(Tuple{Type{Base.Dict{Pair{Union{DataType, Union, UnionAll}, Any}, Tuple{Symbol, Bool}}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{Pair{Union{DataType, Union, UnionAll}, Any}, Tuple{Symbol, Bool}}}, Base.Dict{Pair{Union{DataType, Union, UnionAll}, Any}, Tuple{Symbol, Bool}}})
precompile(Tuple{Type{Ref{Union{DataType, Union, UnionAll}}}, Type})
precompile(Tuple{typeof(Base.convert), Type{Ref{Union{DataType, Union, UnionAll}}}, Base.RefValue{Union{Union{DataType, Union}, UnionAll}}})
precompile(Tuple{typeof(Base.gensym)})
precompile(Tuple{Type{Base.Val{x} where x}, Bool})
precompile(Tuple{Type{NamedTuple{(:scope,), T} where T<:Tuple}, Tuple{MLStyle.AbstractPatterns.ChainDict{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Union{Union{DataType, Union}, UnionAll}}})
precompile(Tuple{Type{NamedTuple{(:scope, :view_cache), T} where T<:Tuple}, Tuple{MLStyle.AbstractPatterns.ChainDict{Symbol, Symbol}, MLStyle.AbstractPatterns.ChainDict{Pair{Union{DataType, Union, UnionAll}, Any}, Tuple{Symbol, Bool}}}})
precompile(Tuple{MLStyle.AbstractPatterns.var"#ap#12"{false, MLStyle.AbstractPatterns.Target{false}}, DataType})
precompile(Tuple{Type{NamedTuple{(:type, :ln), T} where T<:Tuple}, Tuple{DataType, LineNumberNode}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:type, :ln), Tuple{DataType, LineNumberNode}}, Symbol})
precompile(Tuple{Type{Array{MLStyle.AbstractPatterns.RedyFlavoured.var"#apply#17"{f} where f, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.isempty), Array{Function, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Function, 1}, Int64})
precompile(Tuple{typeof(Base.view), Array{Function, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:ty,), T} where T<:Tuple}, Tuple{DataType}})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:ty,), Tuple{DataType}}, Type{NamedTuple{(:ty, :depend), T} where T<:Tuple}})
precompile(Tuple{MLStyle.AbstractPatterns.RedyFlavoured.var"##static_memo#5", DataType, Union{Nothing, MLStyle.AbstractPatterns.APP}, typeof(MLStyle.AbstractPatterns.RedyFlavoured.static_memo), Function, MLStyle.AbstractPatterns.ChainDict{Pair{Union{DataType, Union, UnionAll}, Any}, Tuple{Symbol, Bool}}, MLStyle.AbstractPatterns.APP})
precompile(Tuple{Type{NamedTuple{(:ty, :depend), T} where T<:Tuple}, Tuple{DataType, MLStyle.AbstractPatterns.NoPre}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Tuple{Bool, MLStyle.AbstractPatterns.RedyFlavoured.CompileEnv, MLStyle.AbstractPatterns.RedyFlavoured.TrueCond}}})
precompile(Tuple{typeof(Base.isempty), Array{Symbol, 1}})
precompile(Tuple{Type{NamedTuple{(:view_cache,), T} where T<:Tuple}, Tuple{MLStyle.AbstractPatterns.ChainDict{Pair{Union{DataType, Union, UnionAll}, Any}, Tuple{Symbol, Bool}}}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Pair{Union{DataType, Union, UnionAll}, Any}, Tuple{Symbol, Bool}}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Int64, Any}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Symbol}})
precompile(Tuple{Type{NamedTuple{(:type, :ln), T} where T<:Tuple}, Tuple{UnionAll, LineNumberNode}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:type, :ln), Tuple{UnionAll, LineNumberNode}}, Symbol})
precompile(Tuple{Type{Array{MLStyle.AbstractPatterns.UserSitgnature.var"#apply#10"{MLStyle.AbstractPatterns.PComp, extract, ps, NamedTuple{(:type, :ln), Tuple{DataType, LineNumberNode}}} where ps where extract, 1}}, UndefInitializer, Int64})
precompile(Tuple{Type{Pair{Union{DataType, Union, UnionAll}, Any}}, Any, Any})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pair{Union{DataType, Union, UnionAll}, Any}, Tuple{Symbol, Bool}}, Tuple{Symbol, Bool}, Pair{Union{DataType, Union, UnionAll}, Any}})
precompile(Tuple{Type{NamedTuple{(:ty, :depend), T} where T<:Tuple}, Tuple{DataType, MLStyle.AbstractPatterns.BasicPatterns.SimpleCachablePre}})
precompile(Tuple{MLStyle.AbstractPatterns.var"#9#10"{MLStyle.AbstractPatterns.Target{false}}, UnionAll})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Union{Union{DataType, Union}, UnionAll}}, Type})
precompile(Tuple{Type{NamedTuple{(:ty,), T} where T<:Tuple}, Tuple{UnionAll}})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:ty,), Tuple{UnionAll}}, Type{NamedTuple{(:ty, :depend), T} where T<:Tuple}})
precompile(Tuple{MLStyle.AbstractPatterns.RedyFlavoured.var"##static_memo#5", UnionAll, Union{Nothing, MLStyle.AbstractPatterns.APP}, typeof(MLStyle.AbstractPatterns.RedyFlavoured.static_memo), Function, MLStyle.AbstractPatterns.ChainDict{Pair{Union{DataType, Union, UnionAll}, Any}, Tuple{Symbol, Bool}}, MLStyle.AbstractPatterns.APP})
precompile(Tuple{Type{NamedTuple{(:ty, :depend), T} where T<:Tuple}, Tuple{UnionAll, MLStyle.AbstractPatterns.NoPre}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Expr}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Expr}}, typeof(Base.foldr), Function, Array{Any, 1}})
precompile(Tuple{typeof(Base.mapfoldr_impl), Function, Function, Expr, Array{Any, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Symbol}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Pair{Union{DataType, Union, UnionAll}, Any}, Tuple{Symbol, Bool}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Pair{Union{DataType, Union, UnionAll}, Any}, Tuple{Symbol, Bool}}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Pair{Union{DataType, Union, UnionAll}, Any}, Tuple{Symbol, Bool}}, Int64})
precompile(Tuple{typeof(Base.string), String, LineNumberNode})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, LineNumberNode})
precompile(Tuple{typeof(Base.promote_type), Type{MLStyle.AbstractPatterns.var"#apply#20"{MLStyle.MatchImpl.var"#8#9"{Array{Symbol, 1}, Bool, Expr, Array{Any, 1}}}}, Type{typeof(MLStyle.AbstractPatterns.wildcard)}})
precompile(Tuple{MLStyle.AbstractPatterns.var"#apply#20"{MLStyle.MatchImpl.var"#8#9"{Array{Symbol, 1}, Bool, Expr, Array{Any, 1}}}, Tuple{NamedTuple{(:and, :or, :literal, :wildcard, :decons, :guard, :effect), Tuple{MLStyle.AbstractPatterns.var"#and#27"{Int64}, MLStyle.AbstractPatterns.var"#or#28"{Int64}, MLStyle.AbstractPatterns.var"#literal#29", DataType, MLStyle.AbstractPatterns.var"#decons#30"{Int64}, MLStyle.AbstractPatterns.var"#guard#31", MLStyle.AbstractPatterns.var"#effect#32"}}, NamedTuple{(:and, :or, :literal, :wildcard, :decons, :guard, :effect), Tuple{MLStyle.AbstractPatterns.var"#and#37"{MLStyle.AbstractPatterns.var"#mk_info#35"{Int64, Int64}}, MLStyle.AbstractPatterns.var"#or#38"{MLStyle.AbstractPatterns.var"#mk_info#35"{Int64, Int64}}, UnionAll, MLStyle.AbstractPatterns.Wildcard, MLStyle.AbstractPatterns.var"#decons#36"{MLStyle.AbstractPatterns.var"#mk_info#35"{Int64, Int64}}, DataType, DataType}}}})
precompile(Tuple{MLStyle.AbstractPatterns.var"#9#10"{MLStyle.AbstractPatterns.Target{false}}, DataType})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Tuple{Bool, MLStyle.AbstractPatterns.RedyFlavoured.CompileEnv, MLStyle.AbstractPatterns.RedyFlavoured.CheckCond}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Tuple{Bool, MLStyle.AbstractPatterns.RedyFlavoured.CompileEnv, MLStyle.AbstractPatterns.RedyFlavoured.CheckCond}}}, typeof(Base.foldl), Function, Base.SubArray{Function, 1, Array{Function, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{Base.var"##mapfoldl#289", Tuple{Bool, MLStyle.AbstractPatterns.RedyFlavoured.CompileEnv, MLStyle.AbstractPatterns.RedyFlavoured.CheckCond}, typeof(Base.mapfoldl), Function, Function, Base.SubArray{Function, 1, Array{Function, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), MLStyle.AbstractPatterns.RedyFlavoured.var"#11#24"{MLStyle.AbstractPatterns.Target{false}}, Tuple{Bool, MLStyle.AbstractPatterns.RedyFlavoured.CompileEnv, MLStyle.AbstractPatterns.RedyFlavoured.CheckCond}, Base.SubArray{Function, 1, Array{Function, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.foldr), Function, Array{Any, 1}})
precompile(Tuple{typeof(Base.mapfoldr_impl), Function, Function, Base._InitialValue, Array{Any, 1}})
precompile(Tuple{MLStyle.AbstractPatterns.UserSitgnature.var"#apply#12"{MLStyle.MatchImpl.var"#8#9"{Array{Symbol, 1}, Bool, Expr, Array{Any, 1}}, NamedTuple{(:type, :ln), Tuple{DataType, LineNumberNode}}}, NamedTuple{(:and, :or, :literal, :wildcard, :decons, :guard, :effect), T} where T<:Tuple})
precompile(Tuple{MLStyle.AbstractPatterns.RedyFlavoured.var"#apply#17"{MLStyle.AbstractPatterns.RedyFlavoured.var"#ap_guard#34"{MLStyle.MatchImpl.var"#8#9"{Array{Symbol, 1}, Bool, Expr, Array{Any, 1}}, NamedTuple{(:type, :ln), Tuple{DataType, LineNumberNode}}}}, MLStyle.AbstractPatterns.RedyFlavoured.CompileEnv, MLStyle.AbstractPatterns.Target{false}})
precompile(Tuple{MLStyle.AbstractPatterns.RedyFlavoured.var"#ap_guard#34"{MLStyle.MatchImpl.var"#8#9"{Array{Symbol, 1}, Bool, Expr, Array{Any, 1}}, NamedTuple{(:type, :ln), Tuple{DataType, LineNumberNode}}}, Any, MLStyle.AbstractPatterns.Target{false}})
precompile(Tuple{MLStyle.MatchImpl.var"#8#9"{Array{Symbol, 1}, Bool, Expr, Array{Any, 1}}, Any, Any, Any})
precompile(Tuple{typeof(Base.in), Expr, NTuple{8, Symbol}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, Test.var"#16#21", Tuple{Expr}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Test.var"#15#20", Base.Iterators.Filter{Test.var"#16#21", Tuple{Expr}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{Test.var"#16#21", Tuple{Expr}}, Test.var"#15#20"}})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{Expr}})
precompile(Tuple{typeof(Base.grow_to!), Array{Expr, 1}, Base.Generator{Base.Iterators.Filter{Test.var"#16#21", Tuple{Expr}}, Test.var"#15#20"}, Int64})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, Test.var"#18#23", Tuple{Expr}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Test.var"#17#22", Base.Iterators.Filter{Test.var"#18#23", Tuple{Expr}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{Test.var"#18#23", Tuple{Expr}}, Test.var"#17#22"}})
precompile(Tuple{typeof(Base.filter), Function, Tuple{Expr}})
precompile(Tuple{typeof(Base.filter_rec), Test.var"#19#24", Tuple{Expr}})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Expr, 1}, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Expr, 1}, Symbol}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Expr, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Any, 1}, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Any, 1}, Symbol}, Int64, Int64})
precompile(Tuple{SPIRV.var"#418#419", Symbol})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.var"#418#419"}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Expr, 1}, Symbol, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, SPIRV.var"#418#419"}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{Type{NamedTuple{(:broken,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{Bool}})
precompile(Tuple{typeof(Base.push!), Array{Bool, 1}, Bool})
precompile(Tuple{typeof(Base.grow_to!), Array{Bool, 1}, Base.Generator{Base.Iterators.Filter{Test.var"#16#21", Tuple{Expr}}, Test.var"#15#20"}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Bool, 1}, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Bool, 1}, Symbol}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Bool, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Bool, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Expr, Expr}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.esc), Tuple{Tuple{Expr, Expr}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.esc), Tuple{Tuple{Expr, Expr}}}})
precompile(Tuple{typeof(SPIRV.store_expr), Expr, Expr})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Symbol, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.remove_linenums!), Core.CodeInfo})
precompile(Tuple{typeof(Base.length), Array{Core.LineInfoNode, 1}})
precompile(Tuple{typeof(Base.resize!), Array{Core.LineInfoNode, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), Core.CodeInfo, Symbol})
precompile(Tuple{typeof(Base.:(==)), GlobalRef, GlobalRef})
precompile(Tuple{typeof(Base.getproperty), GlobalRef, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Symbol, Int64})
precompile(Tuple{typeof(Base.all), Function, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._all), Base.Fix2{typeof(Base.:(==)), Symbol}, Array{Symbol, 1}, Base.Colon})
precompile(Tuple{typeof(Base.convert), Type{Type{UInt64}}, Type{UInt64}})
precompile(Tuple{typeof(Base.all), Function, Array{Any, 1}})
precompile(Tuple{typeof(Base._all), Base.Fix2{typeof(Base.:(==)), Type{UInt64}}, Array{Any, 1}, Base.Colon})
precompile(Tuple{Base.Fix2{typeof(Base.:(==)), Type{UInt64}}, Type})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Array{DataType, 1}})
precompile(Tuple{typeof(SPIRV.SLessThanEqual), Int64, Int64})
precompile(Tuple{typeof(SPIRV.SNegate), Int64})
precompile(Tuple{Type{NamedTuple{(:mod,), T} where T<:Tuple}, Tuple{Module}})
precompile(Tuple{typeof(SPIRV.SConvert), Type{Int32}, Int64})
precompile(Tuple{typeof(SPIRV.FNegate), Float32})
precompile(Tuple{typeof(SPIRV.FConvert), Type{Float32}, Float64})
precompile(Tuple{Core.Compiler.var"##analyze_method!#452", Bool, Array{Any, 1}, typeof(Core.Compiler.analyze_method!), Core.MethodMatch, Array{Any, 1}, Core.Compiler.CallInfo, UInt8, Core.Compiler.InliningState{SPIRV.SPIRVInterpreter}})
precompile(Tuple{typeof(SPIRV.ConvertSToF), Type{Float64}, Int64})
precompile(Tuple{typeof(SPIRV.FDiv), Float64, Float64})
precompile(Tuple{typeof(SPIRV.Sqrt), Float64})
precompile(Tuple{Core.Compiler.var"##resolve_todo#451", Array{Any, 1}, typeof(Core.Compiler.resolve_todo), Core.MethodInstance, Core.Compiler.InferenceResult, Array{Any, 1}, Core.Compiler.CallInfo, UInt8, Core.Compiler.InliningState{SPIRV.SPIRVInterpreter}})
precompile(Tuple{typeof(SPIRV.UConvert), Type{UInt32}, UInt16})
precompile(Tuple{typeof(SPIRV.SLessThan), Int64, Int64})
precompile(Tuple{typeof(SPIRV.FNegate), Float64})
precompile(Tuple{typeof(SPIRV.SConvert), Type{Int128}, Int64})
precompile(Tuple{typeof(SPIRV.IMul), Int64, Int64})
precompile(Tuple{typeof(SPIRV.UConvert), Type{UInt128}, Int64})
precompile(Tuple{typeof(SPIRV.SConvert), Type{Int64}, UInt16})
precompile(Tuple{typeof(Base.afoldl), Function, Int64})
precompile(Tuple{typeof(Base.:(==)), Core.ReturnNode, Core.ReturnNode})
precompile(Tuple{typeof(SPIRV.FAdd), Float64, Float64})
precompile(Tuple{typeof(SPIRV.FConvert), Type{Float64}, Float32})
precompile(Tuple{typeof(Base.afoldl), Function, Float64})
precompile(Tuple{typeof(SPIRV.LogicalNot), Bool})
precompile(Tuple{typeof(SPIRV.UConvert), Type{UInt8}, Int64})
precompile(Tuple{typeof(SPIRV.SConvert), Type{Int32}, UInt8})
precompile(Tuple{Base.var"##open_flags#409", Bool, Bool, Nothing, Bool, Nothing, typeof(Base.open_flags)})
precompile(Tuple{Base.var"##open_flags#409", Bool, Bool, Nothing, Bool, Bool, typeof(Base.open_flags)})
precompile(Tuple{typeof(SPIRV.ISub), Int64, Int64})
precompile(Tuple{typeof(SPIRV.UConvert), Type{UInt32}, Int64})
precompile(Tuple{typeof(SPIRV.BitwiseAnd), UInt8, UInt8})
precompile(Tuple{typeof(SPIRV.IEqual), UInt8, UInt8})
precompile(Tuple{typeof(SPIRV.IEqual), Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.StepRange{Int64, Int64}, Symbol})
precompile(Tuple{typeof(SPIRV.INotEqual), Int64, Int64})
precompile(Tuple{typeof(SPIRV.LogicalNotEqual), Bool, Bool})
precompile(Tuple{typeof(SPIRV.LogicalAnd), Bool, Bool})
precompile(Tuple{typeof(Base.first), Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.last), Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(SPIRV.UConvert), Type{UInt32}, UInt8})
precompile(Tuple{typeof(SPIRV.ULessThan), UInt32, UInt32})
precompile(Tuple{typeof(SPIRV.IEqual), UInt32, UInt32})
precompile(Tuple{typeof(SPIRV.LogicalOr), Bool, Bool})
precompile(Tuple{typeof(SPIRV.ISub), UInt32, UInt32})
precompile(Tuple{typeof(SPIRV.UConvert), Type{UInt64}, UInt8})
precompile(Tuple{typeof(SPIRV.SRem), Int64, Int64})
precompile(Tuple{typeof(Base.step), Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(SPIRV.SConvert), Type{Int8}, Int64})
precompile(Tuple{typeof(SPIRV.SConvert), Type{Int64}, Int8})
precompile(Tuple{typeof(SPIRV.ISub), UInt64, UInt64})
precompile(Tuple{typeof(SPIRV.IMul), UInt64, UInt64})
precompile(Tuple{typeof(Base.convert), Type{Base.ImmutableDict{Symbol, Any}}, Base.ImmutableDict{Symbol, Any}})
precompile(Tuple{typeof(SPIRV.IAdd), UInt64, UInt64})
precompile(Tuple{typeof(SPIRV.FOrdLessThan), Float32, Float32})
precompile(Tuple{typeof(SPIRV.ConvertFToS), Type{Int64}, Float32})
precompile(Tuple{typeof(SPIRV.FOrdLessThan), Float64, Float64})
precompile(Tuple{typeof(SPIRV.ConvertFToS), Type{Int64}, Float64})
precompile(Tuple{typeof(SPIRV.FUnordNotEqual), Float64, Float64})
precompile(Tuple{typeof(SPIRV.FOrdEqual), Float64, Float64})
precompile(Tuple{typeof(SPIRV.FAbs), Float64})
precompile(Tuple{typeof(SPIRV.FOrdEqual), Float32, Float32})
precompile(Tuple{typeof(Base.:(==)), Core.PiNode, Core.ReturnNode})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Core.PiNode, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Core.ReturnNode, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), IO, Core.ReturnNode, Int64, Int64})
precompile(Tuple{typeof(SPIRV.Fma), Float64, Float64, Float64})
precompile(Tuple{typeof(SPIRV.FSub), Float64, Float64})
precompile(Tuple{typeof(SPIRV.FMul), Float64, Float64})
precompile(Tuple{typeof(SPIRV.FOrdLessThanEqual), Float64, Float64})
precompile(Tuple{typeof(SPIRV.FMul), Float32, Float32})
precompile(Tuple{typeof(SPIRV.Round), Float32})
precompile(Tuple{typeof(SPIRV.ConvertFToS), Type{Int32}, Float32})
precompile(Tuple{typeof(SPIRV.Fma), Float32, Float32, Float32})
precompile(Tuple{typeof(SPIRV.IAdd), Int32, Int32})
precompile(Tuple{typeof(SPIRV.FOrdLessThanEqual), Float32, Float32})
precompile(Tuple{typeof(SPIRV.SConvert), Type{Int64}, Int32})
precompile(Tuple{typeof(Base.oftype), Float64, Float64})
precompile(Tuple{typeof(SPIRV.Round), Float64})
precompile(Tuple{Type{Base.Math.DoubleFloat64}, Float64, Float64})
precompile(Tuple{Type{SPIRV.Vec{3, Float64}}, Float64, Vararg{Float64}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tuple{Float64, Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.:(==)), SPIRV.Vec{3, Float64}, SPIRV.Vec{3, Float64}})
precompile(Tuple{typeof(SPIRV.argtype), SPIRV.Vec{3, Float64}})
precompile(Tuple{typeof(SPIRV.Select), Bool, Int64, Int64})
precompile(Tuple{typeof(Base.tail), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.vect), Type{SPIRV.SampledImage{SPIRV.Image{SPIRV.ImageFormat(0x00000002), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}}}, Vararg{DataType}})
precompile(Tuple{typeof(SPIRV.argtype), Function})
precompile(Tuple{typeof(Base.getindex), Array{Core.LineInfoNode, 1}, Int32})
precompile(Tuple{typeof(Base.getproperty), Core.MethodInstance, Symbol})
precompile(Tuple{typeof(Base.in), Module, Tuple{Module, Module}})
precompile(Tuple{typeof(Base.isnothing), Int64})
precompile(Tuple{typeof(SPIRV.SConvert), Type{Int64}, UInt32})
precompile(Tuple{typeof(Base.eachindex), Type{SPIRV.Arr{10, Float32}}})
precompile(Tuple{Base.Broadcast.var"#15#16"{Base.Broadcast.var"#11#13"}, UInt32})
precompile(Tuple{typeof(Base.afoldl), Function, Float32})
precompile(Tuple{typeof(SPIRV.IAdd), UInt32, UInt32})
precompile(Tuple{typeof(Base.real), Base.Complex{Bool}})
precompile(Tuple{typeof(Base.imag), Base.Complex{Bool}})
precompile(Tuple{typeof(SPIRV.FSub), Float32, Float32})
precompile(Tuple{Type{NamedTuple{(:atol,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{typeof(SPIRV.Sqrt), Float32})
precompile(Tuple{typeof(SPIRV.FUnordNotEqual), Float32, Float32})
precompile(Tuple{typeof(SPIRV.FAbs), Float32})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{14, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(SPIRV.ULessThanEqual), UInt32, UInt32})
precompile(Tuple{typeof(Base.last), Base.UnitRange{UInt32}})
precompile(Tuple{typeof(SPIRV.ConvertUToF), Type{Float64}, UInt32})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{10, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.convert), Type{Float32}, Float32})
precompile(Tuple{typeof(SPIRV.ISub), Int32, Int32})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{34, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.sum), NTuple{34, Int64}})
precompile(Tuple{typeof(Base._typed_vcat_similar), NTuple{34, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, NTuple{34, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast._getindex), Tuple{Tuple{Float32}, Tuple{Float32}, Tuple{Float32}}, Int64})
precompile(Tuple{Base.Broadcast.var"#15#16"{Base.Broadcast.var"#17#19"}, Float32, Float32, Vararg{Float32}})
precompile(Tuple{Base.Broadcast.var"#17#19", Float32, Vararg{Float32}})
precompile(Tuple{Base.Broadcast.var"#15#16"{Base.Broadcast.var"#11#13"}, Float32})
precompile(Tuple{Type{SPIRV.SupportedFeatures}, Array{String, 1}, Array{SPIRV.Capability, 1}})
precompile(Tuple{typeof(Base.map), typeof(Base.esc), Tuple{Expr, Expr}})
precompile(Tuple{typeof(Base.map), typeof(Base.esc), Tuple{Symbol, Expr}})
precompile(Tuple{Type{NamedTuple{(:interp,), T} where T<:Tuple}, Tuple{SPIRV.SPIRVInterpreter}})
precompile(Tuple{typeof(Base.splat), Type})
precompile(Tuple{typeof(Base.convert), Type{Type{Base.UnitRange{T} where T<:Real}}, Type{Base.UnitRange{T} where T<:Real}})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.:(==)), SPIRV.BooleanType, SPIRV.BooleanType})
precompile(Tuple{Type{UInt32}, SPIRV.OpCode})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.convert), Type{SPIRV.StorageClass}, SPIRV.StorageClass})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:interp,), Tuple{SPIRV.SPIRVInterpreter}}, typeof(SPIRV.compile), Any, Any, SPIRV.AllSupported})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:interp,), Tuple{SPIRV.SPIRVInterpreter}}, Type{SPIRV.SPIRVTarget}, Any, Type})
precompile(Tuple{typeof(Base.lastindex), Core.SimpleVector})
precompile(Tuple{typeof(Base.Iterators.enumerate), Core.SimpleVector})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Core.SimpleVector}, Tuple{Int64}})
precompile(Tuple{typeof(Base.push!), Array{SPIRV.SPIRType, 1}, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Core.SimpleVector}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(SPIRV.throw_compilation_error), ErrorException, NamedTuple{(:target,), Tuple{SPIRV.SPIRVTarget}}})
precompile(Tuple{typeof(Base.sprint), Function, SPIRV.CompilationError})
precompile(Tuple{typeof(Base._throw_bitset_notempty_error)})
precompile(Tuple{Type{NamedTuple{(:attach_after,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.showerror), Base.GenericIOBuffer{Array{UInt8, 1}}, SPIRV.CompilationError})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Core.MethodInstance})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Core.CodeInfo})
precompile(Tuple{typeof(Base.isempty), Array{Core.LineInfoNode, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Core.LineInfoNode, 1}, Int64})
precompile(Tuple{Base.IRShow.var"#52#54", Core.CodeInfo})
precompile(Tuple{typeof(Base.IRShow.DILineInfoPrinter), Array{T, 1} where T})
precompile(Tuple{Type{NamedTuple{(:final,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Base.IRShow.var"##show_ir_stmts#45", Any, typeof(Base.IRShow.show_ir_stmts), IO, Union{Core.Compiler.IRCode, Core.Compiler.IncrementalCompact, Core.CodeInfo}, Any, Base.IRShow.IRShowConfig, Base.BitSet, Core.Compiler.CFG, Int64})
precompile(Tuple{Base.Returns{Bool}, Any, Vararg{Any}})
precompile(Tuple{Base.var"##_#97", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, Base.Returns{Bool}, Any, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), Any, typeof(Base.IRShow.show_ir_stmt), IO, Union{Core.Compiler.IRCode, Core.Compiler.IncrementalCompact, Core.CodeInfo}, Int64, Base.IRShow.IRShowConfig, Base.BitSet, Core.Compiler.CFG, Int64})
precompile(Tuple{Base.IRShow.var"##show_ir_stmt#21", Any, Bool, typeof(Base.IRShow.show_ir_stmt), IO, Union{Core.Compiler.IRCode, Core.Compiler.IncrementalCompact, Core.CodeInfo}, Int64, Base.IRShow.IRShowConfig, Base.BitSet, Core.Compiler.CFG, Int64})
precompile(Tuple{typeof(Core.kwcall), Any, typeof(Base.IRShow.show_ir_stmt), IO, Union{Core.Compiler.IRCode, Core.Compiler.IncrementalCompact, Core.CodeInfo}, Int64, Any, Any, Base.BitSet, Core.Compiler.CFG, Int64})
precompile(Tuple{Base.IRShow.var"##show_ir_stmt#22", Any, Bool, Any, typeof(Base.IRShow.show_ir_stmt), IO, Union{Core.Compiler.IRCode, Core.Compiler.IncrementalCompact, Core.CodeInfo}, Int64, Any, Any, Base.BitSet, Core.Compiler.CFG, Int64})
precompile(Tuple{Base.Returns{Nothing}, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:attach_after,), Tuple{Bool}}, Base.Returns{Nothing}, Any})
precompile(Tuple{Base.IRShow.var"#print_indentation#26"{Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, Base.IRShow.var"#42#43"{Core.CodeInfo, Base.IRShow.var"#emit_lineinfo_update#15"{Array{Core.LineInfoNode, 1}, Bool, Base.IRShow.var"#indent#14"{Base.RefValue{Int64}}, Base.RefValue{Int64}, Array{Core.LineInfoNode, 1}}}, Core.Compiler.CFG, Int64}, Bool})
precompile(Tuple{typeof(Base.getindex), Array{Core.Compiler.BasicBlock, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), Core.Compiler.BasicBlock, Symbol})
precompile(Tuple{typeof(Base.first), Core.Compiler.StmtRange})
precompile(Tuple{typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Base.IRShow.var"#12#17"{Int64, Array{Core.LineInfoNode, 1}, Bool, Base.IRShow.var"#indent#14"{Base.RefValue{Int64}}, Base.RefValue{Int64}, Array{Core.LineInfoNode, 1}}, Any})
precompile(Tuple{typeof(Base.println), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:context,), Tuple{Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}}, typeof(Base.sprint), Function})
precompile(Tuple{Base.IRShow.var"#13#18"{Symbol, Base.IRShow.var"#indent#14"{Base.RefValue{Int64}}}, Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{Any}})
precompile(Tuple{typeof(Base.string), Int64})
precompile(Tuple{typeof(Base.:(^)), String, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, GlobalRef, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), Any, typeof(Base.IRShow.default_expr_type_printer), IO})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:type, :used, :show_type, :idx), Tuple{DataType, Bool, Bool, Int64}}, Type{NamedTuple{(:type, :used, :show_type), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:idx,), Tuple{Int64}}})
precompile(Tuple{typeof(Base.last), Core.Compiler.StmtRange})
precompile(Tuple{Base.IRShow.var"#23#27"{Symbol}, Any})
precompile(Tuple{typeof(Base.show_call), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Core.SSAValue, Array{Any, 1}, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Core.Argument, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:type, :used, :show_type, :idx), Tuple{Core.TypeofBottom, Bool, Bool, Int64}}, Type{NamedTuple{(:type, :used, :show_type), T} where T<:Tuple}})
precompile(Tuple{Base.IRShow.var"#42#43"{Core.CodeInfo, Base.IRShow.var"#emit_lineinfo_update#15"{Array{Core.LineInfoNode, 1}, Bool, Base.IRShow.var"#indent#14"{Base.RefValue{Int64}}, Base.RefValue{Int64}, Array{Core.LineInfoNode, 1}}}, IO, String, Int64})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.StorageClass, SPIRV.VectorType})
precompile(Tuple{typeof(Base.push!), Array{SPIRV.SPIRType, 1}, SPIRV.PointerType})
precompile(Tuple{Type{SPIRV.FunctionType}, SPIRV.VectorType, Array{SPIRV.SPIRType, 1}})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.VectorType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.PointerType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.FunctionType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.argtail), Type, Type})
precompile(Tuple{typeof(Base.string), Symbol, Char, Vararg{Any}})
precompile(Tuple{Base.Colon, Int64, Int32})
precompile(Tuple{typeof(Base.haskey), Dictionaries.Dictionary{Int64, SPIRV.Variable}, Int64})
precompile(Tuple{typeof(SPIRV.emit_expression!), SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.SPIRVTarget, SPIRV.FunctionDefinition, Expr, Type, SPIRV.Block})
precompile(Tuple{typeof(Base.collect), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(SPIRV.load_if_variable!), SPIRV.Block, SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.FunctionDefinition, Core.Argument})
precompile(Tuple{typeof(SPIRV.load_if_variable!), SPIRV.Block, SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.FunctionDefinition, UInt32})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.FloatType, SPIRV.ResultID, SPIRV.ResultID, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, UInt32}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.FloatType, SPIRV.ResultID, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect), Array{Any, 1}})
precompile(Tuple{typeof(SPIRV.load_if_variable!), SPIRV.Block, SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.FunctionDefinition, Core.SSAValue})
precompile(Tuple{typeof(SPIRV.load_if_variable!), SPIRV.Block, SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.FunctionDefinition, Float32})
precompile(Tuple{typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, Float32})
precompile(Tuple{typeof(Base.getproperty), Core.ReturnNode, Symbol})
precompile(Tuple{typeof(SPIRV.follow_globalref), Any})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, Nothing, Nothing, SPIRV.ResultID})
precompile(Tuple{typeof(Base.parse), Type{SPIRV.Module}, String})
precompile(Tuple{typeof(Base.contains), Base.SubString{String}, Char})
precompile(Tuple{typeof(Base.isapprox), SPIRV.IR, SPIRV.Module})
precompile(Tuple{typeof(Base.setindex!), SPIRV.TypeMap, SPIRV.BooleanType, DataType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Bool}, SPIRV.BooleanType})
precompile(Tuple{typeof(Base.push!), Array{SPIRV.SPIRType, 1}, SPIRV.BooleanType})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Type{SPIRV.BooleanType}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.BooleanType, 1}, SPIRV.BooleanType, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.BooleanType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Type{SPIRV.ScalarType}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.ScalarType, 1}, Array{SPIRV.BooleanType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, SPIRV.IntegerType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.ScalarType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{SPIRV.FunctionType}, SPIRV.StructType, Array{SPIRV.SPIRType, 1}})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.BooleanType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.argtail), Type, Type, Vararg{Type}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.StructType, SPIRV.ResultID, SPIRV.ResultID, Vararg{SPIRV.ResultID}})
precompile(Tuple{SPIRV.var"#98#99"{SPIRV.GlobalsInfo}, SPIRV.BooleanType})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.StorageClass, SPIRV.MatrixType})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Array{SPIRV.BooleanType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, SPIRV.MatrixType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.MatrixType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.MatrixType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.MatrixType})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.MatrixType, Nothing})
precompile(Tuple{typeof(SPIRV.dim), Type{SPIRV.Image{SPIRV.ImageFormat(0x00000002), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}}})
precompile(Tuple{typeof(SPIRV.is_depth), Type{SPIRV.Image{SPIRV.ImageFormat(0x00000002), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}}})
precompile(Tuple{typeof(SPIRV.is_arrayed), Type{SPIRV.Image{SPIRV.ImageFormat(0x00000002), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}}})
precompile(Tuple{typeof(SPIRV.is_multisampled), Type{SPIRV.Image{SPIRV.ImageFormat(0x00000002), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}}})
precompile(Tuple{typeof(SPIRV.is_sampled), Type{SPIRV.Image{SPIRV.ImageFormat(0x00000002), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}}})
precompile(Tuple{Type{SPIRV.ImageType}, SPIRV.FloatType, SPIRV.Dim, Bool, Bool, Bool, Bool, SPIRV.ImageFormat, Nothing})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.ImageType, SPIRV.ImageType})
precompile(Tuple{typeof(Base.setindex!), SPIRV.TypeMap, SPIRV.ImageType, DataType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Image{SPIRV.ImageFormat(0x00000002), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}}, SPIRV.ImageType})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.SampledImageType, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.:(==)), SPIRV.SampledImageType, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.setindex!), SPIRV.TypeMap, SPIRV.SampledImageType, DataType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.SampledImage{SPIRV.Image{SPIRV.ImageFormat(0x00000002), SPIRV.Dim(0x00000001), 0, false, false, 1, SPIRV.Vec{4, Float32}}}}, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.push!), Array{SPIRV.SPIRType, 1}, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ImageType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.SampledImageType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, SPIRV.ImageFormat})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, SPIRV.Dim})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.SampledImageType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.SampledImageType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Any}, SPIRV.ResultID, SPIRV.SampledImageType})
precompile(Tuple{SPIRV.var"#106#107"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.SampledImageType}})
precompile(Tuple{SPIRV.var"#100#101"{SPIRV.GlobalsInfo}, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.SampledImageType, Nothing})
precompile(Tuple{Type{UInt32}, SPIRV.Dim})
precompile(Tuple{Type{UInt32}, SPIRV.ImageFormat})
precompile(Tuple{typeof(Base.push!), Array{SPIRV.SPIRType, 1}, SPIRV.ImageType})
precompile(Tuple{typeof(Base.:(==)), SPIRV.SamplerType, SPIRV.SamplerType})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.SamplerType, SPIRV.SamplerType})
precompile(Tuple{typeof(Base.setindex!), SPIRV.TypeMap, SPIRV.SamplerType, DataType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Sampler}, SPIRV.SamplerType})
precompile(Tuple{typeof(Base.push!), Array{SPIRV.SPIRType, 1}, SPIRV.SamplerType})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.SamplerType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.SamplerType, SPIRV.ResultID})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.SampledImageType, SPIRV.ResultID, SPIRV.ResultID, Vararg{SPIRV.ResultID}})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ResultID, SPIRV.SamplerType})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.SamplerType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{SPIRV.ResultID, SPIRV.SamplerType}, Int64, Int64})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, Any}, SPIRV.ResultID, SPIRV.SamplerType})
precompile(Tuple{SPIRV.var"#106#107"{SPIRV.GlobalsInfo}, Pair{SPIRV.ResultID, SPIRV.SamplerType}})
precompile(Tuple{SPIRV.var"#100#101"{SPIRV.GlobalsInfo}, SPIRV.ImageType})
precompile(Tuple{SPIRV.var"#100#101"{SPIRV.GlobalsInfo}, SPIRV.SamplerType})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.SamplerType, Nothing})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.push!), Array{SPIRV.SPIRType, 1}, SPIRV.FloatType})
precompile(Tuple{Type{SPIRV.FunctionType}, SPIRV.FloatType, Array{SPIRV.SPIRType, 1}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.OpCodeGLSL, Core.Argument, Core.Argument, Core.Argument}})
precompile(Tuple{typeof(SPIRV.load_if_variable!), SPIRV.Block, SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.FunctionDefinition, SPIRV.ResultID})
precompile(Tuple{typeof(SPIRV.load_if_variable!), SPIRV.Block, SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.FunctionDefinition, SPIRV.OpCodeGLSL})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.OpCodeGLSL, SPIRV.ResultID, SPIRV.ResultID, SPIRV.ResultID}})
precompile(Tuple{SPIRV.var"#100#101"{SPIRV.GlobalsInfo}, SPIRV.FloatType})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, SPIRV.OpCodeGLSL, SPIRV.OperandInfo})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.OpCodeGLSL})
precompile(Tuple{typeof(Base.Unicode.isdigit), Char})
precompile(Tuple{typeof(Base.string), Symbol, Symbol, Vararg{Union{Char, Base.SubString{String}, String, Symbol}}})
precompile(Tuple{typeof(Base.isequal), SPIRV.OpCodeGLSL, SPIRV.OpCodeGLSL})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.OpCodeGLSL, Core.Argument}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.OpCodeGLSL, SPIRV.ResultID}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.FloatType, SPIRV.ResultID, Array{SPIRV.ResultID, 1}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.OpCodeGLSL, Core.SSAValue}})
precompile(Tuple{Type{SPIRV.Arr{1, Float32}}, Float32})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Arr{1, Float32}}, SPIRV.ArrayType})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.StorageClass, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.haskey), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ArrayType, SPIRV.ResultID})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.VectorType, SPIRV.ResultID, SPIRV.ResultID, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.ResultID, UInt32, UInt32, UInt32}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.VectorType, SPIRV.ResultID, Array{Any, 1}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.VectorType, SPIRV.ResultID, Array{SPIRV.ResultID, 1}})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{Float32}}})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.StorageClass, SPIRV.FloatType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{Float32}}, SPIRV.PointerType})
precompile(Tuple{typeof(SPIRV.storage_class), Core.Argument, SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.FunctionDefinition})
precompile(Tuple{typeof(ConstructionBase.setproperties), SPIRV.PointerType, NamedTuple{(:storage_class,), Tuple{SPIRV.StorageClass}}})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:storage_class, :type), Tuple{SPIRV.StorageClass, SPIRV.FloatType}}, NamedTuple{(:storage_class, :type), Tuple{SPIRV.StorageClass, SPIRV.FloatType}}, SPIRV.PointerType, NamedTuple{(:storage_class,), Tuple{SPIRV.StorageClass}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:storage_class, :type), Tuple{SPIRV.StorageClass, SPIRV.FloatType}}})
precompile(Tuple{typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, UInt32})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.PointerType, SPIRV.ResultID, SPIRV.ResultID, Vararg{SPIRV.ResultID}})
precompile(Tuple{typeof(SPIRV.storage_class), Core.SSAValue, SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.FunctionDefinition})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, Nothing, Nothing, SPIRV.ResultID, Vararg{Any}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, Nothing, Nothing, Array{SPIRV.ResultID, 1}})
precompile(Tuple{typeof(Base.getindex), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.vect), Core.MethodTable, Vararg{Core.MethodTable}})
precompile(Tuple{Type{SPIRV.SPIRVInterpreter}, Array{Core.MethodTable, 1}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.BooleanType, SPIRV.ResultID, SPIRV.ResultID, Vararg{SPIRV.ResultID}})
precompile(Tuple{typeof(Base.getproperty), Core.GotoIfNot, Symbol})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.OpCodeGLSL, Core.Argument, Float32, Float32}})
precompile(Tuple{typeof(Base.getproperty), Core.GotoNode, Symbol})
precompile(Tuple{typeof(SPIRV.emit_expression!), SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.SPIRVTarget, SPIRV.FunctionDefinition, Core.PhiNode, Type, SPIRV.Block})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.FloatType, SPIRV.ResultID, Core.SSAValue, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Tuple{Core.SSAValue, SPIRV.ResultID, Core.SSAValue, SPIRV.ResultID}})
precompile(Tuple{typeof(Base.:(!=)), Nothing, SPIRV.Composite})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.Composite, Int64})
precompile(Tuple{typeof(Base.:(!=)), SPIRV.Composite, SPIRV.Composite})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:interp,), Tuple{SPIRV.SPIRVInterpreter}}, typeof(SPIRV.compile), Any, Any, SPIRV.SupportedFeatures})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Type{SPIRV.FloatType}})
precompile(Tuple{typeof(Base.setindex!), Array{SPIRV.FloatType, 1}, SPIRV.FloatType, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{SPIRV.FloatType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{SPIRV.StructType}, Array{SPIRV.FloatType, 1}})
precompile(Tuple{typeof(Base.push!), Array{SPIRV.SPIRType, 1}, SPIRV.StructType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Arr{5, Float32}}, SPIRV.ArrayType})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.ArrayType, SPIRV.ResultID, SPIRV.ResultID, Vararg{SPIRV.ResultID}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.ImageType, SPIRV.ResultID, SPIRV.ResultID})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Vec{2, UInt32}}, SPIRV.VectorType})
precompile(Tuple{typeof(SPIRV.get_type), Core.Argument, SPIRV.SPIRVTarget})
precompile(Tuple{typeof(Base.findfirst), Function, Tuple{Symbol, Symbol}})
precompile(Tuple{Base.Fix2{typeof(Base.:(==)), Symbol}, Symbol})
precompile(Tuple{typeof(Base.collect), Tuple{Core.Argument, UInt32}})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{UInt32}}})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.StorageClass, SPIRV.IntegerType})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{UInt32}}, SPIRV.PointerType})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:storage_class, :type), Tuple{SPIRV.StorageClass, SPIRV.IntegerType}}, NamedTuple{(:storage_class, :type), Tuple{SPIRV.StorageClass, SPIRV.IntegerType}}, SPIRV.PointerType, NamedTuple{(:storage_class,), Tuple{SPIRV.StorageClass}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:storage_class, :type), Tuple{SPIRV.StorageClass, SPIRV.IntegerType}}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.IntegerType, SPIRV.ResultID, SPIRV.ResultID})
precompile(Tuple{typeof(SPIRV.load_if_variable!), SPIRV.Block, SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.FunctionDefinition, Float64})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, Float64, SPIRV.OperandInfo})
precompile(Tuple{typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, Float64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Vec{2, Float64}}, SPIRV.VectorType})
precompile(Tuple{typeof(SPIRV.add_extra_operands!), Array{SPIRV.OperandInfo, 1}, Int64, Core.SSAValue, SPIRV.OperandInfo})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.IntegerType, SPIRV.ResultID, SPIRV.ResultID, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.ResultID, Core.SSAValue, SPIRV.ResultID}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.IntegerType, SPIRV.ResultID, Array{Any, 1}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.PointerType, SPIRV.ResultID, Core.SSAValue, Vararg{Any}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.PointerType, SPIRV.ResultID, Array{Any, 1}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.IntegerType, SPIRV.ResultID, Array{SPIRV.ResultID, 1}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.IntegerType, SPIRV.ResultID, Core.SSAValue, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Tuple{Core.SSAValue, SPIRV.ResultID}})
precompile(Tuple{typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, Bool})
precompile(Tuple{SPIRV.var"#100#101"{SPIRV.GlobalsInfo}, SPIRV.StructType})
precompile(Tuple{typeof(Base.reinterpret), Type{UInt32}, Array{Float64, 1}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.FloatType, SPIRV.ResultID, Base.ReinterpretArray{UInt32, 1, Float64, Array{Float64, 1}, false}})
precompile(Tuple{typeof(Base.get), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.ArrayType, Nothing})
precompile(Tuple{typeof(Base.sprint), Function, SPIRV.ValidationError})
precompile(Tuple{typeof(Base.showerror), Base.GenericIOBuffer{Array{UInt8, 1}}, SPIRV.ValidationError})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Vec{2, Int32}}, SPIRV.VectorType})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{Int32}}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{Int32}}, SPIRV.PointerType})
precompile(Tuple{typeof(SPIRV.load_if_variable!), SPIRV.Block, SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.FunctionDefinition, Int32})
precompile(Tuple{typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, Int32})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Vec{3, Float64}}, SPIRV.VectorType})
precompile(Tuple{typeof(Base.eltype), Type{SPIRV.Pointer{Float64}}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Pointer{Float64}}, SPIRV.PointerType})
precompile(Tuple{Type{SPIRV.FunctionType}, SPIRV.IntegerType, Array{SPIRV.SPIRType, 1}})
precompile(Tuple{typeof(SPIRV.BitwiseAnd), Int64, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{UInt64}, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.vect), SPIRV.ExecutionModel, Vararg{SPIRV.ExecutionModel}})
precompile(Tuple{typeof(Base.iterate), Array{SPIRV.ExecutionModel, 1}})
precompile(Tuple{SPIRV.var"##CommonExecutionOptions#435", Bool, Nothing, Nothing, Nothing, Nothing, Nothing, Type{SPIRV.CommonExecutionOptions}})
precompile(Tuple{SPIRV.var"##FragmentExecutionOptions#436", SPIRV.CommonExecutionOptions, Bool, Symbol, Bool, Bool, Nothing, Type{SPIRV.FragmentExecutionOptions}})
precompile(Tuple{SPIRV.var"##GeometryExecutionOptions#438", SPIRV.CommonExecutionOptions, Nothing, Symbol, Symbol, Nothing, Type{SPIRV.GeometryExecutionOptions}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{UInt32}, Tuple{Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, Type{UInt32}, Tuple{Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, Type{UInt32}, Tuple{Tuple{Int64, Int64, Int64}}}, Symbol})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), Type{UInt32}, Int64})
precompile(Tuple{Type{SPIRV.ComputeExecutionOptions}, SPIRV.CommonExecutionOptions, Tuple{UInt32, UInt32, UInt32}})
precompile(Tuple{SPIRV.var"##TessellationExecutionOptions#439", SPIRV.CommonExecutionOptions, Symbol, Symbol, Bool, Symbol, Nothing, Type{SPIRV.TessellationExecutionOptions}})
precompile(Tuple{SPIRV.var"##MeshExecutionOptions#440", SPIRV.CommonExecutionOptions, Symbol, Nothing, Type{SPIRV.MeshExecutionOptions}})
precompile(Tuple{Type{SPIRV.ShaderExecutionOptions}, SPIRV.ExecutionModel})
precompile(Tuple{typeof(SPIRV.validate), SPIRV.CommonExecutionOptions, SPIRV.ExecutionModel})
precompile(Tuple{Type{SPIRV.EntryPoint}, Symbol, SPIRV.ResultID, SPIRV.ExecutionModel})
precompile(Tuple{typeof(SPIRV.add_options!), SPIRV.EntryPoint, SPIRV.CommonExecutionOptions})
precompile(Tuple{typeof(Base.getproperty), SPIRV.EntryPoint, Symbol})
precompile(Tuple{typeof(Base.allunique), Array{SPIRV.Instruction, 1}})
precompile(Tuple{typeof(Base.iterate), Array{SPIRV.ExecutionModel, 1}, Int64})
precompile(Tuple{typeof(SPIRV.validate), SPIRV.FragmentExecutionOptions, SPIRV.ExecutionModel})
precompile(Tuple{typeof(SPIRV.add_options!), SPIRV.EntryPoint, SPIRV.FragmentExecutionOptions})
precompile(Tuple{typeof(SPIRV.validate), SPIRV.ComputeExecutionOptions, SPIRV.ExecutionModel})
precompile(Tuple{typeof(SPIRV.add_options!), SPIRV.EntryPoint, SPIRV.ComputeExecutionOptions})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ResultID, SPIRV.ExecutionMode, UInt32, UInt32, UInt32}})
precompile(Tuple{typeof(SPIRV.validate), SPIRV.GeometryExecutionOptions, SPIRV.ExecutionModel})
precompile(Tuple{typeof(SPIRV.add_options!), SPIRV.EntryPoint, SPIRV.GeometryExecutionOptions})
precompile(Tuple{typeof(SPIRV.validate), SPIRV.TessellationExecutionOptions, SPIRV.ExecutionModel})
precompile(Tuple{typeof(SPIRV.add_options!), SPIRV.EntryPoint, SPIRV.TessellationExecutionOptions})
precompile(Tuple{typeof(SPIRV.validate), SPIRV.MeshExecutionOptions, SPIRV.ExecutionModel})
precompile(Tuple{typeof(SPIRV.add_options!), SPIRV.EntryPoint, SPIRV.MeshExecutionOptions})
precompile(Tuple{Type{NamedTuple{(:origin,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:origin,), Tuple{Symbol}}, Type{SPIRV.FragmentExecutionOptions}})
precompile(Tuple{typeof(SPIRV.validate), SPIRV.FragmentExecutionOptions})
precompile(Tuple{typeof(Base.repr), Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.repr), Tuple{Tuple{Symbol, Symbol}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Char, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.repr), Tuple{Tuple{Symbol, Symbol}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Char, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.repr), Tuple{Tuple{Symbol, Symbol}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Char, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.repr), Tuple{Tuple{Symbol, Symbol}}}}}, Char})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Char, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.repr), Tuple{Tuple{Symbol, Symbol}}}}}, Char}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Char, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.repr), Tuple{Tuple{Symbol, Symbol}}}}}, Char}}})
precompile(Tuple{typeof(Base.join), Tuple{String, String}, String})
precompile(Tuple{Type{SPIRV.InvalidExecutionOptions}, String, SPIRV.FragmentExecutionOptions})
precompile(Tuple{typeof(Base.sprint), Function, SPIRV.InvalidExecutionOptions})
precompile(Tuple{typeof(Base.showerror), Base.GenericIOBuffer{Array{UInt8, 1}}, SPIRV.InvalidExecutionOptions})
precompile(Tuple{typeof(SPIRV.compile), SPIRV.SPIRVTarget, SPIRV.AllSupported})
precompile(Tuple{Type{NamedTuple{(:storage_classes,), T} where T<:Tuple}, Tuple{Array{SPIRV.StorageClass, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:storage_classes,), Tuple{Array{SPIRV.StorageClass, 1}}}, Type{SPIRV.ShaderInterface}, SPIRV.ExecutionModel})
precompile(Tuple{SPIRV.var"##ShaderInterface#441", Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Any, Any}, Dictionaries.Dictionary{Any, Any}, SPIRV.AllSupported, SPIRV.CommonExecutionOptions, Type{SPIRV.ShaderInterface}, SPIRV.ExecutionModel})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Tuple{Int64, Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Tuple{Int64, Int64}}, Int64, Int64})
precompile(Tuple{Type{SPIRV.Shader}, SPIRV.SPIRVTarget, SPIRV.ShaderInterface, SPIRV.VulkanAlignment})
precompile(Tuple{typeof(SPIRV.promote_to_interface_block), SPIRV.VectorType, SPIRV.StorageClass})
precompile(Tuple{typeof(Base.getproperty), SPIRV.Variable, Symbol})
precompile(Tuple{typeof(SPIRV.define_entry_point!), SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.FunctionDefinition, SPIRV.ExecutionModel, SPIRV.CommonExecutionOptions})
precompile(Tuple{typeof(Base.insert!), SPIRV.BijectiveMapping{SPIRV.ResultID, SPIRV.SPIRType}, SPIRV.VoidType, SPIRV.ResultID})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{SPIRV.FloatType}, Type{Base.Set{SPIRV.StorageClass}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SPIRV.FloatType, Base.Set{SPIRV.StorageClass}}, Base.Set{SPIRV.StorageClass}, SPIRV.FloatType})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{SPIRV.FloatType, Base.Set{SPIRV.StorageClass}}, Base.Generator{SPIRV.TypeMap, SPIRV.var"#397#399"{SPIRV.TypeMetadata}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{SPIRV.FloatType, Base.Set{SPIRV.StorageClass}}, Type{SPIRV.SPIRType}, Type{Base.Set{SPIRV.StorageClass}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{SPIRV.SPIRType, Base.Set{SPIRV.StorageClass}}, Base.Dict{SPIRV.FloatType, Base.Set{SPIRV.StorageClass}}})
precompile(Tuple{SPIRV.var"#397#399"{SPIRV.TypeMetadata}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SPIRV.SPIRType, Base.Set{SPIRV.StorageClass}}, Base.Set{SPIRV.StorageClass}, SPIRV.PointerType})
precompile(Tuple{typeof(Base.:(==)), SPIRV.StorageClass, SPIRV.StorageClass})
precompile(Tuple{Type{SPIRV.Module}, SPIRV.Shader})
precompile(Tuple{typeof(SPIRV.validate), SPIRV.Shader})
precompile(Tuple{Type{SPIRV.Decorations}, SPIRV.Decoration, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Int64, SPIRV.Decorations})
precompile(Tuple{typeof(Base.vect), Pair{Int64, SPIRV.Decorations}})
precompile(Tuple{typeof(Dictionaries.dictionary), Array{Pair{Int64, SPIRV.Decorations}, 1}})
precompile(Tuple{Type{NamedTuple{(:storage_classes, :variable_decorations), T} where T<:Tuple}, Tuple{Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:storage_classes, :variable_decorations), Tuple{Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}}}, Type{SPIRV.ShaderInterface}, SPIRV.ExecutionModel})
precompile(Tuple{SPIRV.var"##ShaderInterface#441", Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{Any, Any}, SPIRV.AllSupported, SPIRV.CommonExecutionOptions, Type{SPIRV.ShaderInterface}, SPIRV.ExecutionModel})
precompile(Tuple{typeof(Base.isequal), SPIRV.VectorType, SPIRV.VectorType})
precompile(Tuple{typeof(Base.vect), SPIRV.StorageClass, Vararg{SPIRV.StorageClass}})
precompile(Tuple{Type{SPIRV.Decorations}, SPIRV.Decoration})
precompile(Tuple{SPIRV.var"#_decorate!#108"{SPIRV.Decorations}, SPIRV.Decoration, Int64})
precompile(Tuple{typeof(Base.vect), Pair{Int64, SPIRV.Decorations}, Vararg{Pair{Int64, SPIRV.Decorations}}})
precompile(Tuple{Type{SPIRV.Metadata}})
precompile(Tuple{typeof(Base.getproperty), SPIRV.Metadata, Symbol})
precompile(Tuple{SPIRV.var"#_decorate!#111"{SPIRV.Metadata}, SPIRV.Decoration, Vararg{Any}})
precompile(Tuple{typeof(SPIRV.decorate!), SPIRV.Metadata, SPIRV.Decoration})
precompile(Tuple{SPIRV.var"#_decorate!#111"{SPIRV.Metadata}, Int64, Vararg{Any}})
precompile(Tuple{typeof(SPIRV.decorate!), SPIRV.Metadata, Int64, SPIRV.Decoration, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, SPIRV.Metadata})
precompile(Tuple{typeof(Base.vect), Pair{DataType, SPIRV.Metadata}})
precompile(Tuple{typeof(Dictionaries.dictionary), Array{Pair{DataType, SPIRV.Metadata}, 1}})
precompile(Tuple{Type{NamedTuple{(:storage_classes, :variable_decorations, :type_metadata), T} where T<:Tuple}, Tuple{Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{DataType, SPIRV.Metadata}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:storage_classes, :variable_decorations, :type_metadata), Tuple{Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{DataType, SPIRV.Metadata}}}, Type{SPIRV.ShaderInterface}, SPIRV.ExecutionModel})
precompile(Tuple{SPIRV.var"##ShaderInterface#441", Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{DataType, SPIRV.Metadata}, SPIRV.AllSupported, SPIRV.CommonExecutionOptions, Type{SPIRV.ShaderInterface}, SPIRV.ExecutionModel})
precompile(Tuple{typeof(SPIRV.promote_to_interface_block), SPIRV.StructType, SPIRV.StorageClass})
precompile(Tuple{typeof(SPIRV.emit!), SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.SPIRType})
precompile(Tuple{typeof(SPIRV.decorate!), SPIRV.ModuleTarget, SPIRV.ResultID, SPIRV.Decoration})
precompile(Tuple{typeof(Base.insert!), Dictionaries.Dictionary{SPIRV.SPIRType, SPIRV.Metadata}, SPIRV.StructType, SPIRV.Metadata})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ExecutionModel, SPIRV.ResultID, String, SPIRV.ResultID, SPIRV.ResultID}})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.StructType, SPIRV.Metadata})
precompile(Tuple{Type{Accessors.PropertyLens{:type_metadata}}})
precompile(Tuple{typeof(Accessors.opticcompose), Accessors.PropertyLens{:type_metadata}})
precompile(Tuple{typeof(Base.:(!=)), NTuple{6, Symbol}, NTuple{6, Symbol}})
precompile(Tuple{typeof(Accessors.set), SPIRV.ShaderInterface, Accessors.PropertyLens{:type_metadata}, Dictionaries.Dictionary{DataType, SPIRV.Metadata}})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:execution_model, :storage_classes, :variable_decorations, :type_metadata, :features, :execution_options), Tuple{SPIRV.ExecutionModel, Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{DataType, SPIRV.Metadata}, SPIRV.AllSupported, SPIRV.CommonExecutionOptions}}, NamedTuple{(:execution_model, :storage_classes, :variable_decorations, :type_metadata, :features, :execution_options), Tuple{SPIRV.ExecutionModel, Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{DataType, SPIRV.Metadata}, SPIRV.AllSupported, SPIRV.CommonExecutionOptions}}, SPIRV.ShaderInterface, NamedTuple{(:type_metadata,), Tuple{Dictionaries.Dictionary{DataType, SPIRV.Metadata}}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:execution_model, :storage_classes, :variable_decorations, :type_metadata, :features, :execution_options), Tuple{SPIRV.ExecutionModel, Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{DataType, SPIRV.Metadata}, SPIRV.AllSupported, SPIRV.CommonExecutionOptions}}})
precompile(Tuple{Type{SPIRV.ShaderInterface}, SPIRV.ExecutionModel, Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{DataType, SPIRV.Metadata}, SPIRV.AllSupported, SPIRV.CommonExecutionOptions})
precompile(Tuple{Type{SPIRV.Decorations}, SPIRV.Decoration, SPIRV.BuiltIn})
precompile(Tuple{typeof(SPIRV.promote_to_interface_block), SPIRV.IntegerType, SPIRV.StorageClass})
precompile(Tuple{typeof(Base.isequal), SPIRV.IntegerType, SPIRV.IntegerType})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ExecutionModel, SPIRV.ResultID, String, SPIRV.ResultID, SPIRV.ResultID, SPIRV.ResultID}})
precompile(Tuple{typeof(Base.findfirst), Function, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._findfirst_rec), Base.Fix2{typeof(Base.:(==)), Symbol}, Int64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.allequal), Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base._all), Base.Fix2{typeof(Base.isequal), Type{Float32}}, Tuple{DataType, DataType, DataType}, Base.Colon})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{Tuple{Float32, Float32, Float32}}, SPIRV.ArrayType})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Array{SPIRV.VectorType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, SPIRV.ArrayType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{SPIRV.ArrayType}, SPIRV.StructType, Nothing})
precompile(Tuple{typeof(SPIRV.get_type), Core.SSAValue, SPIRV.SPIRVTarget})
precompile(Tuple{typeof(Base.collect), Tuple{Core.SSAValue, UInt32}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.ArrayType, SPIRV.ResultID, SPIRV.ResultID, Vararg{Any}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.ArrayType, SPIRV.ResultID, Array{Any, 1}})
precompile(Tuple{Type{NamedTuple{(:storage_classes, :variable_decorations, :type_metadata, :features), T} where T<:Tuple}, Tuple{Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{DataType, SPIRV.Metadata}, SPIRV.SupportedFeatures}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:storage_classes, :variable_decorations, :type_metadata, :features), Tuple{Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{DataType, SPIRV.Metadata}, SPIRV.SupportedFeatures}}, Type{SPIRV.ShaderInterface}, SPIRV.ExecutionModel})
precompile(Tuple{SPIRV.var"##ShaderInterface#441", Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{DataType, SPIRV.Metadata}, SPIRV.SupportedFeatures, SPIRV.CommonExecutionOptions, Type{SPIRV.ShaderInterface}, SPIRV.ExecutionModel})
precompile(Tuple{typeof(Base.hashindex), SPIRV.PointerType, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, SPIRV.ArrayType, SPIRV.Metadata})
precompile(Tuple{typeof(SPIRV.add_operand!), Array{UInt32, 1}, SPIRV.MemoryAccess})
precompile(Tuple{Type{Dictionaries.Dictionary{I, T} where T where I}})
precompile(Tuple{typeof(Accessors.set), SPIRV.ShaderInterface, Accessors.PropertyLens{:type_metadata}, Dictionaries.Dictionary{Any, Any}})
precompile(Tuple{typeof(ConstructionBase.check_patch_properties_exist), NamedTuple{(:execution_model, :storage_classes, :variable_decorations, :type_metadata, :features, :execution_options), Tuple{SPIRV.ExecutionModel, Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{Any, Any}, SPIRV.SupportedFeatures, SPIRV.CommonExecutionOptions}}, NamedTuple{(:execution_model, :storage_classes, :variable_decorations, :type_metadata, :features, :execution_options), Tuple{SPIRV.ExecutionModel, Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{DataType, SPIRV.Metadata}, SPIRV.SupportedFeatures, SPIRV.CommonExecutionOptions}}, SPIRV.ShaderInterface, NamedTuple{(:type_metadata,), Tuple{Dictionaries.Dictionary{Any, Any}}}})
precompile(Tuple{Type{Tuple}, NamedTuple{(:execution_model, :storage_classes, :variable_decorations, :type_metadata, :features, :execution_options), Tuple{SPIRV.ExecutionModel, Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{Any, Any}, SPIRV.SupportedFeatures, SPIRV.CommonExecutionOptions}}})
precompile(Tuple{Type{SPIRV.ShaderInterface}, SPIRV.ExecutionModel, Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{Any, Any}, SPIRV.SupportedFeatures, SPIRV.CommonExecutionOptions})
precompile(Tuple{SPIRV.var"##ShaderInterface#441", Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{Any, Any}, SPIRV.AllSupported, SPIRV.FragmentExecutionOptions, Type{SPIRV.ShaderInterface}, SPIRV.ExecutionModel})
precompile(Tuple{typeof(SPIRV.define_entry_point!), SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.FunctionDefinition, SPIRV.ExecutionModel, SPIRV.FragmentExecutionOptions})
precompile(Tuple{Type{UInt32}, SPIRV.ExecutionMode})
precompile(Tuple{typeof(SPIRV.promote_to_interface_block), SPIRV.FloatType, SPIRV.StorageClass})
precompile(Tuple{SPIRV.var"#397#399"{SPIRV.TypeMetadata}, SPIRV.BooleanType})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SPIRV.SPIRType, Base.Set{SPIRV.StorageClass}}, Base.Set{SPIRV.StorageClass}, SPIRV.BooleanType})
precompile(Tuple{Type{NamedTuple{(:storage_classes, :variable_decorations, :features), T} where T<:Tuple}, Tuple{Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, SPIRV.SupportedFeatures}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:storage_classes, :variable_decorations, :features), Tuple{Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, SPIRV.SupportedFeatures}}, Type{SPIRV.ShaderInterface}, SPIRV.ExecutionModel})
precompile(Tuple{SPIRV.var"##ShaderInterface#441", Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{Any, Any}, SPIRV.SupportedFeatures, SPIRV.FragmentExecutionOptions, Type{SPIRV.ShaderInterface}, SPIRV.ExecutionModel})
precompile(Tuple{typeof(SPIRV.image_type), Type{SPIRV.SampledImage{SPIRV.Image{SPIRV.ImageFormat(0x00000009), SPIRV.Dim(0x00000001), 0, false, false, 1, Float32}}}})
precompile(Tuple{typeof(SPIRV.format), Type{SPIRV.Image{SPIRV.ImageFormat(0x00000009), SPIRV.Dim(0x00000001), 0, false, false, 1, Float32}}})
precompile(Tuple{typeof(SPIRV.dim), Type{SPIRV.Image{SPIRV.ImageFormat(0x00000009), SPIRV.Dim(0x00000001), 0, false, false, 1, Float32}}})
precompile(Tuple{typeof(SPIRV.is_depth), Type{SPIRV.Image{SPIRV.ImageFormat(0x00000009), SPIRV.Dim(0x00000001), 0, false, false, 1, Float32}}})
precompile(Tuple{typeof(SPIRV.is_arrayed), Type{SPIRV.Image{SPIRV.ImageFormat(0x00000009), SPIRV.Dim(0x00000001), 0, false, false, 1, Float32}}})
precompile(Tuple{typeof(SPIRV.is_multisampled), Type{SPIRV.Image{SPIRV.ImageFormat(0x00000009), SPIRV.Dim(0x00000001), 0, false, false, 1, Float32}}})
precompile(Tuple{typeof(SPIRV.is_sampled), Type{SPIRV.Image{SPIRV.ImageFormat(0x00000009), SPIRV.Dim(0x00000001), 0, false, false, 1, Float32}}})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Image{SPIRV.ImageFormat(0x00000009), SPIRV.Dim(0x00000001), 0, false, false, 1, Float32}}, SPIRV.ImageType})
precompile(Tuple{typeof(SPIRV.promote_to_interface_block), SPIRV.SampledImageType, SPIRV.StorageClass})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.SampledImage{SPIRV.Image{SPIRV.ImageFormat(0x00000009), SPIRV.Dim(0x00000001), 0, false, false, 1, Float32}}}, SPIRV.SampledImageType})
precompile(Tuple{Type{SPIRV.PointerType}, SPIRV.StorageClass, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.collect), NTuple{5, SPIRV.ResultID}})
precompile(Tuple{Type{SPIRV.Expression}, SPIRV.OpCode, SPIRV.ArrayType, SPIRV.ResultID, Array{SPIRV.ResultID, 1}})
precompile(Tuple{SPIRV.var"#397#399"{SPIRV.TypeMetadata}, SPIRV.ImageType})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SPIRV.SPIRType, Base.Set{SPIRV.StorageClass}}, Base.Set{SPIRV.StorageClass}, SPIRV.ImageType})
precompile(Tuple{SPIRV.var"#397#399"{SPIRV.TypeMetadata}, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{SPIRV.SPIRType, Base.Set{SPIRV.StorageClass}}, Base.Set{SPIRV.StorageClass}, SPIRV.SampledImageType})
precompile(Tuple{typeof(Base.hashindex), SPIRV.SampledImageType, Int64})
precompile(Tuple{typeof(Base.hashindex), SPIRV.ImageType, Int64})
precompile(Tuple{typeof(Base.collect), Tuple{SPIRV.ExecutionModel, SPIRV.ResultID, String, Vararg{SPIRV.ResultID, 5}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{35, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base.sum), NTuple{35, Int64}})
precompile(Tuple{typeof(Base._typed_vcat_similar), NTuple{35, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}, Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, Int64})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}, NTuple{35, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{28, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{16, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{30, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Graphs.SimpleGraphs.SimpleEdge{Int64}}, NTuple{17, Array{Graphs.SimpleGraphs.SimpleEdge{Int64}, 1}}})
precompile(Tuple{SPIRV.var"##ShaderInterface#441", Array{SPIRV.StorageClass, 1}, Dictionaries.Dictionary{Int64, SPIRV.Decorations}, Dictionaries.Dictionary{Any, Any}, SPIRV.SupportedFeatures, SPIRV.ComputeExecutionOptions, Type{SPIRV.ShaderInterface}, SPIRV.ExecutionModel})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{SPIRV.SPIRType, 1}, Array{SPIRV.VectorType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SPIRV.spir_type), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{SPIRV.TypeMap}}}, SPIRV.FloatType, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SPIRV.emit_expression!), SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.SPIRVTarget, SPIRV.FunctionDefinition, GlobalRef, Type, SPIRV.Block})
precompile(Tuple{typeof(SPIRV.emit_constant!), SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.Vec{2, Float32}})
precompile(Tuple{Type{SPIRV.VectorType}, SPIRV.BooleanType, Int64})
precompile(Tuple{typeof(Dictionaries.set!), Dictionaries.Dictionary{DataType, SPIRV.SPIRType}, Type{SPIRV.Vec{2, Bool}}, SPIRV.VectorType})
precompile(Tuple{typeof(SPIRV.define_entry_point!), SPIRV.ModuleTarget, SPIRV.Translation, SPIRV.FunctionDefinition, SPIRV.ExecutionModel, SPIRV.ComputeExecutionOptions})
precompile(Tuple{typeof(Base.isequal), SPIRV.StructType, SPIRV.StructType})
precompile(Tuple{Base.var"##printstyled#970", Bool, Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.TTY, String, Vararg{String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :italic, :underline, :blink, :reverse, :hidden), NTuple{6, Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.TTY, String, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{Base.var"##printstyled#970", Bool, Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{typeof(Base.println), Base.TTY})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String, String})
